import { Telegraf, Markup } from 'telegraf';
import dotenv from 'dotenv';
import db from './db.js';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);

const FARM_COOLDOWN = 60;      // —Å–µ–∫—É–Ω–¥
const BONUS_COOLDOWN = 3600;   // 1 —á–∞—Å

function getUser(id, username) {
  let user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  if (!user) {
    db.prepare('INSERT INTO users (id, username, stars, last_farm, last_bonus) VALUES (?, ?, 0, 0, 0)').run(id, username || '');
    user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  }
  return user;
}

function mainMenu() {
  return Markup.keyboard([
    ['‚≠ê –§–∞—Ä–º –∑–≤—ë–∑–¥', 'üéÅ –ë–æ–Ω—É—Å'],
    ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üèÜ –õ–∏–¥–µ—Ä—ã'],
    ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
  ]).resize();
}

bot.start((ctx) => {
  getUser(ctx.from.id, ctx.from.username);
  ctx.reply(`üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç üåü`, mainMenu());
});

bot.hears('‚≠ê –§–∞—Ä–º –∑–≤—ë–∑–¥', (ctx) => {
  const user = getUser(ctx.from.id, ctx.from.username);
  const now = Math.floor(Date.now() / 1000);
  const elapsed = now - user.last_farm;

  if (elapsed < FARM_COOLDOWN) {
    const wait = FARM_COOLDOWN - elapsed;
    return ctx.reply(`‚è≥ –ü–æ–¥–æ–∂–¥–∏ ${wait} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–∞—Ä–º–æ–º`);
  }

  db.prepare('UPDATE users SET stars = stars + 1, last_farm = ? WHERE id = ?').run(now, user.id);
  ctx.reply(`‚≠ê –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –∑–≤–µ–∑–¥—É!`);
});

bot.hears('üéÅ –ë–æ–Ω—É—Å', (ctx) => {
  const user = getUser(ctx.from.id, ctx.from.username);
  const now = Math.floor(Date.now() / 1000);
  const elapsed = now - user.last_bonus;

  if (elapsed < BONUS_COOLDOWN) {
    const wait = Math.ceil((BONUS_COOLDOWN - elapsed) / 60);
    return ctx.reply(`üéÅ –ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${wait} –º–∏–Ω`);
  }

  db.prepare('UPDATE users SET stars = stars + 5, last_bonus = ? WHERE id = ?').run(now, user.id);
  ctx.reply(`üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 5 –±–æ–Ω—É—Å–Ω—ã—Ö –∑–≤—ë–∑–¥!`);
});

bot.hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å', (ctx) => {
  const user = getUser(ctx.from.id, ctx.from.username);
  ctx.reply(`üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n\nüÜî ID: ${user.id}\nüí´ –ó–≤—ë–∑–¥: ${user.stars}`);
});

bot.hears('üèÜ –õ–∏–¥–µ—Ä—ã', (ctx) => {
  const leaders = db.prepare('SELECT username, stars FROM users ORDER BY stars DESC LIMIT 10').all();
  const leaderboard = leaders.map((u, i) => `${i + 1}. ${u.username || '–ê–Ω–æ–Ω–∏–º'} - ${u.stars} ‚≠ê`).join('\n');
  ctx.reply(`üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n\n${leaderboard}`);
});

bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', (ctx) => {
  const totalUsers = db.prepare('SELECT COUNT(*) as count FROM users').get().count;
  const totalStars = db.prepare('SELECT SUM(stars) as total FROM users').get().total || 0;
  ctx.reply(`üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars}`);
});

bot.command('users', (ctx) => {
  try {
    const users = db.prepare('SELECT * FROM users').all();
    if (users.length > 0) {
      const userList = users.map(user => `ID: ${user.id}, Username: ${user.username || 'Unknown'}, Stars: ${user.stars}`).join('\n');
      ctx.reply(`–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n${userList}`);
    } else {
      ctx.reply('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.');
  }
});

bot.launch();
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
