const { Telegraf, Markup } = require('telegraf');
const db = require('./db');
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = 6587897295;
const REQUIRED_CHANNEL = '@magnumtap';

function sendMainMenu(ctx) {
  return ctx.reply('üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.inlineKeyboard([
    [Markup.button.callback('‚≠ê –§–∞—Ä–º', 'farm'), Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
    [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'), Markup.button.callback('üèÜ –õ–∏–¥–µ—Ä—ã', 'leaders')],
    [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')],
    [Markup.button.callback('üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'ref')],
    [Markup.button.callback('üí° –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', 'enter_code')],
    [Markup.button.callback('üéÆ –ú–∏–Ω–∏-–∏–≥—Ä–∞', 'mini_game')],
    ctx.from.id === ADMIN_ID ? [Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin')] : []
  ]));
}

bot.start(async (ctx) => {
  const member = await ctx.telegram.getChatMember(REQUIRED_CHANNEL, ctx.from.id);
  if (['member', 'creator', 'administrator'].includes(member.status)) {
    const user = db.prepare('SELECT * FROM users WHERE id = ?').get(ctx.from.id);
    if (!user) {
      db.prepare('INSERT INTO users (id, username) VALUES (?, ?)').run(ctx.from.id, ctx.from.username || '');
    }
    await ctx.reply(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.from.first_name}!`);
    return sendMainMenu(ctx);
  } else {
    return ctx.reply('‚ùóÔ∏è–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"', Markup.inlineKeyboard([
      [Markup.button.url('üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${REQUIRED_CHANNEL.replace('@', '')}`)],
      [Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'check_sub')]
    ]));
  }
});

bot.action('check_sub', async (ctx) => {
  const member = await ctx.telegram.getChatMember(REQUIRED_CHANNEL, ctx.from.id);
  if (['member', 'creator', 'administrator'].includes(member.status)) {
    const user = db.prepare('SELECT * FROM users WHERE id = ?').get(ctx.from.id);
    if (!user) {
      db.prepare('INSERT INTO users (id, username) VALUES (?, ?)').run(ctx.from.id, ctx.from.username || '');
    }
    await ctx.deleteMessage();
    await ctx.reply(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.from.first_name}!`);
    return sendMainMenu(ctx);
  } else {
    return ctx.answerCbQuery('‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!', { show_alert: true });
  }
});

bot.action(/.+/, async (ctx) => {
  const action = ctx.callbackQuery.data;

  if (action === 'farm') {
    const user = db.prepare('SELECT * FROM users WHERE id = ?').get(ctx.from.id);
    const now = Date.now();
    if (now - user.last_farm >= 60 * 1000) {
      db.prepare('UPDATE users SET stars = stars + 1, last_farm = ? WHERE id = ?').run(now, ctx.from.id);
      return ctx.answerCbQuery('‚≠ê –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 1 –∑–≤–µ–∑–¥—É!', { show_alert: true });
    } else {
      const secondsLeft = Math.ceil((60 * 1000 - (now - user.last_farm)) / 1000);
      return ctx.answerCbQuery(`‚åõ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${secondsLeft} —Å–µ–∫.`, { show_alert: true });
    }
  }

  if (action === 'bonus') {
    const user = db.prepare('SELECT * FROM users WHERE id = ?').get(ctx.from.id);
    const now = new Date();
    const lastBonus = user.last_bonus ? new Date(user.last_bonus) : null;
    if (!lastBonus || now - lastBonus >= 24 * 60 * 60 * 1000) {
      db.prepare('UPDATE users SET stars = stars + 10, last_bonus = ? WHERE id = ?').run(now.toISOString(), ctx.from.id);
      return ctx.answerCbQuery('üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 –∑–≤—ë–∑–¥!', { show_alert: true });
    } else {
      const hoursLeft = 24 - Math.floor((now - lastBonus) / (60 * 60 * 1000));
      return ctx.answerCbQuery(`‚åõ –ë–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${hoursLeft} —á.`, { show_alert: true });
    }
  }

  if (action === 'profile') {
    const user = db.prepare('SELECT * FROM users WHERE id = ?').get(ctx.from.id);
    return ctx.answerCbQuery(`üë§ –ü—Ä–æ—Ñ–∏–ª—å\n–ó–≤—ë–∑–¥—ã: ${user.stars}`, { show_alert: true });
  }

  if (action === 'leaders') {
    const top = db.prepare('SELECT * FROM users ORDER BY stars DESC LIMIT 10').all();
    let text = 'üèÜ –¢–æ–ø 10 –ª–∏–¥–µ—Ä–æ–≤:\n\n';
    top.forEach((u, i) => {
      const refCount = db.prepare('SELECT COUNT(*) AS count FROM users WHERE referred_by = ?').get(u.id).count;
      text += `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ‚Äî ‚≠ê ${u.stars} –∑–≤—ë–∑–¥, üë• ${refCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
    });
    await ctx.reply(text);
  }

  if (action === 'stats') {
    const count = db.prepare('SELECT COUNT(*) AS count FROM users').get().count;
    return ctx.answerCbQuery(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${count}`, { show_alert: true });
  }

  if (action === 'ref') {
    const user = db.prepare('SELECT * FROM users WHERE id = ?').get(ctx.from.id);
    return ctx.reply(`üì© –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ:\nhttps://t.me/${bot.botInfo.username}?start=${ctx.from.id}`);
  }

  if (action === 'enter_code') {
    ctx.session = ctx.session || {};
    ctx.session.awaitingCode = true;
    return ctx.reply('üí° –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:');
  }

  if (action === 'mini_game') {
    return ctx.reply('üéÆ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3', Markup.inlineKeyboard([
      [Markup.button.callback('1Ô∏è‚É£', 'guess_1')],
      [Markup.button.callback('2Ô∏è‚É£', 'guess_2')],
      [Markup.button.callback('3Ô∏è‚É£', 'guess_3')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action.startsWith('guess_')) {
    const correct = Math.floor(Math.random() * 3) + 1;
    const guess = parseInt(action.split('_')[1]);
    if (guess === correct) {
      db.prepare('UPDATE users SET stars = stars + 5 WHERE id = ?').run(ctx.from.id);
      await ctx.answerCbQuery('üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +5 –∑–≤—ë–∑–¥!', { show_alert: true });
    } else {
      await ctx.answerCbQuery(`‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ë—ã–ª–æ: ${correct}`, { show_alert: true });
    }
    await ctx.deleteMessage();
    return sendMainMenu(ctx);
  }

  if (action === 'back') {
    await ctx.deleteMessage();
    return sendMainMenu(ctx);
  }

  if (action === 'admin' && ctx.from.id === ADMIN_ID) {
    return ctx.reply('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', Markup.inlineKeyboard([
      [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'broadcast')],
      [Markup.button.callback('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')],
    ]));
  }

  if (action === 'broadcast' && ctx.from.id === ADMIN_ID) {
    ctx.session = ctx.session || {};
    ctx.session.awaitingBroadcast = true;
    return ctx.reply('üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:');
  }
});

bot.on('text', async (ctx) => {
  ctx.session = ctx.session || {};

  if (ctx.session.awaitingCode) {
    ctx.session.awaitingCode = false;
    const code = ctx.message.text.trim();
    const promo = db.prepare('SELECT * FROM promo_codes WHERE code = ?').get(code);
    if (promo) {
      db.prepare('UPDATE users SET stars = stars + ? WHERE id = ?').run(promo.reward, ctx.from.id);
      db.prepare('DELETE FROM promo_codes WHERE code = ?').run(code);
      return ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω! +${promo.reward} –∑–≤—ë–∑–¥`);
    } else {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥');
    }
  }

  if (ctx.session.awaitingBroadcast && ctx.from.id === ADMIN_ID) {
    ctx.session.awaitingBroadcast = false;
    const users = db.prepare('SELECT id FROM users').all();
    users.forEach(user => {
      bot.telegram.sendMessage(user.id, `üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n\n${ctx.message.text}`).catch(() => {});
    });
    return ctx.reply('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.');
  }

  // –†–µ—Ñ–µ—Ä–∞–ª
  if (ctx.message.text.startsWith('/start')) {
    const parts = ctx.message.text.split(' ');
    const refId = parts.length > 1 ? parseInt(parts[1]) : null;

    const user = db.prepare('SELECT * FROM users WHERE id = ?').get(ctx.from.id);
    if (!user) {
      db.prepare('INSERT INTO users (id, username, referred_by) VALUES (?, ?, ?)').run(
        ctx.from.id,
        ctx.from.username || '',
        refId || null
      );

      if (refId) {
        db.prepare('UPDATE users SET stars = stars + 5 WHERE id = ?').run(refId);
        bot.telegram.sendMessage(refId, `üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: @${ctx.from.username || '–±–µ–∑ –Ω–∏–∫–∞'}! +5 –∑–≤—ë–∑–¥`);
      }
    }

    return sendMainMenu(ctx);
  }
});

bot.launch();