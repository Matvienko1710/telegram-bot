const { Telegraf, Markup, session } = require('telegraf');
const dayjs = require('dayjs');
require('dotenv').config();

const db = require('./db'); // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ db.js
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());

const REQUIRED_CHANNEL = '@magnumtap';
const ADMIN_ID = 6587897295; // üîÅ –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
const SUPPORT_CHANNEL = '@magnumsupported'; // –ö–∞–Ω–∞–ª –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
const MESSAGE_TTL = 15_000; // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (15 —Å–µ–∫—É–Ω–¥)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function deleteNotification(ctx, messageId) {
  if (messageId) {
    setTimeout(() => {
      ctx.telegram.deleteMessage(ctx.chat.id, messageId).catch((err) => {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err);
      });
    }, MESSAGE_TTL);
  }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(async (ctx, next) => {
  const id = ctx.from.id;
  const user = db.get('SELECT * FROM users WHERE id = ?', id);
  if (!user && ctx.updateType !== 'message' && ctx.message?.text !== '/start') {
    return ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.');
  }
  return next();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async function isUserSubscribed(ctx) {
  try {
    const status = await ctx.telegram.getChatMember(REQUIRED_CHANNEL, ctx.from.id);
    return ['member', 'creator', 'administrator'].includes(status.status);
  } catch {
    return false;
  }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function sendMainMenu(ctx) {
  return ctx.reply('üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.inlineKeyboard([
    [Markup.button.callback('‚≠ê –§–∞—Ä–º', 'farm'), Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
    [
      Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'),
      Markup.button.callback('üèÜ –õ–∏–¥–µ—Ä—ã', 'leaders'),
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')
    ],
    [Markup.button.callback('üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'ref')],
    [Markup.button.callback('üí° –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', 'enter_code')],
    [Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è', 'tasks')],
    ctx.from.id === ADMIN_ID ? [Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin')] : []
  ]));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
function initTasks() {
  const initialTasks = [
    { type: 'subscribe_channel', description: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @magnumtap', goal: 1, reward: 10 },
    { type: 'start_bot', description: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /start', goal: 1, reward: 5 },
    { type: 'use_promo', description: '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥', goal: 1, reward: 15 },
  ];

  initialTasks.forEach(task => {
    const exists = db.get('SELECT * FROM tasks WHERE type = ?', task.type);
    if (!exists) {
      db.run('INSERT INTO tasks (type, description, goal, reward) VALUES (?, ?, ?, ?)',
        task.type, task.description, task.goal, task.reward);
    }
  });
}

initTasks();

bot.start(async (ctx) => {
  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  const subscribed = await isUserSubscribed(ctx);
  if (!subscribed) {
    const msg = await ctx.reply(`üîí –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: ${REQUIRED_CHANNEL}`, Markup.inlineKeyboard([
      [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${REQUIRED_CHANNEL.replace('@', '')}`)],
      [Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_sub')]
    ]));
    return;
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const existing = db.get('SELECT * FROM users WHERE id = ?', id);
  if (!existing) {
    db.run('INSERT INTO users (id, username, referred_by) VALUES (?, ?, ?)', id, username, referral);
    if (referral && referral !== id) {
      db.run('UPDATE users SET stars = stars + 10 WHERE id = ?', referral);
      ctx.telegram.sendMessage(referral, `üéâ –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª @${username || '–±–µ–∑ –Ω–∏–∫–∞'} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! +10 –∑–≤—ë–∑–¥`);
    }

    // –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è "start_bot"
    const task = db.get('SELECT id, reward FROM tasks WHERE type = ?', 'start_bot');
    if (task) {
      db.run('INSERT OR REPLACE INTO user_tasks (user_id, task_id, progress, completed) VALUES (?, ?, ?, ?)', id, task.id, 1, 1);
      db.run('UPDATE users SET stars = stars + ? WHERE id = ?', task.reward, id);
      await ctx.reply(`üéâ –ó–∞–¥–∞–Ω–∏–µ "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +${task.reward} –∑–≤—ë–∑–¥`);
    }
  }

  await ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç, <b>${ctx.from.first_name || '–¥—Ä—É–≥'}</b>!\n\n` +
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>MagnumTap</b>!\n\n` +
    `‚ú® –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n` +
    `‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã (–§–∞—Ä–º)\n` +
    `‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã\n` +
    `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π\n` +
    `‚Ä¢ –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ —Ç–æ–ø–∞—Ö\n\n` +
    `üéØ –£—Å–ø–µ—Ö–æ–≤ –≤ —Ñ–∞—Ä–º–µ! üöÄ`,
    { parse_mode: 'HTML' }
  );

  await sendMainMenu(ctx);
});

bot.on('callback_query', async (ctx) => {
  const id = ctx.from.id;
  const now = Date.now();
  const action = ctx.callbackQuery.data;
  let user = db.get('SELECT * FROM users WHERE id = ?', id);

  if (!user && action !== 'check_sub') return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

  if (action === 'check_sub') {
    const subscribed = await isUserSubscribed(ctx);
    if (!subscribed) {
      return ctx.answerCbQuery('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', { show_alert: true });
    }

    // –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è "subscribe_channel"
    const task = db.get('SELECT id, reward FROM tasks WHERE type = ?', 'subscribe_channel');
    if (task) {
      const userTask = db.get('SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ?', id, task.id);
      if (!userTask || !userTask.completed) {
        db.run('INSERT OR REPLACE INTO user_tasks (user_id, task_id, progress, completed) VALUES (?, ?, ?, ?)', id, task.id, 1, 1);
        db.run('UPDATE users SET stars = stars + ? WHERE id = ?', task.reward, id);
        await ctx.answerCbQuery(`üéâ –ó–∞–¥–∞–Ω–∏–µ "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +${task.reward} –∑–≤—ë–∑–¥`, { show_alert: true });
      }
    }

    registerUser(ctx);
    await sendMainMenu(ctx);
    return;
  }

  if (action === 'farm') {
    const cooldown = 60 * 1000;
    if (now - user.last_farm < cooldown) {
      const seconds = Math.ceil((cooldown - (now - user.last_farm)) / 1000);
      return ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${seconds} —Å–µ–∫.`, { show_alert: true });
    }

    db.run('UPDATE users SET stars = stars + 1, last_farm = ? WHERE id = ?', now, id);
    return ctx.answerCbQuery('‚≠ê –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 1 –∑–≤–µ–∑–¥—É!', { show_alert: true });
  }

  if (action === 'bonus') {
    const nowDay = dayjs();
    const last = user.last_bonus ? dayjs(user.last_bonus) : null;

    if (last && nowDay.diff(last, 'hour') < 24) {
      const hoursLeft = 24 - nowDay.diff(last, 'hour');
      return ctx.answerCbQuery(`üéÅ –ë–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${hoursLeft} —á.`, { show_alert: true });
    }

    db.run('UPDATE users SET stars = stars + 5, last_bonus = ? WHERE id = ?', nowDay.toISOString(), id);
    return ctx.answerCbQuery('üéâ –ë–æ–Ω—É—Å: +5 –∑–≤—ë–∑–¥!', { show_alert: true });
  }

  if (action === 'tasks') {
    const tasks = db.all('SELECT * FROM tasks');
    const userTasks = db.all('SELECT task_id, progress, completed FROM user_tasks WHERE user_id = ?', id);

    let text = `üìã <b>–ó–∞–¥–∞–Ω–∏—è</b> üìã\n\n`;
    tasks.forEach(task => {
      const userTask = userTasks.find(ut => ut.task_id === task.id) || { progress: 0, completed: 0 };
      text += `${task.description}\n`;
      text += `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${userTask.progress} / ${task.goal}\n`;
      text += userTask.completed ? `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ! +${task.reward} –∑–≤—ë–∑–¥\n\n` : `üöÄ –ù–∞–≥—Ä–∞–¥–∞: +${task.reward} –∑–≤—ë–∑–¥\n\n`;
    });

    await ctx.editMessageText(text, {
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]])
    });
    return;
  }

  if (['profile', 'leaders', 'stats', 'ref'].includes(action)) {
    await ctx.deleteMessage();
  }

  if (action === 'profile') {
    const invited = db.get('SELECT COUNT(*) as count FROM users WHERE referred_by = ?', id).count;
    const referredByUser = user.referred_by ? db.get('SELECT username FROM users WHERE id = ?', user.referred_by) : null;
    const referrerName = referredByUser ? `@${referredByUser.username || '–±–µ–∑ –Ω–∏–∫–∞'}` : '‚Äî';
    const displayName = ctx.from.first_name || '‚Äî';

    const profileText =
      `üåü –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å üåü\n\n` +
      `üë§ –ò–º—è: ${displayName}\n` +
      `üÜî ID: ${user.id}\n\n` +
      `üí´ –ó–≤—ë–∑–¥—ã: ${user.stars}\n` +
      `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${invited}\n` +
      `üì£ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: ${referrerName}\n\n` +
      `üî• –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤—ë–∑–¥—ã —Å —É–º–æ–º!`;

    await ctx.reply(profileText, Markup.inlineKeyboard([
      [Markup.button.callback('–í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã', 'withdraw_stars')],
      [Markup.button.callback('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
    return;
  }

  if (action === 'support') {
    ctx.session = ctx.session || {};
    ctx.session.waitingForSupport = true;
    await ctx.reply('üìû –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (–º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç).', {
      reply_markup: {
        inline_keyboard: [[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_support')]]
      }
    });
    return;
  }

  if (action === 'cancel_support') {
    ctx.session.waitingForSupport = false;
    await ctx.deleteMessage();
    await sendMainMenu(ctx);
    return;
  }

  if (action === 'withdraw_stars') {
    return ctx.answerCbQuery('‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', { show_alert: true });
  }

  if (action === 'leaders') {
    const top = db.all(`
      SELECT 
        u.username, 
        u.stars, 
        (SELECT COUNT(*) FROM users WHERE referred_by = u.id) AS referrals 
      FROM users u 
      ORDER BY u.stars DESC 
      LIMIT 10
    `);

    const list = top.map((u, i) => 
      `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê ‚Äî –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${u.referrals}`
    ).join('\n');

    await ctx.reply(`üèÜ –¢–æ–ø 10:\n\n${list}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
    return;
  }

  if (action === 'stats') {
    const total = db.get('SELECT COUNT(*) as count FROM users').count;
    const totalStars = db.get('SELECT SUM(stars) as stars FROM users').stars || 0;
    await ctx.reply(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}\n‚≠ê –ó–≤—ë–∑–¥: ${totalStars}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
    return;
  }

  if (action === 'ref') {
    const link = `https://t.me/${ctx.me}?start=${ctx.from.id}`;
    await ctx.reply(`üì© –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n${link}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
    return;
  }

  if (action === 'enter_code') {
    ctx.session = ctx.session || {};
    ctx.session.waitingForCode = true;
    const msg = await ctx.reply('üí¨ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:');
    deleteNotification(ctx, msg.message_id);
    return;
  }

  if (action === 'admin') {
    if (id !== ADMIN_ID) return ctx.answerCbQuery('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
    await ctx.editMessageText(`‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å`, Markup.inlineKeyboard([
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
      [Markup.button.callback('üèÜ –¢–æ–ø', 'admin_top')],
      [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
      [Markup.button.callback('üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏', 'admin_tasks')],
      [Markup.button.callback('üìû –¢–∏–∫–µ—Ç—ã', 'admin_tickets')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
    return;
  }

  if (action === 'admin_stats') {
    const total = db.get('SELECT COUNT(*) as count FROM users').count;
    const totalStars = db.get('SELECT SUM(stars) as stars FROM users').stars || 0;
    const openTickets = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', 'open').count;
    const inProgressTickets = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', 'in_progress').count;
    const closedTickets = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', 'closed').count;
    return ctx.answerCbQuery(
      `üë• –Æ–∑–µ—Ä–æ–≤: ${total}\n‚≠ê –ó–≤—ë–∑–¥: ${totalStars}\nüìû –¢–∏–∫–µ—Ç–æ–≤: –û—Ç–∫—Ä—ã—Ç–æ: ${openTickets}, –í —Ä–∞–±–æ—Ç–µ: ${inProgressTickets}, –ó–∞–∫—Ä—ã—Ç–æ: ${closedTickets}`,
      { show_alert: true }
    );
  }

  if (action === 'admin_top') {
    const top = db.all('SELECT username, stars FROM users ORDER BY stars DESC LIMIT 10');
    const list = top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê`).join('\n');
    await ctx.reply(`üèÜ –¢–æ–ø 10:\n\n${list}`);
    return;
  }

  if (action === 'admin_broadcast') {
    ctx.session = ctx.session || {};
    ctx.session.broadcast = true;
    await ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:');
    return;
  }

  if (action === 'admin_addcode') {
    ctx.session = ctx.session || {};
    ctx.session.waitingForPromo = true;
    const msg = await ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∑–≤—ë–∑–¥—ã –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä: `CODE123 10 5`):', { parse_mode: 'Markdown' });
    deleteNotification(ctx, msg.message_id);
    return;
  }

  if (action === 'admin_tasks') {
    const tasks = db.all('SELECT * FROM tasks');
    if (tasks.length === 0) {
      await ctx.reply('üìã –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π.', Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'admin_add_task')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
      ]));
      return;
    }

    const buttons = tasks.map(task => [
      Markup.button.callback(
        `${task.description} (ID: ${task.id}, –ù–∞–≥—Ä–∞–¥–∞: ${task.reward})`,
        `admin_view_task_${task.id}`
      )
    ]);
    buttons.push([Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'admin_add_task')]);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]);

    await ctx.reply('üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:', Markup.inlineKeyboard(buttons));
    return;
  }

  if (action.startsWith('admin_view_task_')) {
    const taskId = parseInt(action.split('_')[3]);
    const task = db.get('SELECT * FROM tasks WHERE id = ?', taskId);
    if (!task) return ctx.answerCbQuery('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', { show_alert: true });

    const text = `üìã –ó–∞–¥–∞–Ω–∏–µ #${task.id}\n` +
                 `–¢–∏–ø: ${task.type}\n` +
                 `–û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}\n` +
                 `–¶–µ–ª—å: ${task.goal}\n` +
                 `–ù–∞–≥—Ä–∞–¥–∞: ${task.reward} –∑–≤—ë–∑–¥`;

    await ctx.editMessageText(text, {
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å', `admin_delete_task_${task.id}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_tasks')]
      ])
    });
    return;
  }

  if (action === 'admin_add_task') {
    ctx.session = ctx.session || {};
    ctx.session.waitingForTask = true;
    const msg = await ctx.reply(
      '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç: `—Ç–∏–ø –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª—å –Ω–∞–≥—Ä–∞–¥–∞`)\n–ü—Ä–∏–º–µ—Ä: `join_group –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ 1 10`',
      { parse_mode: 'Markdown' }
    );
    deleteNotification(ctx, msg.message_id);
    return;
  }

  if (action.startsWith('admin_delete_task_')) {
    const taskId = parseInt(action.split('_')[3]);
    db.run('DELETE FROM tasks WHERE id = ?', taskId);
    db.run('DELETE FROM user_tasks WHERE task_id = ?', taskId);
    await ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', { show_alert: true });
    await ctx.deleteMessage();
    await ctx.reply('üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:', Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'admin_add_task')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
    return;
  }

  if (action === 'admin_tickets') {
    const tickets = db.all('SELECT * FROM tickets WHERE status != ? ORDER BY created_at DESC LIMIT 10', 'closed');
    if (tickets.length === 0) {
      await ctx.reply('üìû –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.', Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
      ]));
      return;
    }

    const buttons = tickets.map(ticket => [
      Markup.button.callback(
        `–¢–∏–∫–µ—Ç #${ticket.ticket_id} (@${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}, ${ticket.status === 'open' ? '–û—Ç–∫—Ä—ã—Ç' : '–í —Ä–∞–±–æ—Ç–µ'})`,
        `ticket_${ticket.ticket_id}`
      )
    ]);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]);

    await ctx.reply('üìû –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤:', Markup.inlineKeyboard(buttons));
    return;
  }

  if (action.startsWith('ticket_')) {
    const ticketId = parseInt(action.split('_')[1]);
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', ticketId);
    if (!ticket) return ctx.answerCbQuery('–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });

    const fileIds = ticket.file_id ? JSON.parse(ticket.file_id) : [];
    let fileText = fileIds.length > 0 ? `üìé –§–∞–π–ª—ã: ${fileIds.length} —à—Ç.` : 'üìé –§–∞–π–ª–æ–≤ –Ω–µ—Ç';

    const ticketText =
      `üìû –¢–∏–∫–µ—Ç #${ticket.ticket_id}\n` +
      `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
      `üÜî ID: ${ticket.user_id}\n` +
      `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description}\n` +
      `${fileText}\n` +
      `üìÖ –°–æ–∑–¥–∞–Ω: ${ticket.created_at}\n` +
      `üìå –°—Ç–∞—Ç—É—Å: ${ticket.status === 'open' ? '–û—Ç–∫—Ä—ã—Ç' : ticket.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}`;

    const buttons = [
      [Markup.button.callback('‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', `reply_ticket_${ticketId}`)],
      [Markup.button.callback('üîÑ –í —Ä–∞–±–æ—Ç–µ', `set_ticket_status_${ticketId}_in_progress`)],
      [Markup.button.callback('‚úÖ –ó–∞–∫—Ä—ã—Ç—å', `set_ticket_status_${ticketId}_closed`)],
    ];
    if (fileIds.length > 0) {
      buttons.unshift([Markup.button.callback('üìé –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã', `view_files_${ticketId}`)]);
    }
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_tickets')]);

    await ctx.editMessageText(ticketText, { parse_mode: 'HTML', ...Markup.inlineKeyboard(buttons) });
    return;
  }

  if (action.startsWith('view_files_')) {
    const ticketId = parseInt(action.split('_')[2]);
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', ticketId);
    if (!ticket || !ticket.file_id) return ctx.answerCbQuery('–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', { show_alert: true });

    const fileIds = JSON.parse(ticket.file_id);
    for (const fileId of fileIds) {
      await ctx.telegram.sendDocument(id, fileId, { caption: `–§–∞–π–ª –∏–∑ —Ç–∏–∫–µ—Ç–∞ #${ticketId}` });
    }
    return ctx.answerCbQuery('–§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', { show_alert: true });
  }

  if (action.startsWith('reply_ticket_')) {
    const ticketId = parseInt(action.split('_')[2]);
    ctx.session = ctx.session || {};
    ctx.session.waitingForTicketReply = ticketId;
    await ctx.reply(`‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #${ticketId}:`);
    return;
  }

  if (action.startsWith('set_ticket_status_')) {
    const parts = action.split('_');
    if (parts.length < 4) {
      return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è', { show_alert: true });
    }
    const ticketId = parseInt(parts[3], 10);
    const status = parts.slice(4).join('_');

    if (isNaN(ticketId) || !['in_progress', 'closed'].includes(status)) {
      return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ —Å—Ç–∞—Ç—É—Å', { show_alert: true });
    }

    db.run('UPDATE tickets SET status = ? WHERE ticket_id = ?', status, ticketId);
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', ticketId);
    if (!ticket) return ctx.answerCbQuery('–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });

    if (ticket.channel_message_id) {
      try {
        const updatedText =
          `üìû –¢–∏–∫–µ—Ç #${ticket.ticket_id}\n` +
          `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
          `üÜî ID: ${ticket.user_id}\n` +
          `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description}\n` +
          `üìÖ –°–æ–∑–¥–∞–Ω: ${ticket.created_at}\n` +
          `üìå –°—Ç–∞—Ç—É—Å: ${ticket.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}`;
        await ctx.telegram.editMessageText(
          SUPPORT_CHANNEL,
          ticket.channel_message_id,
          undefined,
          updatedText,
          { parse_mode: 'HTML' }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }

    const userMsg = await ctx.telegram.sendMessage(
      ticket.user_id,
      `üìû –¢–∏–∫–µ—Ç #${ticketId} –æ–±–Ω–æ–≤–ª—ë–Ω. –°—Ç–∞—Ç—É—Å: ${status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}`
    );
    deleteNotification(ctx, userMsg.message_id);
    await ctx.answerCbQuery(`–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ #${ticketId} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "${status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}"`, { show_alert: true });
    return;
  }

  if (action === 'back') {
    await ctx.deleteMessage();
    await sendMainMenu(ctx);
    return;
  }
});

bot.on('message', async (ctx) => {
  const id = ctx.from.id;
  let user = db.get('SELECT * FROM users WHERE id = ?', id);

  if (!user) {
    ctx.session.waitingForCode = false;
    ctx.session.broadcast = false;
    ctx.session.waitingForPromo = false;
    ctx.session.waitingForSupport = false;
    ctx.session.waitingForTask = false;
    const msg = await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å /start.');
    return;
  }

  if (ctx.session?.waitingForSupport) {
    const description = ctx.message.text || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
    const fileIds = [];

    if (ctx.message.photo) {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      fileIds.push(photo.file_id);
    }
    if (ctx.message.document) {
      fileIds.push(ctx.message.document.file_id);
    }

    const info = await ctx.telegram.sendMessage(SUPPORT_CHANNEL, '–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ç–∞...');
    db.run(`
      INSERT INTO tickets (user_id, username, description, created_at, file_id, channel_message_id)
      VALUES (?, ?, ?, ?, ?, ?)
    `, id, user.username || '–±–µ–∑ –Ω–∏–∫–∞', description, dayjs().toISOString(), JSON.stringify(fileIds), info.message_id);

    const ticketId = db.get('SELECT last_insert_rowid() as id').id;
    const ticketText =
      `üìû –¢–∏–∫–µ—Ç #${ticketId}\n` +
      `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
      `üÜî ID: ${id}\n` +
      `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${description}\n` +
      `üìé –§–∞–π–ª—ã: ${fileIds.length > 0 ? fileIds.length + ' —à—Ç.' : '–ù–µ—Ç'}\n` +
      `üìÖ –°–æ–∑–¥–∞–Ω: ${dayjs().format('YYYY-MM-DD HH:mm:ss')}\n` +
      `üìå –°—Ç–∞—Ç—É—Å: –û—Ç–∫—Ä—ã—Ç`;

    await ctx.telegram.editMessageText(
      SUPPORT_CHANNEL,
      info.message_id,
      undefined,
      ticketText,
      { parse_mode: 'HTML' }
    );
    if (fileIds.length > 0) {
      for (const fileId of fileIds) {
        await ctx.telegram.sendDocument(SUPPORT_CHANNEL, fileId, { caption: `–§–∞–π–ª –∏–∑ —Ç–∏–∫–µ—Ç–∞ #${ticketId}` });
      }
    }

    await ctx.telegram.sendMessage(ADMIN_ID, `üìû –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #${ticketId} –æ—Ç @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}`);
    const msg = await ctx.reply(`‚úÖ –¢–∏–∫–µ—Ç #${ticketId} —Å–æ–∑–¥–∞–Ω.`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
    deleteNotification(ctx, msg.message_id);
    ctx.session.waitingForSupport = false;
    return;
  }

  if (ctx.session?.broadcast && id === ADMIN_ID) {
    const users = db.all('SELECT id FROM users');
    for (const u of users) {
      try {
        await bot.telegram.sendMessage(u.id, ctx.message.text);
      } catch {}
    }
    const msg = await ctx.reply('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    deleteNotification(ctx, msg.message_id);
    ctx.session.broadcast = false;
    return;
  }

  if (ctx.session?.waitingForCode) {
    const code = ctx.message.text.trim();
    const promo = db.get('SELECT * FROM promo_codes WHERE code = ?', code);

    if (!promo) {
      const msg = await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!');
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForCode = false;
      return;
    }

    if (promo.activations_left === 0) {
      const msg = await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω.');
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForCode = false;
      return;
    }

    let usedBy = promo.used_by ? JSON.parse(promo.used_by) : [];
    if (usedBy.includes(id)) {
      const msg = await ctx.reply('‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.');
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForCode = false;
      return;
    }

    db.run('UPDATE users SET stars = stars + ? WHERE id = ?', promo.reward, id);
    usedBy.push(id);
    db.run('UPDATE promo_codes SET activations_left = ?, used_by = ? WHERE code = ?',
      promo.activations_left - 1, JSON.stringify(usedBy), code);

    // –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è "use_promo"
    const task = db.get('SELECT id, reward FROM tasks WHERE type = ?', 'use_promo');
    if (task) {
      const userTask = db.get('SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ?', id, task.id);
      if (!userTask || !userTask.completed) {
        db.run('INSERT OR REPLACE INTO user_tasks (user_id, task_id, progress, completed) VALUES (?, ?, ?, ?)', id, task.id, 1, 1);
        db.run('UPDATE users SET stars = stars + ? WHERE id = ?', task.reward, id);
        const msg = await ctx.reply(`üéâ –ó–∞–¥–∞–Ω–∏–µ "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +${task.reward} –∑–≤—ë–∑–¥`);
        deleteNotification(ctx, msg.message_id);
      }
    }

    const msg = await ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! +${promo.reward} –∑–≤—ë–∑–¥`);
    deleteNotification(ctx, msg.message_id);
    ctx.session.waitingForCode = false;
    return;
  }

  if (ctx.session?.waitingForPromo && id === ADMIN_ID) {
    const parts = ctx.message.text.trim().split(/\s+/);
    if (parts.length !== 3) {
      const msg = await ctx.reply('‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: `–ö–û–î 10 5`', { parse_mode: 'Markdown' });
      deleteNotification(ctx, msg.message_id);
      return;
    }
    const [code, rewardStr, activationsStr] = parts;
    const reward = parseInt(rewardStr);
    const activations = parseInt(activationsStr);

    if (!code || isNaN(reward) || isNaN(activations)) {
      const msg = await ctx.reply('‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: `–ö–û–î 10 5`', { parse_mode: 'Markdown' });
      deleteNotification(ctx, msg.message_id);
      return;
    }

    db.run('INSERT INTO promo_codes (code, reward, activations_left, used_by) VALUES (?, ?, ?, ?)',
      code, reward, activations, JSON.stringify([]));

    const msg = await ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ "${code}" –Ω–∞ ${reward} –∑–≤—ë–∑–¥ –¥–æ–±–∞–≤–ª–µ–Ω.`);
    deleteNotification(ctx, msg.message_id);
    ctx.session.waitingForPromo = false;
    return;
  }

  if (ctx.session?.waitingForTask && id === ADMIN_ID) {
    const parts = ctx.message.text.trim().split(/\s+/);
    if (parts.length < 4) {
      const msg = await ctx.reply('‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: `—Ç–∏–ø –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª—å –Ω–∞–≥—Ä–∞–¥–∞`\n–ü—Ä–∏–º–µ—Ä: `join_group –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ 1 10`', { parse_mode: 'Markdown' });
      deleteNotification(ctx, msg.message_id);
      return;
    }
    const [type, ...rest] = parts;
    const description = rest.slice(0, -2).join(' ');
    const goal = parseInt(rest[rest.length - 2]);
    const reward = parseInt(rest[rest.length - 1]);

    if (!type || isNaN(goal) || isNaN(reward)) {
      const msg = await ctx.reply('‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: `—Ç–∏–ø –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª—å –Ω–∞–≥—Ä–∞–¥–∞`', { parse_mode: 'Markdown' });
      deleteNotification(ctx, msg.message_id);
      return;
    }

    try {
      db.run('INSERT INTO tasks (type, description, goal, reward) VALUES (?, ?, ?, ?)', type, description, goal, reward);
      const msg = await ctx.reply(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ "${description}" –¥–æ–±–∞–≤–ª–µ–Ω–æ.`);
      deleteNotification(ctx, msg.message_id);
    } catch (error) {
      const msg = await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.');
      deleteNotification(ctx, msg.message_id);
    }
    ctx.session.waitingForTask = false;
    return;
  }

  if (ctx.session?.waitingForTicketReply && id === ADMIN_ID) {
    const ticketId = ctx.session.waitingForTicketReply;
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', ticketId);
    if (!ticket) {
      const msg = await ctx.reply('‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForTicketReply = false;
      return;
    }

    const replyText = ctx.message.text || '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞';
    const fileIds = [];
    if (ctx.message.photo) {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      fileIds.push(photo.file_id);
    }
    if (ctx.message.document) {
      fileIds.push(ctx.message.document.file_id);
    }

    if (ticket.channel_message_id) {
      try {
        const updatedText =
          `üìû –¢–∏–∫–µ—Ç #${ticket.ticket_id}\n` +
          `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
          `üÜî ID: ${ticket.user_id}\n` +
          `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description}\n` +
          `üìÖ –°–æ–∑–¥–∞–Ω: ${ticket.created_at}\n` +
          `üìå –°—Ç–∞—Ç—É—Å: ${ticket.status}\n` +
          `\n‚úçÔ∏è –û—Ç–≤–µ—Ç: ${replyText}`;
        await ctx.telegram.editMessageText(
          SUPPORT_CHANNEL,
          ticket.channel_message_id,
          undefined,
          updatedText,
          { parse_mode: 'HTML' }
        );
        if (fileIds.length > 0) {
          for (const fileId of fileIds) {
            await ctx.telegram.sendDocument(SUPPORT_CHANNEL, fileId, { caption: `–§–∞–π–ª –∫ –æ—Ç–≤–µ—Ç—É #${ticketId}` });
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }

    const userMsg = await ctx.telegram.sendMessage(
      ticket.user_id,
      `üìû –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId}:\n${replyText}`
    );
    deleteNotification(ctx, userMsg.message_id);
    if (fileIds.length > 0) {
      for (const fileId of fileIds) {
        await ctx.telegram.sendDocument(ticket.user_id, fileId, { caption: `–§–∞–π–ª –∫ –æ—Ç–≤–µ—Ç—É #${ticketId}` });
      }
    }

    const replyMsg = await ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ö —Ç–∏–∫–µ—Ç–∞–º', 'admin_tickets')]
    ]));
    deleteNotification(ctx, replyMsg.message_id);
    ctx.session.waitingForTicketReply = false;
    return;
  }
});

function registerUser(ctx) {
  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;

  const existing = db.get('SELECT * FROM users WHERE id = ?', id);
  if (!existing) {
    db.run('INSERT INTO users (id, username, referred_by) VALUES (?, ?, ?)', id, username, referral);

    if (referral && referral !== id) {
      db.run('UPDATE users SET stars = stars + 10 WHERE id = ?', referral);
      ctx.telegram.sendMessage(referral, `üéâ –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª @${username || '–±–µ–∑ –Ω–∏–∫–∞'} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! +10 –∑–≤—ë–∑–¥`);
    }
  }
}

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
/*
 * –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:
 * 1. –ß–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:
 *    - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏" (–∫–Ω–æ–ø–∫–∞ "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏").
 *    - –ù–∞–∂–º–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ" –∏ –≤–≤–µ–¥–∏—Ç–µ: `—Ç–∏–ø –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª—å –Ω–∞–≥—Ä–∞–¥–∞`.
 *    - –ü—Ä–∏–º–µ—Ä: `join_group –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ @example 1 10`.
 * 2. –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:
 *    - –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ bot.on('callback_query') –∏–ª–∏ bot.on('message')).
 *    - –ü—Ä–∏–º–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è `join_group`:
 *      ```javascript
 *      if (action === 'check_group_sub') {
 *        const groupSubscribed = await ctx.telegram.getChatMember('@example', ctx.from.id);
 *        if (['member', 'creator', 'administrator'].includes(groupSubscribed.status)) {
 *          const task = db.get('SELECT id, reward FROM tasks WHERE type = ?', 'join_group');
 *          if (task) {
 *            const userTask = db.get('SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ?', id, task.id);
 *            if (!userTask || !userTask.completed) {
 *              db.run('INSERT OR REPLACE INTO user_tasks (user_id, task_id, progress, completed) VALUES (?, ?, ?, ?)', id, task.id, 1, 1);
 *              db.run('UPDATE users SET stars = stars + ? WHERE id = ?', task.reward, id);
 *              await ctx.answerCbQuery(`üéâ –ó–∞–¥–∞–Ω–∏–µ "${task.description}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +${task.reward} –∑–≤—ë–∑–¥`, { show_alert: true });
 *            }
 *          }
 *        }
 *      }
 *      ```
 * 3. –û–±–Ω–æ–≤–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π:
 *    - –§—É–Ω–∫—Ü–∏—è `tasks` –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_query –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tasks.
 * 4. –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è:
 *    - –í —Ñ—É–Ω–∫—Ü–∏–∏ `tasks` –¥–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:
 *      ```javascript
 *      buttons.push([Markup.button.callback('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É', 'check_group_sub')]);
 *      ```
 * 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
 *    - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª–µ–Ω (–ø–æ–ª–µ type –≤ —Ç–∞–±–ª–∏—Ü–µ tasks).
 * 6. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:
 *    - –ß–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "üóë –£–¥–∞–ª–∏—Ç—å".
 */

if (!process.env.BOT_TOKEN) {
  console.error('–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!');
  process.exit(1);
}

bot.launch().then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')).catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err));