const { Telegraf, Markup, session } = require('telegraf');
const Database = require('better-sqlite3');
const db = new Database('users.db');
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());

const ADMIN_ID = 6587897295; // <-- –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô TELEGRAM ID
const REQUIRED_CHANNEL = '@magnumtap'; // <-- –ó–ê–ú–ï–ù–ò –ù–ê @username –¢–í–û–ï–ì–û –ö–ê–ù–ê–õ–ê

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
db.prepare(`
  CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    stars INTEGER DEFAULT 0,
    last_farm INTEGER DEFAULT 0,
    last_bonus INTEGER DEFAULT 0,
    ref_by INTEGER,
    total_refs INTEGER DEFAULT 0
  )
`).run();

db.prepare(`
  CREATE TABLE IF NOT EXISTS promocodes (
    code TEXT PRIMARY KEY,
    stars INTEGER
  )
`).run();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async function isUserSubscribed(ctx) {
  try {
    const res = await ctx.telegram.getChatMember(REQUIRED_CHANNEL, ctx.from.id);
    return ['member', 'creator', 'administrator'].includes(res.status);
  } catch {
    return false;
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function registerUser(ctx) {
  const id = ctx.from.id;
  const username = ctx.from.username || null;
  const ref_by = ctx.session.ref;

  const exists = db.prepare('SELECT 1 FROM users WHERE id = ?').get(id);
  if (!exists) {
    db.prepare('INSERT INTO users (id, username, ref_by) VALUES (?, ?, ?)').run(id, username, ref_by || null);

    // –£–≤–µ–ª–∏—á–∏–º —Å—á–µ—Ç—á–∏–∫ —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
    if (ref_by) {
      db.prepare('UPDATE users SET total_refs = total_refs + 1 WHERE id = ?').run(ref_by);
    }
  }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function sendMainMenu(ctx) {
  ctx.reply('üåå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.inlineKeyboard([
    [Markup.button.callback('‚≠ê –§–∞—Ä–º', 'farm')],
    [Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
    [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'), Markup.button.callback('üèÜ –¢–æ–ø', 'top')],
    [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')],
    [Markup.button.callback('üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', 'promo')]
  ]));
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
bot.start(async (ctx) => {
  const sub = await isUserSubscribed(ctx);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  const ref = ctx.startPayload;
  if (ref && !isNaN(ref)) {
    ctx.session.ref = parseInt(ref);
  }

  if (!sub) {
    return ctx.reply(`üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ${REQUIRED_CHANNEL} –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`, Markup.inlineKeyboard([
      [Markup.button.url('üì≤ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${REQUIRED_CHANNEL.replace('@', '')}`)],
      [Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_sub')]
    ]));
  }

  registerUser(ctx);
  sendMainMenu(ctx);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
bot.on('callback_query', async (ctx) => {
  const id = ctx.from.id;
  const action = ctx.callbackQuery.data;

  if (action === 'check_sub') {
    const subscribed = await isUserSubscribed(ctx);
    if (!subscribed) {
      return ctx.answerCbQuery('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', { show_alert: true });
    }
    registerUser(ctx);
    return sendMainMenu(ctx);
  }

  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  if (!user) {
    return ctx.answerCbQuery('üîí –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"', { show_alert: true });
  }

  const subscribed = await isUserSubscribed(ctx);
  if (!subscribed) {
    return ctx.answerCbQuery('üîí –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!', { show_alert: true });
  }

  // –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  try { await ctx.deleteMessage(); } catch {}

  if (action === 'farm') {
    const now = Date.now();
    if (now - user.last_farm < 60000) {
      return ctx.answerCbQuery('‚è≥ –§–∞—Ä–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ 60 —Å–µ–∫.', { show_alert: true });
    }

    const stars = Math.floor(Math.random() * 3) + 1;
    db.prepare('UPDATE users SET stars = stars + ?, last_farm = ? WHERE id = ?').run(stars, now, id);
    return ctx.answerCbQuery(`‚≠ê –í—ã –¥–æ–±—ã–ª–∏ ${stars} –∑–≤–µ–∑–¥—ã!`, { show_alert: true });
  }

  if (action === 'bonus') {
    const now = Date.now();
    if (now - user.last_bonus < 86400000) {
      return ctx.answerCbQuery('üéÅ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 24—á.', { show_alert: true });
    }

    const stars = 10;
    db.prepare('UPDATE users SET stars = stars + ?, last_bonus = ? WHERE id = ?').run(stars, now, id);
    return ctx.answerCbQuery(`üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${stars} –∑–≤—ë–∑–¥!`, { show_alert: true });
  }

  if (action === 'profile') {
    await ctx.reply(`üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\nüÜî ID: ${id}\n‚≠ê –ó–≤—ë–∑–¥—ã: ${user.stars}\nüë• –†–µ—Ñ–µ—Ä–∞–ª—ã: ${user.total_refs}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'top') {
    const top = db.prepare('SELECT username, stars FROM users ORDER BY stars DESC LIMIT 10').all();
    const list = top.map((u, i) => `${i + 1}. @${u.username || '–Ω–µ—Ç –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê`).join('\n');
    await ctx.reply(`üèÜ –¢–æ–ø 10:\n\n${list}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'stats') {
    const total = db.prepare('SELECT COUNT(*) as count FROM users').get().count;
    const stars = db.prepare('SELECT SUM(stars) as total FROM users').get().total || 0;
    await ctx.reply(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${total}\n‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${stars}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'promo') {
    ctx.session.waitingForPromo = true;
    return ctx.reply('üé´ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:');
  }

  if (action === 'back') {
    return sendMainMenu(ctx);
  }

  // --- –ê–¥–º–∏–Ω–∫–∞ ---
  if (ctx.from.id === ADMIN_ID) {
    if (action === 'admin') {
      return ctx.reply('üëÆ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', Markup.inlineKeyboard([
        [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
        [Markup.button.callback('üì§ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
        [Markup.button.callback('üèÜ –¢–æ–ø-10', 'admin_top')],
        [Markup.button.callback('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'admin_users')],
        [Markup.button.callback('üé´ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_add_promo')]
      ]));
    }

    if (action === 'admin_stats') {
      const total = db.prepare('SELECT COUNT(*) as count FROM users').get().count;
      const totalStars = db.prepare('SELECT SUM(stars) as stars FROM users').get().stars || 0;
      return ctx.answerCbQuery(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}\n‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars}`, { show_alert: true });
    }

    if (action === 'admin_top') {
      const top = db.prepare('SELECT username, stars FROM users ORDER BY stars DESC LIMIT 10').all();
      const list = top.map((u, i) => `${i + 1}. @${u.username || '–Ω–µ—Ç –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê`).join('\n');
      return ctx.reply(`üèÜ –¢–æ–ø 10:\n\n${list}`);
    }

    if (action === 'admin_users') {
      const total = db.prepare('SELECT COUNT(*) as count FROM users').get().count;
      return ctx.answerCbQuery(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}`, { show_alert: true });
    }

    if (action === 'admin_broadcast') {
      ctx.session.waitingForBroadcast = true;
      return ctx.reply('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:');
    }

    if (action === 'admin_add_promo') {
      ctx.session.waitingForPromoCreation = true;
      return ctx.reply('üé´ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∫–æ–ª-–≤–æ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ø—Ä–∏–º–µ—Ä: CODE123 50)');
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
  const id = ctx.from.id;

  if (ctx.session.waitingForPromo) {
    const input = ctx.message.text.trim();
    const promo = db.prepare('SELECT * FROM promocodes WHERE code = ?').get(input);

    if (!promo) {
      ctx.session.waitingForPromo = false;
      return ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }

    db.prepare('DELETE FROM promocodes WHERE code = ?').run(input);
    db.prepare('UPDATE users SET stars = stars + ? WHERE id = ?').run(promo.stars, id);

    ctx.session.waitingForPromo = false;
    return ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${promo.stars}‚≠ê`);
  }

  if (ctx.session.waitingForBroadcast && ctx.from.id === ADMIN_ID) {
    const text = ctx.message.text;
    const users = db.prepare('SELECT id FROM users').all();
    let sent = 0;

    for (const user of users) {
      try {
        await bot.telegram.sendMessage(user.id, text);
        sent++;
      } catch {}
    }

    ctx.session.waitingForBroadcast = false;
    return ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}/${users.length}`);
  }

  if (ctx.session.waitingForPromoCreation && ctx.from.id === ADMIN_ID) {
    const parts = ctx.message.text.trim().split(' ');
    const code = parts[0];
    const stars = parseInt(parts[1]);

    if (!code || isNaN(stars)) {
      ctx.session.waitingForPromoCreation = false;
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: CODE123 50');
    }

    db.prepare('INSERT OR REPLACE INTO promocodes (code, stars) VALUES (?, ?)').run(code, stars);
    ctx.session.waitingForPromoCreation = false;
    return ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ "${code}" –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ ${stars}‚≠ê`);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
bot.command('admin', (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  ctx.reply('üîê –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...', Markup.inlineKeyboard([
    [Markup.button.callback('–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å', 'admin')]
  ]));
});

bot.launch();
console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');