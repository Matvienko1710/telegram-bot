const { Telegraf, Markup } = require('telegraf');
const dayjs = require('dayjs');
require('dotenv').config();

const db = require('./db');

const bot = new Telegraf(process.env.BOT_TOKEN);

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function sendMainMenu(ctx) {
  return ctx.reply('üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.inlineKeyboard([
    [Markup.button.callback('‚≠ê –§–∞—Ä–º', 'farm'), Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
    [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'), Markup.button.callback('üèÜ –õ–∏–¥–µ—Ä—ã', 'leaders')],
    [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')],
    [Markup.button.callback('üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'ref')]
  ]));
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function registerUser(ctx) {
  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;

  const existing = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  if (!existing) {
    db.prepare('INSERT INTO users (id, username, referred_by) VALUES (?, ?, ?)').run(id, username, referral);

    if (referral && referral !== id) {
      db.prepare('UPDATE users SET stars = stars + 10 WHERE id = ?').run(referral);
      ctx.telegram.sendMessage(referral, `üéâ –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª @${username || '–±–µ–∑ –Ω–∏–∫–∞'} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! +10 –∑–≤—ë–∑–¥`);
    }
  }
}

// /start
bot.start(async (ctx) => {
  registerUser(ctx);
  await sendMainMenu(ctx);
});

// Callback –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (ctx) => {
  const id = ctx.from.id;
  const now = Date.now();
  const action = ctx.callbackQuery.data;

  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  if (!user) return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

  if (action === 'farm') {
    const cooldown = 60 * 1000;
    if (now - user.last_farm < cooldown) {
      const seconds = Math.ceil((cooldown - (now - user.last_farm)) / 1000);
      return ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${seconds} —Å–µ–∫.`, { show_alert: true });
    }

    db.prepare('UPDATE users SET stars = stars + 1, last_farm = ? WHERE id = ?').run(now, id);
    return ctx.answerCbQuery('‚≠ê –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 1 –∑–≤–µ–∑–¥—É!', { show_alert: true });
  }

  if (action === 'bonus') {
    const nowDay = dayjs();
    const last = user.last_bonus ? dayjs(user.last_bonus) : null;

    if (last && nowDay.diff(last, 'hour') < 24) {
      const hoursLeft = 24 - nowDay.diff(last, 'hour');
      return ctx.answerCbQuery(`üéÅ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ ${hoursLeft} —á.`, { show_alert: true });
    }

    db.prepare('UPDATE users SET stars = stars + 5, last_bonus = ? WHERE id = ?').run(nowDay.toISOString(), id);
    return ctx.answerCbQuery('üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +5 –∑–≤—ë–∑–¥!', { show_alert: true });
  }

  if (action === 'profile') {
    const invited = db.prepare('SELECT COUNT(*) as count FROM users WHERE referred_by = ?').get(id).count;
    return ctx.editMessageText(`üë§ –ü—Ä–æ—Ñ–∏–ª—å:
üÜî ID: ${user.id}
üí´ –ó–≤—ë–∑–¥—ã: ${user.stars}
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${invited}
üì£ –†–µ—Ñ: ${user.referred_by || '‚Äî'}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'leaders') {
    const top = db.prepare('SELECT username, stars FROM users ORDER BY stars DESC LIMIT 10').all();
    const list = top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê`).join('\n');
    return ctx.editMessageText(`üèÜ –¢–æ–ø 10:\n\n${list}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'stats') {
    const total = db.prepare('SELECT COUNT(*) as count FROM users').get().count;
    const totalStars = db.prepare('SELECT SUM(stars) as stars FROM users').get().stars || 0;
    return ctx.editMessageText(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}
‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'ref') {
    const link = `https://t.me/${ctx.me}?start=${ctx.from.id}`;
    return ctx.editMessageText(`üì© –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n${link}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'back') {
    return ctx.editMessageText('üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.inlineKeyboard([
      [Markup.button.callback('‚≠ê –§–∞—Ä–º', 'farm'), Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
      [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'), Markup.button.callback('üèÜ –õ–∏–¥–µ—Ä—ã', 'leaders')],
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')],
      [Markup.button.callback('üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'ref')]
    ]));
  }
});

bot.launch().then(() => {
  console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏!');
});