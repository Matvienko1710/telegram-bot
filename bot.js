const { Telegraf, Markup } = require('telegraf');
const dayjs = require('dayjs');
require('dotenv').config();

const db = require('./db');
const bot = new Telegraf(process.env.BOT_TOKEN);

const REQUIRED_CHANNEL = '@magnumtap';
const ADMIN_ID = 6587897295; // üîÅ –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

async function isUserSubscribed(ctx) {
  try {
    const status = await ctx.telegram.getChatMember(REQUIRED_CHANNEL, ctx.from.id);
    return ['member', 'creator', 'administrator'].includes(status.status);
  } catch {
    return false;
  }
}

function sendMainMenu(ctx) {
  return ctx.reply('üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.inlineKeyboard([
    [Markup.button.callback('‚≠ê –§–∞—Ä–º', 'farm'), Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
    [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'), Markup.button.callback('üèÜ –õ–∏–¥–µ—Ä—ã', 'leaders')],
    [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')],
    [Markup.button.callback('üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'ref')],
    ctx.from.id === ADMIN_ID ? [Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin')] : []
  ]));
}

bot.start(async (ctx) => {
  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;

  const subscribed = await isUserSubscribed(ctx);
  if (!subscribed) {
    return ctx.reply(`üîí –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: ${REQUIRED_CHANNEL}`, Markup.inlineKeyboard([
      [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${REQUIRED_CHANNEL.replace('@', '')}`)],
      [Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_sub')]
    ]));
  }

  const existing = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  if (!existing) {
    db.prepare('INSERT INTO users (id, username, referred_by) VALUES (?, ?, ?)').run(id, username, referral);
    if (referral && referral !== id) {
      db.prepare('UPDATE users SET stars = stars + 10 WHERE id = ?').run(referral);
      ctx.telegram.sendMessage(referral, `üéâ –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª @${username || '–±–µ–∑ –Ω–∏–∫–∞'} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! +10 –∑–≤—ë–∑–¥`);
    }
  }

  await ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç, *${ctx.from.first_name || '–¥—Ä—É–≥'}*!\n\n` +
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *MagnumTap* ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ —Ç—ã —Ñ–∞—Ä–º–∏—à—å –∑–≤—ë–∑–¥—ã, –ø–æ–ª—É—á–∞–µ—à—å –±–æ–Ω—É—Å—ã –∏ —Å–æ—Ä–µ–≤–Ω—É–µ—à—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏! üåü\n\n` +
    `üéØ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –Ω–∞–≥—Ä–∞–¥—ã –∏ –ø–æ–¥–Ω–∏–º–∞–π—Å—è –≤ —Ç–æ–ø!\n\n` +
    `–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –∏ —É–¥–∞—á–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞! üí´`,
    { parse_mode: 'Markdown' }
  );

  await sendMainMenu(ctx);
});

bot.on('callback_query', async (ctx) => {
  const id = ctx.from.id;
  const now = Date.now();
  const action = ctx.callbackQuery.data;
  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);

  if (!user && action !== 'check_sub') return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

  if (action === 'check_sub') {
    const subscribed = await isUserSubscribed(ctx);
    if (!subscribed) {
      return ctx.answerCbQuery('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', { show_alert: true });
    }
    registerUser(ctx);
    return sendMainMenu(ctx);
  }

  if (action === 'farm') {
    const cooldown = 60 * 1000;
    if (now - user.last_farm < cooldown) {
      const seconds = Math.ceil((cooldown - (now - user.last_farm)) / 1000);
      return ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${seconds} —Å–µ–∫.`, { show_alert: true });
    }

    db.prepare('UPDATE users SET stars = stars + 1, last_farm = ? WHERE id = ?').run(now, id);
    return ctx.answerCbQuery('‚≠ê –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 1 –∑–≤–µ–∑–¥—É!', { show_alert: true });
  }

  if (action === 'bonus') {
    const nowDay = dayjs();
    const last = user.last_bonus ? dayjs(user.last_bonus) : null;

    if (last && nowDay.diff(last, 'hour') < 24) {
      const hoursLeft = 24 - nowDay.diff(last, 'hour');
      return ctx.answerCbQuery(`üéÅ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ ${hoursLeft} —á.`, { show_alert: true });
    }

    db.prepare('UPDATE users SET stars = stars + 5, last_bonus = ? WHERE id = ?').run(nowDay.toISOString(), id);
    return ctx.answerCbQuery('üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +5 –∑–≤—ë–∑–¥!', { show_alert: true });
  }

  if (['profile', 'leaders', 'stats', 'ref'].includes(action)) {
    await ctx.deleteMessage(); // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
  }

  if (action === 'profile') {
    const invited = db.prepare('SELECT COUNT(*) as count FROM users WHERE referred_by = ?').get(id).count;
    return ctx.reply(`üë§ –ü—Ä–æ—Ñ–∏–ª—å:
üÜî ID: ${user.id}
üí´ –ó–≤—ë–∑–¥—ã: ${user.stars}
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${invited}
üì£ –†–µ—Ñ: ${user.referred_by || '‚Äî'}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'leaders') {
    const top = db.prepare('SELECT username, stars FROM users ORDER BY stars DESC LIMIT 10').all();
    const list = top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê`).join('\n');
    return ctx.reply(`üèÜ –¢–æ–ø 10:\n\n${list}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'stats') {
    const total = db.prepare('SELECT COUNT(*) as count FROM users').get().count;
    const totalStars = db.prepare('SELECT SUM(stars) as stars FROM users').get().stars || 0;
    return ctx.reply(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}
‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'ref') {
    const link = `https://t.me/${ctx.me}?start=${ctx.from.id}`;
    return ctx.reply(`üì© –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n${link}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'admin') {
    if (id !== ADMIN_ID) return ctx.answerCbQuery('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
    return ctx.editMessageText(`‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å`, Markup.inlineKeyboard([
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
      [Markup.button.callback('üèÜ –¢–æ–ø', 'admin_top')],
      [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'admin_stats') {
    const total = db.prepare('SELECT COUNT(*) as count FROM users').get().count;
    const totalStars = db.prepare('SELECT SUM(stars) as stars FROM users').get().stars || 0;
    return ctx.answerCbQuery(`üë• –Æ–∑–µ—Ä–æ–≤: ${total}, ‚≠ê –ó–≤—ë–∑–¥: ${totalStars}`, { show_alert: true });
  }

  if (action === 'admin_top') {
    const top = db.prepare('SELECT username, stars FROM users ORDER BY stars DESC LIMIT 10').all();
    const list = top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê`).join('\n');
    return ctx.reply(`üèÜ –¢–æ–ø 10:\n\n${list}`);
  }

  if (action === 'admin_broadcast') {
    ctx.session = ctx.session || {};
    ctx.session.broadcast = true;
    return ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:');
  }

  if (action === 'back') {
    await ctx.deleteMessage();
    return sendMainMenu(ctx);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
bot.on('message', async (ctx) => {
  if (ctx.session?.broadcast && ctx.from.id === ADMIN_ID) {
    const users = db.prepare('SELECT id FROM users').all();
    for (const u of users) {
      try {
        await bot.telegram.sendMessage(u.id, ctx.message.text);
      } catch (e) {}
    }
    ctx.session.broadcast = false;
    return ctx.reply('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
  }
});

function registerUser(ctx) {
  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;

  const existing = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  if (!existing) {
    db.prepare('INSERT INTO users (id, username, referred_by) VALUES (?, ?, ?)').run(id, username, referral);

    if (referral && referral !== id) {
      db.prepare('UPDATE users SET stars = stars + 10 WHERE id = ?').run(referral);
      ctx.telegram.sendMessage(referral, `üéâ –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª @${username || '–±–µ–∑ –Ω–∏–∫–∞'} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! +10 –∑–≤—ë–∑–¥`);
    }
  }
}

bot.launch().then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!'));