const { Telegraf, Markup, session } = require('telegraf');
const dayjs = require('dayjs');
require('dotenv').config();

const db = require('./db');
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());

const REQUIRED_CHANNELS = ['@magnumtap', '@magnumwithdraw'];
const ADMIN_IDS = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(Number) : [6587897295]; // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–¥–º–∏–Ω–æ–≤
const SUPPORT_USERNAME = '@magnumsupports';
const BOT_LINK = 'https://t.me/firestars_rbot?start=6587897295';
const WITHDRAW_CHANNEL = '@magnumwithdraw';
const FARM_COOLDOWN_SECONDS = parseInt(process.env.FARM_COOLDOWN_SECONDS || '60'); // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∫—É–ª–¥–∞—É–Ω

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
async function sendWithdrawRequest(ctx, userId, username, amount) {
  try {
    const insert = db.prepare('INSERT INTO withdraws (user_id, username, amount, status) VALUES (?, ?, ?, ?)');
    const result = insert.run(userId, username, amount, 'pending');
    const withdrawId = result.lastInsertRowid;

    await ctx.telegram.sendMessage(WITHDRAW_CHANNEL, `üí∏ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username || '–±–µ–∑ –Ω–∏–∫–∞'} (ID: ${userId})
üí´ –°—É–º–º–∞: ${amount}‚≠ê

üîÑ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚öôÔ∏è`, {
      reply_markup: {
        inline_keyboard: [[
          { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_withdraw_${withdrawId}` },
          { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_withdraw_${withdrawId}` }
        ]]
      }
    });
    console.log(`–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞: ID=${withdrawId}, user=${userId}, amount=${amount}`);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:', e);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
async function isUserSubscribed(ctx) {
  const memberStatuses = await Promise.all(
    REQUIRED_CHANNELS.map(async (channel) => {
      try {
        const member = await ctx.telegram.getChatMember(channel, ctx.from.id);
        return ['member', 'administrator', 'creator'].includes(member.status);
      } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${channel}:`, e);
        return false;
      }
    })
  );
  return memberStatuses.every((status) => status);
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function sendMainMenu(ctx) {
  return ctx.reply('üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.inlineKeyboard([
    [Markup.button.callback('‚≠ê –§–∞—Ä–º', 'farm'), Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
    [
      Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'),
      Markup.button.callback('üèÜ –õ–∏–¥–µ—Ä—ã', 'leaders'),
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')
    ],
    [Markup.button.callback('üìà –ë–∏—Ä–∂–∞', 'exchange')],
    [Markup.button.callback('üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'ref')],
    [Markup.button.callback('üí° –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', 'enter_code')],
    [Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è', 'daily_tasks')],
    ADMIN_IDS.includes(ctx.from.id) ? [Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin')] : []
  ]));
}

bot.start(async (ctx) => {
  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;

  const subscribed = await isUserSubscribed(ctx);
  if (!subscribed) {
    return ctx.reply(
      'üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:',
      Markup.inlineKeyboard([
        ...REQUIRED_CHANNELS.map(channel => [
          Markup.button.url(`üì¢ ${channel}`, `https://t.me/${channel.replace('@', '')}`)
        ]),
        [Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_sub')]
      ])
    );
  }

  const existing = db.prepare('SELECT id, username FROM users WHERE id = ?').get(id);
  if (!existing) {
    db.prepare('INSERT INTO users (id, username, referred_by) VALUES (?, ?, ?)').run(id, username, referral);
    if (referral && referral !== id) {
      db.prepare('UPDATE users SET stars = stars + 10 WHERE id = ?').run(referral);
      try {
        await ctx.telegram.sendMessage(
          referral,
          `üéâ –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª @${username || '–±–µ–∑ –Ω–∏–∫–∞'} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! +10 –∑–≤—ë–∑–¥`
        );
      } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—É ${referral}:`, e);
      }
      console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ID=${id}, username=${username}`);
    }
  }

  await ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç, <b>${ctx.from.first_name || '–¥—Ä—É–≥'}!</b>\n\n` +
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>MagnumTap</b> ‚Äî —Ç–≤–æ—ë –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Å–±–æ—Ä—É –∑–≤—ë–∑–¥ –∏ –ø–æ–ª—É—á–µ–Ω–∏—é –±–æ–Ω—É—Å–æ–≤!\n\n` +
    `‚ú® –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n` +
    `‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ ¬´–§–∞—Ä–º¬ª\n` +
    `‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã\n` +
    `‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º, –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–±–µ–∂–¥–∞—Ç—å –≤ —Ç–æ–ø–∞—Ö!\n\n` +
    `üöÄ –ñ–µ–ª–∞–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞!`,
    { parse_mode: 'HTML' }
  );

  await sendMainMenu(ctx);
});

bot.on('callback_query', async (ctx) => {
  const id = ctx.from.id;
  const now = Date.now();
  const action = ctx.callbackQuery.data;
  let user = db.prepare('SELECT id, username, stars, last_farm, last_bonus, referred_by FROM users WHERE id = ?').get(id);

  if (!user && action !== 'check_sub') return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

  if (action === 'check_sub') {
    const subscribed = await isUserSubscribed(ctx);
    if (!subscribed) {
      return ctx.answerCbQuery('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', { show_alert: true });
    }
    const username = ctx.from.username || '';
    const existing = db.prepare('SELECT id FROM users WHERE id = ?').get(id);
    if (!existing) {
      db.prepare('INSERT INTO users (id, username) VALUES (?, ?)').run(id, username);
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ID=${id}`);
    }
    await sendMainMenu(ctx);
    return ctx.answerCbQuery('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
  if (action.startsWith('approve_withdraw_') || action.startsWith('reject_withdraw_')) {
    if (!ADMIN_IDS.includes(ctx.from.id)) {
      return ctx.answerCbQuery('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
    }

    const withdrawId = parseInt(action.split('_')[2]);
    if (isNaN(withdrawId)) {
      return ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏');
    }

    const withdraw = db.prepare('SELECT id, user_id, username, amount FROM withdraws WHERE id = ?').get(withdrawId);
    if (!withdraw) {
      return ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const isApprove = action.startsWith('approve_withdraw_');
    const newStatus = isApprove ? 'approved' : 'rejected';

    db.prepare('UPDATE withdraws SET status = ? WHERE id = ?').run(newStatus, withdrawId);

    const chatId = ctx.callbackQuery.message.chat.id;
    const messageId = ctx.callbackQuery.message.message_id;

    try {
      await ctx.telegram.editMessageText(
        chatId,
        messageId,
        null,
        `‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ${withdrawId}\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${withdraw.username || '–ë–µ–∑ –Ω–∏–∫–∞'} | ID ${withdraw.user_id}\n` +
        `üí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${withdraw.amount}‚≠êÔ∏è [üß∏]\n\n` +
        `üîÑ –°—Ç–∞—Ç—É—Å: ${newStatus}`,
        { reply_markup: { inline_keyboard: [] } }
      );

      const notifyText = isApprove
        ? `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${withdraw.amount} ‚≠ê –æ–¥–æ–±—Ä–µ–Ω–∞!`
        : `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${withdraw.amount} ‚≠ê –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`;

      if (!isApprove) {
        db.prepare('UPDATE users SET stars = stars + ? WHERE id = ?').run(withdraw.amount, withdraw.user_id);
      }

      await ctx.telegram.sendMessage(withdraw.user_id, notifyText);
      await ctx.answerCbQuery('–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ.');
      console.log(`–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: ID=${withdrawId}, status=${newStatus}`);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', e);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏', { show_alert: true });
    }
  }

  if (action === 'farm') {
    const cooldown = FARM_COOLDOWN_SECONDS * 1000;
    if (now - user.last_farm < cooldown) {
      const seconds = Math.ceil((cooldown - (now - user.last_farm)) / 1000);
      return ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${seconds} —Å–µ–∫.`, { show_alert: true });
    }

    const reward = 0.1;
    db.prepare('UPDATE users SET stars = stars + ?, last_farm = ? WHERE id = ?').run(reward, now, id);
    console.log(`–§–∞—Ä–º: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} –ø–æ–ª—É—á–∏–ª ${reward} –∑–≤—ë–∑–¥`);
    return ctx.answerCbQuery(`‚≠ê –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${reward} –∑–≤–µ–∑–¥—ã!`, { show_alert: true });
  }

  if (action === 'bonus') {
    const nowDay = dayjs();
    const last = user.last_bonus ? dayjs(user.last_bonus) : null;

    if (last && nowDay.diff(last, 'hour') < 24) {
      const hoursLeft = 24 - nowDay.diff(last, 'hour');
      return ctx.answerCbQuery(`üéÅ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ ${hoursLeft} —á.`, { show_alert: true });
    }

    db.prepare('UPDATE users SET stars = stars + 5, last_bonus = ? WHERE id = ?').run(nowDay.toISOString(), id);
    console.log(`–ë–æ–Ω—É—Å –≤—ã–¥–∞–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id}, +5 –∑–≤—ë–∑–¥`);
    return ctx.answerCbQuery('üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +5 –∑–≤—ë–∑–¥!', { show_alert: true });
  }

  if (action === 'daily_tasks') {
    const text =
      `üìã <b>–ó–∞–¥–∞–Ω–∏–µ 1 –∏–∑ 2: –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç</b> üìã\n\n` +
      `üîπ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ${REQUIRED_CHANNELS[0]}\n` +
      `üîπ –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏\n` +
      `üîπ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—é–¥–∞ –≤ —á–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n` +
      `–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É.`;

    return ctx.editMessageText(text, {
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([
        [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${REQUIRED_CHANNELS[0].replace('@', '')}`)],
        [Markup.button.callback('‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', 'daily_tasks_2')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
      ])
    });
  }

  if (action === 'daily_tasks_2') {
    const text =
      `üìã <b>–ó–∞–¥–∞–Ω–∏–µ 2 –∏–∑ 2: –ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞</b> üìã\n\n` +
      `üöÄ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n` +
      `${BOT_LINK}\n\n` +
      `–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!`;

    return ctx.editMessageText(text, {
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([
        [Markup.button.url('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞', BOT_LINK)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')],
        [Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', 'daily_tasks')]
      ])
    });
  }

  if (action === 'exchange') {
    return ctx.editMessageText(
      `üìà <b>–ë–∏—Ä–∂–∞ MagnumCoin</b>\n\n` +
      `üí± –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å MagnumCoin –∑–∞ –∑–≤—ë–∑–¥—ã.\n` +
      `üìä –¶–µ–Ω–∞ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–±—ã–ª—å (–∏–ª–∏ —É–±—ã—Ç–æ–∫!).\n\n` +
      `üöß –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!`,
      { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]]) }
    );
  }

  if (['profile', 'leaders', 'stats', 'ref'].includes(action)) {
    await ctx.deleteMessage();
  }

  if (action === 'profile') {
    const invited = db.prepare('SELECT COUNT(*) as count FROM users WHERE referred_by = ?').get(id).count;
    const referredByUser = user.referred_by ? db.prepare('SELECT username FROM users WHERE id = ?').get(user.referred_by) : null;
    const referrerName = referredByUser ? `@${referredByUser.username || '–±–µ–∑ –Ω–∏–∫–∞'}` : '‚Äî';
    const displayName = ctx.from.first_name || '‚Äî';

    const profileText =
      `üåü –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ MagnumTap üåü\n\n` +
      `üë§ –ò–º—è: ${displayName}\n` +
      `üÜî Telegram ID: ${user.id}\n\n` +
      `üí´ –í–∞—à–∏ –∑–≤—ë–∑–¥—ã: ${user.stars}\n` +
      `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${invited}\n` +
      `üì£ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: ${referrerName}\n\n` +
      `üî• –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤—ë–∑–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –∏ —É—á–∞—Å—Ç–∏—è –≤ –∞–∫—Ü–∏—è—Ö!`;

    return ctx.reply(profileText, Markup.inlineKeyboard([
      [Markup.button.callback('–í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã', 'withdraw_stars')],
      [Markup.button.url('üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', `https://t.me/${SUPPORT_USERNAME.replace('@', '')}`)],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'withdraw_stars') {
    if (!user) {
      return ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });
    }
    return ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:', Markup.inlineKeyboard([
      [Markup.button.callback('15 ‚≠ê', 'withdraw_15')],
      [Markup.button.callback('25 ‚≠ê', 'withdraw_25')],
      [Markup.button.callback('50 ‚≠ê', 'withdraw_50')],
      [Markup.button.callback('100 ‚≠ê', 'withdraw_100')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action.startsWith('withdraw_') && action !== 'withdraw_stars') {
    const amount = parseInt(action.split('_')[1]);
    if (isNaN(amount)) {
      return ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞', { show_alert: true });
    }

    if (!user || user.stars < amount) {
      return ctx.answerCbQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞.', { show_alert: true });
    }

    db.prepare('UPDATE users SET stars = stars - ? WHERE id = ?').run(amount, ctx.from.id);

    try {
      await sendWithdrawRequest(ctx, ctx.from.id, ctx.from.username, amount);
      return ctx.editMessageText(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${amount} ‚≠ê –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.`, Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
      ]));
    } catch (e) {
      db.prepare('UPDATE users SET stars = stars + ? WHERE id = ?').run(amount, ctx.from.id); // –í–æ–∑–≤—Ä–∞—Ç –∑–≤—ë–∑–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      return ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏', { show_alert: true });
    }
  }

  if (action === 'leaders') {
    const top = db.prepare(`
      SELECT username, stars, (SELECT COUNT(*) FROM users WHERE referred_by = u.id) AS referrals 
      FROM users u 
      ORDER BY stars DESC 
      LIMIT 10
    `).all();

    const list = top.map((u, i) => 
      `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê ‚Äî –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${u.referrals}`
    ).join('\n');

    return ctx.reply(`üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n\n${list}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'stats') {
    const total = db.prepare('SELECT COUNT(*) as count FROM users').get().count;
    const totalStars = db.prepare('SELECT SUM(stars) as stars FROM users').get().stars || 0;
    return ctx.reply(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}\n‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'ref') {
    const link = BOT_LINK.replace('?start=', `?start=${ctx.from.id}`);
    const refText = `üì© –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –∑–≤—ë–∑–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ!\n\n` +
                    `–ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.\n\n` +
                    `–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n${link}`;
    return ctx.reply(refText, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'enter_code') {
    ctx.session = ctx.session || {};
    ctx.session.waitingForCode = true;
    return ctx.reply('üí¨ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:');
  }

  if (action === 'admin') {
    if (!ADMIN_IDS.includes(id)) return ctx.answerCbQuery('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
    return ctx.editMessageText(`‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å`, Markup.inlineKeyboard([
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
      [Markup.button.callback('üèÜ –¢–æ–ø', 'admin_top')],
      [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
      [Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤', 'admin_check_screens')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'admin_stats') {
    const total = db.prepare('SELECT COUNT(*) as count FROM users').get().count;
    const totalStars = db.prepare('SELECT SUM(stars) as stars FROM users').get().stars || 0;
    return ctx.answerCbQuery(`üë• –Æ–∑–µ—Ä–æ–≤: ${total}, ‚≠ê –ó–≤—ë–∑–¥: ${totalStars}`, { show_alert: true });
  }

  if (action === 'admin_top') {
    const top = db.prepare('SELECT username, stars FROM users ORDER BY stars DESC LIMIT 10').all();
    const list = top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê`).join('\n');
    return ctx.reply(`üèÜ –¢–æ–ø 10:\n\n${list}`);
  }

  if (action === 'admin_broadcast') {
    ctx.session = ctx.session || {};
    ctx.session.broadcast = true;
    return ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:');
  }

  if (action === 'admin_addcode') {
    ctx.session = ctx.session || {};
    ctx.session.waitingForPromo = true;
    return ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ù–∞–ø—Ä–∏–º–µ—Ä: `CODE123 10 5`', { parse_mode: 'Markdown' });
  }

  if (action === 'admin_check_screens') {
    const pending = db.prepare('SELECT id, user_id, file_id FROM screenshots WHERE approved IS NULL').all();

    if (pending.length === 0) {
      return ctx.answerCbQuery('–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.', { show_alert: true });
    }

    const scr = pending[0];
    const userWhoSent = db.prepare('SELECT username FROM users WHERE id = ?').get(scr.user_id);

    await ctx.editMessageMedia({
      type: 'photo',
      media: scr.file_id,
      caption: `üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç @${userWhoSent?.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} (ID: ${scr.user_id})\n\n` +
               `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å.`,
    }, Markup.inlineKeyboard([
      [
        Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_screen_${scr.id}`),
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_screen_${scr.id}`)
      ],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin')]
    ]));
  }

  if (action.startsWith('approve_screen_') || action.startsWith('reject_screen_')) {
    if (!ADMIN_IDS.includes(id)) return ctx.answerCbQuery('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');

    const screenId = parseInt(action.split('_')[2]);
    if (isNaN(screenId)) return ctx.answerCbQuery('–û—à–∏–±–∫–∞');

    const screen = db.prepare('SELECT id, user_id, file_id FROM screenshots WHERE id = ?').get(screenId);
    if (!screen || screen.approved !== null) {
      return ctx.answerCbQuery('–°–∫—Ä–∏–Ω—à–æ—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
    }

    if (action.startsWith('approve_screen_')) {
      db.prepare('UPDATE users SET stars = stars + 1.5 WHERE id = ?').run(screen.user_id);
      db.prepare('UPDATE screenshots SET approved = 1 WHERE id = ?').run(screenId);

      try {
        await ctx.telegram.sendMessage(screen.user_id, '‚úÖ –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω! +1.5 –∑–≤—ë–∑–¥ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è üéâ');
      } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${screen.user_id}:`, e);
      }

      await ctx.editMessageCaption(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–¥–æ–±—Ä–µ–Ω. –ù–∞–≥—Ä–∞–¥–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.`);
      console.log(`–°–∫—Ä–∏–Ω—à–æ—Ç –æ–¥–æ–±—Ä–µ–Ω: ID=${screenId}, user=${screen.user_id}`);
    } else {
      db.prepare('UPDATE screenshots SET approved = 0 WHERE id = ?').run(screenId);

      try {
        await ctx.telegram.sendMessage(screen.user_id, '‚ùå –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç.');
      } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${screen.user_id}:`, e);
      }

      await ctx.editMessageCaption(`‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω.`);
      console.log(`–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω: ID=${screenId}, user=${screen.user_id}`);
    }

    return ctx.reply('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', Markup.inlineKeyboard([
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
      [Markup.button.callback('üèÜ –¢–æ–ø', 'admin_top')],
      [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
      [Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤', 'admin_check_screens')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'back') {
    await ctx.deleteMessage();
    return sendMainMenu(ctx);
  }
});

bot.on('photo', async (ctx) => {
  const id = ctx.from.id;
  const user = db.prepare('SELECT id FROM users WHERE id = ?').get(id);
  if (!user) return;

  const subscribed = await isUserSubscribed(ctx);
  if (!subscribed) {
    return ctx.reply('‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }

  const photoArray = ctx.message.photo;
  const fileId = photoArray[photoArray.length - 1].file_id;

  db.prepare('INSERT INTO screenshots (user_id, file_id, approved) VALUES (?, ?, NULL)').run(id, fileId);

  await ctx.reply('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.');
  console.log(`–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id}`);

  try {
    await ctx.deleteMessage();
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ:', e);
  }
});

bot.on('message', async (ctx) => {
  const id = ctx.from.id;

  if (ctx.session?.broadcast && ADMIN_IDS.includes(id)) {
    const users = db.prepare('SELECT id FROM users').all();
    for (const u of users) {
      try {
        await bot.telegram.sendMessage(u.id, ctx.message.text);
      } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${u.id}:`, e);
      }
    }
    ctx.session.broadcast = false;
    console.log(`–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º ${id}`);
    return ctx.reply('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
  }

  if (ctx.session?.waitingForCode) {
    const code = ctx.message.text.trim();
    const promo = db.prepare('SELECT * FROM promo_codes WHERE code = ?').get(code);

    if (!promo) {
      ctx.session.waitingForCode = false;
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!');
    }

    if (promo.activations_left === 0) {
      ctx.session.waitingForCode = false;
      return ctx.reply('‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (–ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω).');
    }

    let usedBy = promo.used_by ? JSON.parse(promo.used_by) : [];

    if (usedBy.includes(id)) {
      ctx.session.waitingForCode = false;
      return ctx.reply('‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.');
    }

    db.prepare('UPDATE users SET stars = stars + ? WHERE id = ?').run(promo.reward, id);

    usedBy.push(id);
    const newActivationsLeft = promo.activations_left - 1;

    db.prepare('UPDATE promo_codes SET activations_left = ?, used_by = ? WHERE code = ?')
      .run(newActivationsLeft, JSON.stringify(usedBy), code);

    ctx.session.waitingForCode = false;
    console.log(`–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: –∫–æ–¥=${code}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=${id}, –Ω–∞–≥—Ä–∞–¥–∞=${promo.reward}`);
    return ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! +${promo.reward} –∑–≤—ë–∑–¥`);
  }

  if (ctx.session?.waitingForPromo && ADMIN_IDS.includes(id)) {
    const parts = ctx.message.text.trim().split(' ');
    if (parts.length !== 3) return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');

    const [code, rewardStr, activationsStr] = parts;
    const reward = parseInt(rewardStr);
    const activations = parseInt(activationsStr);

    if (!code || isNaN(reward) || isNaN(activations)) return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');

    const exists = db.prepare('SELECT code FROM promo_codes WHERE code = ?').get(code);
    if (exists) return ctx.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');

    db.prepare('INSERT INTO promo_codes (code, reward, activations_left, used_by) VALUES (?, ?, ?, ?)')
      .run(code, reward, activations, JSON.stringify([]));

    ctx.session.waitingForPromo = false;
    console.log(`–ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: –∫–æ–¥=${code}, –Ω–∞–≥—Ä–∞–¥–∞=${reward}, –∞–∫—Ç–∏–≤–∞—Ü–∏–π=${activations}`);
    return ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ ${code} –¥–æ–±–∞–≤–ª–µ–Ω:\n–ù–∞–≥—Ä–∞–¥–∞: ${reward} –∑–≤—ë–∑–¥\n–û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${activations}`);
  }
});

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');