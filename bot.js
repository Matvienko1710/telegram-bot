if (!process.env.BOT_TOKEN) {
  console.error('–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!');
  process.exit(1);
}

const { Telegraf, Markup, session } = require('telegraf');
const dayjs = require('dayjs');
require('dotenv').config();

const db = require('./db');
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());

// –°—Å—ã–ª–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
const REQUIRED_CHANNEL = process.env.REQUIRED_CHANNEL || '@magnumtap';
const TASK_CHANNEL = process.env.TASK_CHANNEL || '@musice46';
const TASK_CHANNEL_KITTY = process.env.TASK_CHANNEL_KITTY || '@kittyyyyywwr'; // –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª
const TASK_BOT_LINK = process.env.TASK_BOT_LINK || 'https://t.me/firestars_rbot?start=6587897295';
const ADMIN_IDS = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id)) : [6587897295];
const SUPPORT_CHANNEL = process.env.SUPPORT_CHANNEL || '@magnumsupported';
const FARM_COOLDOWN_SECONDS = parseInt(process.env.FARM_COOLDOWN_SECONDS) || 60;
const MESSAGE_TTL = 15_000;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function deleteNotification(ctx, messageId) {
  if (messageId && Number.isInteger(messageId)) {
    setTimeout(async () => {
      try {
        await ctx.telegram.deleteMessage(ctx.chat.id, messageId);
      } catch (err) {
        if (err.response?.error_code !== 400) {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err);
        }
      }
    }, MESSAGE_TTL);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
async function isUserSubscribed(ctx) {
  try {
    const status = await ctx.telegram.getChatMember(REQUIRED_CHANNEL, ctx.from.id);
    return ['member', 'creator', 'administrator'].includes(status.status);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', err);
    return false;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function getTopUsers(limit = 10) {
  return db.all(`
    SELECT 
      u.username, 
      u.stars, 
      (SELECT COUNT(*) FROM users WHERE referred_by = u.id) AS referrals 
    FROM users u 
    ORDER BY u.stars DESC 
    LIMIT ?
  `, [limit]);
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function sendMainMenu(ctx) {
  return ctx.reply('üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.inlineKeyboard([
    [Markup.button.callback('‚≠ê –§–∞—Ä–º', 'farm'), Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
    [
      Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'),
      Markup.button.callback('üèÜ –õ–∏–¥–µ—Ä—ã', 'leaders'),
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')
    ],
    [Markup.button.callback('üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'ref')],
    [Markup.button.callback('üí° –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', 'enter_code')],
    [Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è', 'tasks')],
    ADMIN_IDS.includes(ctx.from.id) ? [Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin')] : []
  ]));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π
function initTasks() {
  const initialTasks = [
    { type: 'subscribe_channel', description: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', goal: 1, reward: 10 },
    { type: 'start_bot', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞', goal: 1, reward: 5 },
    { type: 'subscribe_channel_kittyyyyywwr', description: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', goal: 1, reward: 10 }, // –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
  ];

  initialTasks.forEach(task => {
    const exists = db.get('SELECT * FROM tasks WHERE type = ?', [task.type]);
    if (!exists) {
      db.run('INSERT INTO tasks (type, description, goal, reward) VALUES (?, ?, ?, ?)', [
        task.type,
        task.description,
        task.goal,
        task.reward
      ]);
      console.log(`–ó–∞–¥–∞–Ω–∏–µ "${task.type}" —Å–æ–∑–¥–∞–Ω–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º "${task.description}"`);
    }
  });
}

initTasks();

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(async (ctx, next) => {
  ctx.session = ctx.session || {};
  const id = ctx.from.id;
  const user = db.get('SELECT * FROM users WHERE id = ?', [id]);
  if (!user && ctx.updateType === 'message' && ctx.message?.text !== '/start') {
    return ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.');
  }
  return next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  ctx.session = ctx.session || {};
  ctx.session.currentTaskIndex = 0;
  ctx.session.waitingForTaskScreenshot = null;
  ctx.session.waitingForSupport = false;
  ctx.session.waitingForCode = false;
  ctx.session.waitingForPromo = false;
  ctx.session.waitingForTicketReply = false;
  ctx.session.broadcast = false;

  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
  const subscribed = await isUserSubscribed(ctx);
  if (!subscribed) {
    const msg = await ctx.reply(`üîí –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: ${REQUIRED_CHANNEL}`, Markup.inlineKeyboard([
      [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${REQUIRED_CHANNEL.replace('@', '')}`)],
      [Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_sub')]
    ]));
    return;
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const existing = db.get('SELECT * FROM users WHERE id = ?', [id]);
  if (!existing) {
    db.run('INSERT INTO users (id, username, referred_by) VALUES (?, ?, ?)', [id, username, referral]);
    if (referral && referral !== id) {
      db.run('UPDATE users SET stars = stars + 10 WHERE id = ?', [referral]);
      ctx.telegram.sendMessage(referral, `üéâ –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª @${username || '–±–µ–∑ –Ω–∏–∫–∞'} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! +10 –∑–≤—ë–∑–¥`);
    }
  }

  await ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç, <b>${ctx.from.first_name || '–¥—Ä—É–≥'}</b>!\n\n` +
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>MagnumTap</b>!\n\n` +
    `‚ú® –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n` +
    `‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã (–§–∞—Ä–º)\n` +
    `‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã\n` +
    `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π\n` +
    `‚Ä¢ –í—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è\n\n` +
    `üéØ –£—Å–ø–µ—Ö–æ–≤ –≤ —Ñ–∞—Ä–º–µ! üöÄ`,
    { parse_mode: 'HTML' }
  );

  await sendMainMenu(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (ctx) => {
  ctx.session = ctx.session || {};
  const id = ctx.from.id;
  const now = Date.now();
  const action = ctx.callbackQuery.data;
  let user = db.get('SELECT * FROM users WHERE id = ?', [id]);

  if (!user && action !== 'check_sub') return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

  if (action === 'check_sub') {
    const subscribed = await isUserSubscribed(ctx);
    if (!subscribed) {
      return ctx.answerCbQuery('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', { show_alert: true });
    }
    registerUser(ctx);
    await sendMainMenu(ctx);
    return;
  }

  if (action === 'farm') {
    const cooldown = FARM_COOLDOWN_SECONDS * 1000;
    if (now - user.last_farm < cooldown) {
      const seconds = Math.ceil((cooldown - (now - user.last_farm)) / 1000);
      return ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${seconds} —Å–µ–∫.`, { show_alert: true });
    }
    db.run('UPDATE users SET stars = stars + 1, last_farm = ? WHERE id = ?', [now, id]);
    return ctx.answerCbQuery('‚≠ê –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 1 –∑–≤–µ–∑–¥—É!', { show_alert: true });
  }

  if (action === 'bonus') {
    const nowDay = dayjs();
    const last = user.last_bonus ? dayjs(user.last_bonus) : null;
    if (last && nowDay.diff(last, 'hour') < 24) {
      const hoursLeft = 24 - nowDay.diff(last, 'hour');
      return ctx.answerCbQuery(`üéÅ –ë–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${hoursLeft} —á.`, { show_alert: true });
    }
    db.run('UPDATE users SET stars = stars + 5, last_bonus = ? WHERE id = ?', [nowDay.toISOString(), id]);
    return ctx.answerCbQuery('üéâ –ë–æ–Ω—É—Å: +5 –∑–≤—ë–∑–¥!', { show_alert: true });
  }

  if (action === 'tasks' || action === 'next_task') {
    ctx.session.currentTaskIndex = action === 'next_task' ? (ctx.session.currentTaskIndex || 0) + 1 : ctx.session.currentTaskIndex || 0;
    const tasks = db.all('SELECT * FROM tasks');
    if (tasks.length === 0) {
      await ctx.editMessageText('üìã –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.', {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]])
      });
      return;
    }
    const taskIndex = ctx.session.currentTaskIndex % tasks.length;
    const task = tasks[taskIndex];
    const userTask = db.get('SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ?', [id, task.id]) || { progress: 0, completed: 0 };
    const taskStatus = userTask.completed ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ' : userTask.progress > 0 ? '‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' : '';
    const buttons = [
      [
        task.type === 'subscribe_channel'
          ? Markup.button.url('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${TASK_CHANNEL.replace('@', '')}`)
          : task.type === 'subscribe_channel_kittyyyyywwr'
          ? Markup.button.url('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${TASK_CHANNEL_KITTY.replace('@', '')}`)
          : Markup.button.url('–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞', TASK_BOT_LINK),
        Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', `check_task_${task.id}`)
      ],
      [Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', 'next_task')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ];
    const messageText = `üìã <b>–ó–∞–¥–∞–Ω–∏–µ</b>\n\n${task.description} ${taskStatus}\n–ù–∞–≥—Ä–∞–¥–∞: ${task.reward} –∑–≤—ë–∑–¥`;
    if (action === 'next_task') {
      await ctx.editMessageText(messageText, { parse_mode: 'HTML', ...Markup.inlineKeyboard(buttons) });
    } else {
      await ctx.reply(messageText, { parse_mode: 'HTML', ...Markup.inlineKeyboard(buttons) });
    }
    return;
  }

  if (action.startsWith('check_task_')) {
    const taskId = parseInt(action.split('_')[2]);
    const task = db.get('SELECT * FROM tasks WHERE id = ?', [taskId]);
    if (!task) {
      return ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', { show_alert: true });
    }
    const userTask = db.get('SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ?', [id, task.id]) || { progress: 0, completed: 0 };
    if (userTask.completed) {
      return ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!', { show_alert: true });
    }
    if (userTask.progress > 0) {
      return ctx.answerCbQuery('‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.', { show_alert: true });
    }
    ctx.session.waitingForTaskScreenshot = taskId;
    const msg = await ctx.reply('üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.');
    deleteNotification(ctx, msg.message_id);
    return;
  }

  if (['profile', 'leaders', 'stats', 'ref'].includes(action)) {
    await ctx.deleteMessage().catch(() => {});
  }

  if (action === 'profile') {
    const invited = db.get('SELECT COUNT(*) as count FROM users WHERE referred_by = ?', [id]).count;
    const referredByUser = user.referred_by ? db.get('SELECT username FROM users WHERE id = ?', [user.referred_by]) : null;
    const referrerName = referredByUser ? `@${referredByUser.username || '–±–µ–∑ –Ω–∏–∫–∞'}` : '‚Äî';
    const displayName = ctx.from.first_name || '‚Äî';
    const profileText =
      `üåü –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å üåü\n\n` +
      `üë§ –ò–º—è: ${displayName}\n` +
      `üÜî ID: ${user.id}\n\n` +
      `üí´ –ó–≤—ë–∑–¥—ã: ${user.stars}\n` +
      `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${invited}\n` +
      `üì£ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: ${referrerName}\n\n` +
      `üî• –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤—ë–∑–¥—ã —Å —É–º–æ–º!`;
    await ctx.reply(profileText, Markup.inlineKeyboard([
      [Markup.button.callback('–í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã', 'withdraw_stars')],
      [Markup.button.callback('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
    return;
  }

  if (action === 'support') {
    ctx.session.waitingForSupport = true;
    await ctx.reply('üìû –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (–º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç).', {
      reply_markup: { inline_keyboard: [[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_support')]] }
    });
    return;
  }

  if (action === 'cancel_support') {
    ctx.session.waitingForSupport = false;
    await ctx.deleteMessage().catch(() => {});
    await sendMainMenu(ctx);
    return;
  }

  if (action === 'withdraw_stars') {
    return ctx.answerCbQuery('‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', { show_alert: true });
  }

  if (action === 'leaders') {
    const top = getTopUsers();
    const list = top.map((u, i) => 
      `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê ‚Äî –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${u.referrals}`
    ).join('\n');
    await ctx.reply(`üèÜ –¢–æ–ø 10:\n\n${list}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
    return;
  }

  if (action === 'stats') {
    const total = db.get('SELECT COUNT(*) as count FROM users').count;
    const totalStars = db.get('SELECT SUM(stars) as stars FROM users').stars || 0;
    await ctx.reply(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}\n‚≠ê –ó–≤—ë–∑–¥: ${totalStars}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
    return;
  }

  if (action === 'ref') {
    const link = `https://t.me/${ctx.me}?start=${ctx.from.id}`;
    await ctx.reply(`üì© –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n${link}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
    return;
  }

  if (action === 'enter_code') {
    ctx.session.waitingForCode = true;
    const msg = await ctx.reply('üí¨ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:');
    deleteNotification(ctx, msg.message_id);
    return;
  }

  if (action === 'admin') {
    if (!ADMIN_IDS.includes(id)) return ctx.answerCbQuery('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
    await ctx.editMessageText(`‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å`, Markup.inlineKeyboard([
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
      [Markup.button.callback('üèÜ –¢–æ–ø', 'admin_top')],
      [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
      [Markup.button.callback('üìû –¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏', 'admin_tickets')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
    return;
  }

  if (action === 'admin_stats') {
    const total = db.get('SELECT COUNT(*) as count FROM users').count;
    const totalStars = db.get('SELECT SUM(stars) as stars FROM users').stars || 0;
    const openTickets = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['open']).count;
    const inProgressTickets = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['in_progress']).count;
    const closedTickets = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['closed']).count;
    const approvedTasks = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['approved']).count;
    const rejectedTasks = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['rejected']).count;
    return ctx.answerCbQuery(
      `üë• –Æ–∑–µ—Ä–æ–≤: ${total}\n‚≠ê –ó–≤—ë–∑–¥: ${totalStars}\nüìû –¢–∏–∫–µ—Ç–æ–≤: –û—Ç–∫—Ä—ã—Ç–æ: ${openTickets}, –í —Ä–∞–±–æ—Ç–µ: ${inProgressTickets}, –ó–∞–∫—Ä—ã—Ç–æ: ${closedTickets}\nüìã –ó–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è: –û–¥–æ–±—Ä–µ–Ω–æ: ${approvedTasks}, –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${rejectedTasks}`,
      { show_alert: true }
    );
  }

  if (action === 'admin_top') {
    const top = getTopUsers();
    const list = top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê`).join('\n');
    await ctx.reply(`üèÜ –¢–æ–ø 10:\n\n${list}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
    return;
  }

  if (action === 'admin_broadcast') {
    ctx.session.broadcast = true;
    await ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:');
    return;
  }

  if (action === 'admin_addcode') {
    ctx.session.waitingForPromo = true;
    const msg = await ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∑–≤—ë–∑–¥—ã –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä: `CODE123 10 5`):', { parse_mode: 'Markdown' });
    deleteNotification(ctx, msg.message_id);
    return;
  }

  if (action === 'admin_tickets') {
    const tickets = db.all('SELECT * FROM tickets WHERE status NOT IN (?, ?) ORDER BY created_at DESC LIMIT 10', ['closed', 'rejected']);
    if (tickets.length === 0) {
      await ctx.reply('üìû –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∏–ª–∏ –∑–∞—è–≤–æ–∫.', Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
      ]));
      return;
    }
    const buttons = tickets.map(ticket => {
      const type = ticket.task_type ? `–ó–∞—è–≤–∫–∞ (${ticket.task_type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª (${TASK_CHANNEL})` : ticket.task_type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª (${TASK_CHANNEL_KITTY})` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'})` : '–¢–∏–∫–µ—Ç';
      return [
        Markup.button.callback(
          `${type} #${ticket.ticket_id} (@${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}, ${ticket.status === 'open' ? '–û—Ç–∫—Ä—ã—Ç' : '–í —Ä–∞–±–æ—Ç–µ'})`,
          `ticket_${ticket.ticket_id}`
        )
      ];
    });
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]);
    await ctx.reply('üìû –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ –∏ –∑–∞—è–≤–æ–∫:', Markup.inlineKeyboard(buttons));
    return;
  }

  if (action.startsWith('ticket_')) {
    const ticketId = parseInt(action.split('_')[1]);
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
    if (!ticket) return ctx.answerCbQuery('–¢–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', { show_alert: true });
    const fileIds = ticket.file_id ? JSON.parse(ticket.file_id) : [];
    let fileText = fileIds.length > 0 ? `üìé –§–∞–π–ª—ã: ${fileIds.length} —à—Ç.` : 'üìé –§–∞–π–ª–æ–≤ –Ω–µ—Ç';
    const type = ticket.task_type ? `–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (${ticket.task_type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª (${TASK_CHANNEL})` : ticket.task_type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª (${TASK_CHANNEL_KITTY})` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'})` : '–¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏';
    const ticketText =
      `${type} #${ticket.ticket_id}\n` +
      `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
      `üÜî ID: ${ticket.user_id}\n` +
      `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
      `${fileText}\n` +
      `üìÖ –°–æ–∑–¥–∞–Ω: ${ticket.created_at}\n` +
      `üìå –°—Ç–∞—Ç—É—Å: ${ticket.status === 'open' ? '–û—Ç–∫—Ä—ã—Ç' : ticket.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : ticket.status === 'approved' ? '–û–¥–æ–±—Ä–µ–Ω–æ' : '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'}`;
    const buttons = [];
    if (ticket.task_type) {
      buttons.push([Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_task_${ticket.ticket_id}`)]);
      buttons.push([Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_task_${ticket.ticket_id}`)]);
    } else {
      buttons.push([Markup.button.callback('‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', `reply_ticket_${ticket.ticket_id}`)]);
      buttons.push([Markup.button.callback('üîÑ –í —Ä–∞–±–æ—Ç–µ', `set_ticket_status_${ticket.ticket_id}_in_progress`)]);
      buttons.push([Markup.button.callback('‚úÖ –ó–∞–∫—Ä—ã—Ç—å', `set_ticket_status_${ticket.ticket_id}_closed`)]);
    }
    if (fileIds.length > 0) {
      buttons.unshift([Markup.button.callback('üìé –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã', `view_files_${ticket.ticket_id}`)]);
    }
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_tickets')]);
    await ctx.editMessageText(ticketText, { parse_mode: 'HTML', ...Markup.inlineKeyboard(buttons) });
    return;
  }

  if (action.startsWith('view_files_')) {
    const ticketId = parseInt(action.split('_')[2]);
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
    if (!ticket || !ticket.file_id) return ctx.answerCbQuery('–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', { show_alert: true });
    const fileIds = JSON.parse(ticket.file_id);
    for (const fileId of fileIds) {
      await ctx.telegram.sendPhoto(id, fileId, { caption: `–°–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ ${ticket.task_type ? '–∑–∞—è–≤–∫–∏' : '—Ç–∏–∫–µ—Ç–∞'} #${ticketId}` });
    }
    return ctx.answerCbQuery('–§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', { show_alert: true });
  }

  if (action.startsWith('approve_task_')) {
    const ticketId = parseInt(action.split('_')[2]);
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
    if (!ticket) return ctx.answerCbQuery('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', { show_alert: true });
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #${ticketId}, task_type: ${ticket.task_type}`);
    const task = db.get('SELECT id, reward FROM tasks WHERE type = ?', [ticket.task_type]);
    if (!task) {
      console.log(`–ó–∞–¥–∞–Ω–∏–µ —Å type "${ticket.task_type}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ tasks`);
      return ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', { show_alert: true });
    }
    db.run('UPDATE tickets SET status = ? WHERE ticket_id = ?', ['approved', ticketId]);
    db.run('INSERT OR REPLACE INTO user_tasks (user_id, task_id, progress, completed) VALUES (?, ?, ?, ?)', [ticket.user_id, task.id, 1, 1]);
    db.run('UPDATE users SET stars = stars + ? WHERE id = ?', [task.reward, ticket.user_id]);
    if (ticket.channel_message_id) {
      try {
        const updatedText =
          `üìã –ó–∞—è–≤–∫–∞ #${ticket.ticket_id}\n` +
          `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
          `üÜî ID: ${ticket.user_id}\n` +
          `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
          `üìÖ –°–æ–∑–¥–∞–Ω: ${ticket.created_at}\n` +
          `üìå –°—Ç–∞—Ç—É—Å: –û–¥–æ–±—Ä–µ–Ω–æ\n` +
          `üéâ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} –∑–≤—ë–∑–¥`;
        await ctx.telegram.editMessageText(
          SUPPORT_CHANNEL,
          ticket.channel_message_id,
          undefined,
          updatedText,
          { parse_mode: 'HTML' }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }
    const taskName = ticket.task_type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª (${TASK_CHANNEL})` : ticket.task_type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª (${TASK_CHANNEL_KITTY})` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞';
    await ctx.telegram.sendMessage(
      ticket.user_id,
      `üìã –ó–∞—è–≤–∫–∞ #${ticketId} –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ "${taskName}" –æ–¥–æ–±—Ä–µ–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${task.reward} –∑–≤—ë–∑–¥.`
    );
    await ctx.answerCbQuery(`‚úÖ –ó–∞—è–≤–∫–∞ #${ticketId} –æ–¥–æ–±—Ä–µ–Ω–∞`, { show_alert: true });
    await ctx.deleteMessage().catch(() => {});
    await ctx.reply('üìû –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ –∏ –∑–∞—è–≤–æ–∫:', Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_tickets')]
    ]));
    return;
  }

  if (action.startsWith('reject_task_')) {
    const ticketId = parseInt(action.split('_')[2]);
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
    if (!ticket) return ctx.answerCbQuery('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', { show_alert: true });
    db.run('UPDATE tickets SET status = ? WHERE ticket_id = ?', ['rejected', ticketId]);
    const task = db.get('SELECT id FROM tasks WHERE type = ?', [ticket.task_type]);
    if (task) {
      db.run('DELETE FROM user_tasks WHERE user_id = ? AND task_id = ?', [ticket.user_id, task.id]);
    }
    if (ticket.channel_message_id) {
      try {
        const updatedText =
          `üìã –ó–∞—è–≤–∫–∞ #${ticket.ticket_id}\n` +
          `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
          `üÜî ID: ${ticket.user_id}\n` +
          `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
          `üìÖ –°–æ–∑–¥–∞–Ω: ${ticket.created_at}\n` +
          `üìå –°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª–æ–Ω–µ–Ω–æ`;
        await ctx.telegram.editMessageText(
          SUPPORT_CHANNEL,
          ticket.channel_message_id,
          undefined,
          updatedText,
          { parse_mode: 'HTML' }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }
    const taskName = ticket.task_type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª (${TASK_CHANNEL})` : ticket.task_type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª (${TASK_CHANNEL_KITTY})` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞';
    await ctx.telegram.sendMessage(
      ticket.user_id,
      `üìã –ó–∞—è–≤–∫–∞ #${ticketId} –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ "${taskName}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`
    );
    await ctx.answerCbQuery(`‚ùå –ó–∞—è–≤–∫–∞ #${ticketId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`, { show_alert: true });
    await ctx.deleteMessage().catch(() => {});
    await ctx.reply('üìû –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ –∏ –∑–∞—è–≤–æ–∫:', Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_tickets')]
    ]));
    return;
  }

  if (action.startsWith('reply_ticket_')) {
    const ticketId = parseInt(action.split('_')[2]);
    ctx.session.waitingForTicketReply = ticketId;
    await ctx.reply(`‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #${ticketId}:`);
    return;
  }

  if (action.startsWith('set_ticket_status_')) {
    const parts = action.split('_');
    if (parts.length < 4) {
      return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è', { show_alert: true });
    }
    const ticketId = parseInt(parts[3], 10);
    const status = parts.slice(4).join('_');
    if (isNaN(ticketId) || !['in_progress', 'closed'].includes(status)) {
      return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ —Å—Ç–∞—Ç—É—Å', { show_alert: true });
    }
    db.run('UPDATE tickets SET status = ? WHERE ticket_id = ?', [status, ticketId]);
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
    if (!ticket) return ctx.answerCbQuery('–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });
    if (ticket.channel_message_id) {
      try {
        const updatedText =
          `üìû –¢–∏–∫–µ—Ç #${ticket.ticket_id}\n` +
          `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
          `üÜî ID: ${ticket.user_id}\n` +
          `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description}\n` +
          `üìÖ –°–æ–∑–¥–∞–Ω: ${ticket.created_at}\n` +
          `üìå –°—Ç–∞—Ç—É—Å: ${ticket.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}`;
        await ctx.telegram.editMessageText(
          SUPPORT_CHANNEL,
          ticket.channel_message_id,
          undefined,
          updatedText,
          { parse_mode: 'HTML' }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }
    const userMsg = await ctx.telegram.sendMessage(
      ticket.user_id,
      `üìû –¢–∏–∫–µ—Ç #${ticketId} –æ–±–Ω–æ–≤–ª—ë–Ω. –°—Ç–∞—Ç—É—Å: ${status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}`
    );
    deleteNotification(ctx, userMsg.message_id);
    await ctx.answerCbQuery(`–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ #${ticketId} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "${status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}"`, { show_alert: true });
    return;
  }

  if (action === 'back') {
    await ctx.deleteMessage().catch(() => {});
    await sendMainMenu(ctx);
    return;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
  ctx.session = ctx.session || {};
  const id = ctx.from.id;
  let user = db.get('SELECT * FROM users WHERE id = ?', [id]);

  if (!user) {
    ctx.session.waitingForCode = false;
    ctx.session.broadcast = false;
    ctx.session.waitingForPromo = false;
    ctx.session.waitingForSupport = false;
    ctx.session.waitingForTaskScreenshot = null;
    const msg = await ctx.reply('‚ùå –ù–∞—á–Ω–∏—Ç–µ —Å /start.');
    return;
  }

  if (ctx.session?.waitingForTaskScreenshot) {
    const taskId = ctx.session.waitingForTaskScreenshot;
    const task = db.get('SELECT * FROM tasks WHERE id = ?', [taskId]);
    if (!task) {
      ctx.session.waitingForTaskScreenshot = null;
      const msg = await ctx.reply('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      deleteNotification(ctx, msg.message_id);
      return;
    }
    if (!ctx.message.photo) {
      const msg = await ctx.reply('‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (—Å–∫—Ä–∏–Ω—à–æ—Ç) –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.');
      deleteNotification(ctx, msg.message_id);
      return;
    }
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    const fileId = photo.file_id;
    const description = `–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ: ${task.type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª (${TASK_CHANNEL})` : task.type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª (${TASK_CHANNEL_KITTY})` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'}`;
    let info;
    try {
      info = await ctx.telegram.sendMessage(SUPPORT_CHANNEL, '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–∫–∏...');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ SUPPORT_CHANNEL:', error);
      const msg = await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForTaskScreenshot = null;
      return;
    }
    db.run(`
      INSERT INTO tickets (user_id, username, description, created_at, file_id, channel_message_id, task_type)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `, [id, user.username || '–±–µ–∑ –Ω–∏–∫–∞', description, dayjs().toISOString(), JSON.stringify([fileId]), info.message_id, task.type]);
    const ticketId = db.get('SELECT last_insert_rowid() as id').id;
    const ticketText =
      `üìã –ó–∞—è–≤–∫–∞ #${ticketId}\n` +
      `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
      `üÜî ID: ${id}\n` +
      `üìù –ó–∞–¥–∞–Ω–∏–µ: ${description}\n` +
      `üìé –§–∞–π–ª: 1 —à—Ç.\n` +
      `üìÖ –°–æ–∑–¥–∞–Ω: ${dayjs().format('YYYY-MM-DD HH:mm:ss')}\n` +
      `üìå –°—Ç–∞—Ç—É—Å: –û—Ç–∫—Ä—ã—Ç`;
    try {
      await ctx.telegram.editMessageText(
        SUPPORT_CHANNEL,
        info.message_id,
        undefined,
        ticketText,
        { parse_mode: 'HTML' }
      );
      await ctx.telegram.sendPhoto(SUPPORT_CHANNEL, fileId, { caption: `–°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ #${ticketId}` });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ SUPPORT_CHANNEL:', error);
      db.run('DELETE FROM tickets WHERE ticket_id = ?', [ticketId]); // –û—Ç–∫–∞—Ç –∑–∞—è–≤–∫–∏
      const msg = await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForTaskScreenshot = null;
      return;
    }
    await ctx.telegram.sendMessage(ADMIN_IDS[0], `üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${ticketId} –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ "${task.type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª (${TASK_CHANNEL})` : task.type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª (${TASK_CHANNEL_KITTY})` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'}" –æ—Ç @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}`);
    db.run('INSERT OR REPLACE INTO user_tasks (user_id, task_id, progress, completed) VALUES (?, ?, ?, ?)', [id, task.id, 1, 0]);
    const msg = await ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ #${ticketId} –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
    deleteNotification(ctx, msg.message_id);
    ctx.session.waitingForTaskScreenshot = null;
    return;
  }

  if (ctx.session?.waitingForSupport) {
    const description = ctx.message.text || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
    const fileIds = [];
    if (ctx.message.photo) {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      fileIds.push(photo.file_id);
    }
    if (ctx.message.document) {
      fileIds.push(ctx.message.document.file_id);
    }
    let info;
    try {
      info = await ctx.telegram.sendMessage(SUPPORT_CHANNEL, '–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ç–∞...');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ SUPPORT_CHANNEL:', error);
      const msg = await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForSupport = false;
      return;
    }
    db.run(`
      INSERT INTO tickets (user_id, username, description, created_at, file_id, channel_message_id)
      VALUES (?, ?, ?, ?, ?, ?)
    `, [id, user.username || '–±–µ–∑ –Ω–∏–∫–∞', description, dayjs().toISOString(), JSON.stringify(fileIds), info.message_id]);
    const ticketId = db.get('SELECT last_insert_rowid() as id').id;
    const ticketText =
      `üìû –¢–∏–∫–µ—Ç #${ticketId}\n` +
      `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
      `üÜî ID: ${id}\n` +
      `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${description}\n` +
      `üìé –§–∞–π–ª—ã: ${fileIds.length > 0 ? fileIds.length + ' —à—Ç.' : '–ù–µ—Ç'}\n` +
      `üìÖ –°–æ–∑–¥–∞–Ω: ${dayjs().format('YYYY-MM-DD HH:mm:ss')}\n` +
      `üìå –°—Ç–∞—Ç—É—Å: –û—Ç–∫—Ä—ã—Ç`;
    try {
      await ctx.telegram.editMessageText(
        SUPPORT_CHANNEL,
        info.message_id,
        undefined,
        ticketText,
        { parse_mode: 'HTML' }
      );
      if (fileIds.length > 0) {
        for (const fileId of fileIds) {
          await ctx.telegram.sendPhoto(SUPPORT_CHANNEL, fileId, { caption: `–°–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ —Ç–∏–∫–µ—Ç–∞ #${ticketId}` });
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ SUPPORT_CHANNEL:', error);
      db.run('DELETE FROM tickets WHERE ticket_id = ?', [ticketId]); // –û—Ç–∫–∞—Ç —Ç–∏–∫–µ—Ç–∞
      const msg = await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForSupport = false;
      return;
    }
    await ctx.telegram.sendMessage(ADMIN_IDS[0], `üìû –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #${ticketId} –æ—Ç @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}`);
    const msg = await ctx.reply(`‚úÖ –¢–∏–∫–µ—Ç #${ticketId} —Å–æ–∑–¥–∞–Ω.`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
    deleteNotification(ctx, msg.message_id);
    ctx.session.waitingForSupport = false;
    return;
  }

  if (ctx.session?.broadcast && ADMIN_IDS.includes(id)) {
    const users = db.all('SELECT id FROM users');
    for (const u of users) {
      try {
        await bot.telegram.sendMessage(u.id, ctx.message.text);
      } catch {}
    }
    const msg = await ctx.reply('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    deleteNotification(ctx, msg.message_id);
    ctx.session.broadcast = false;
    return;
  }

  if (ctx.session?.waitingForCode) {
    const code = ctx.message.text.trim();
    const promo = db.get('SELECT * FROM promo_codes WHERE code = ?', [code]);
    if (!promo) {
      const msg = await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!');
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForCode = false;
      return;
    }
    if (promo.activations_left === 0) {
      const msg = await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω.');
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForCode = false;
      return;
    }
    let usedBy = promo.used_by ? JSON.parse(promo.used_by) : [];
    if (usedBy.includes(id)) {
      const msg = await ctx.reply('‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.');
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForCode = false;
      return;
    }
    db.run('UPDATE users SET stars = stars + ? WHERE id = ?', [promo.reward, id]);
    usedBy.push(id);
    db.run('UPDATE promo_codes SET activations_left = ?, used_by = ? WHERE code = ?', [
      promo.activations_left - 1,
      JSON.stringify(usedBy),
      code
    ]);
    const msg = await ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! +${promo.reward} –∑–≤—ë–∑–¥`);
    deleteNotification(ctx, msg.message_id);
    ctx.session.waitingForCode = false;
    return;
  }

  if (ctx.session?.waitingForPromo && ADMIN_IDS.includes(id)) {
    const parts = ctx.message.text.trim().split(/\s+/);
    if (parts.length !== 3) {
      const msg = await ctx.reply('‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: `–ö–û–î 10 5`', { parse_mode: 'Markdown' });
      deleteNotification(ctx, msg.message_id);
      return;
    }
    const [code, rewardStr, activationsStr] = parts;
    const reward = parseInt(rewardStr);
    const activations = parseInt(activationsStr);
    if (!code || isNaN(reward) || isNaN(activations)) {
      const msg = await ctx.reply('‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: `–ö–û–î 10 5`', { parse_mode: 'Markdown' });
      deleteNotification(ctx, msg.message_id);
      return;
    }
    db.run('INSERT INTO promo_codes (code, reward, activations_left, used_by) VALUES (?, ?, ?, ?)', [
      code,
      reward,
      activations,
      JSON.stringify([])
    ]);
    const msg = await ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ "${code}" –Ω–∞ ${reward} –∑–≤—ë–∑–¥ –¥–æ–±–∞–≤–ª–µ–Ω.`);
    deleteNotification(ctx, msg.message_id);
    ctx.session.waitingForPromo = false;
    return;
  }

  if (ctx.session?.waitingForTicketReply && ADMIN_IDS.includes(id)) {
    const ticketId = ctx.session.waitingForTicketReply;
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
    if (!ticket) {
      const msg = await ctx.reply('‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForTicketReply = false;
      return;
    }
    const replyText = ctx.message.text || '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞';
    const fileIds = [];
    if (ctx.message.photo) {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      fileIds.push(photo.file_id);
    }
    if (ctx.message.document) {
      fileIds.push(ctx.message.document.file_id);
    }
    if (ticket.channel_message_id) {
      try {
        const updatedText =
          `üìû –¢–∏–∫–µ—Ç #${ticket.ticket_id}\n` +
          `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
          `üÜî ID: ${ticket.user_id}\n` +
          `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description}\n` +
          `üìÖ –°–æ–∑–¥–∞–Ω: ${ticket.created_at}\n` +
          `üìå –°—Ç–∞—Ç—É—Å: ${ticket.status}\n` +
          `\n‚úçÔ∏è –û—Ç–≤–µ—Ç: ${replyText}`;
        await ctx.telegram.editMessageText(
          SUPPORT_CHANNEL,
          ticket.channel_message_id,
          undefined,
          updatedText,
          { parse_mode: 'HTML' }
        );
        if (fileIds.length > 0) {
          for (const fileId of fileIds) {
            await ctx.telegram.sendPhoto(SUPPORT_CHANNEL, fileId, { caption: `–°–∫—Ä–∏–Ω—à–æ—Ç –∫ –æ—Ç–≤–µ—Ç—É #${ticketId}` });
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }
    const userMsg = await ctx.telegram.sendMessage(
      ticket.user_id,
      `üìû –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId}:\n${replyText}`
    );
    deleteNotification(ctx, userMsg.message_id);
    if (fileIds.length > 0) {
      for (const fileId of fileIds) {
        await ctx.telegram.sendPhoto(ticket.user_id, fileId, { caption: `–°–∫—Ä–∏–Ω—à–æ—Ç –∫ –æ—Ç–≤–µ—Ç—É #${ticketId}` });
      }
    }
    const replyMsg = await ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ö —Ç–∏–∫–µ—Ç–∞–º', 'admin_tickets')]
    ]));
    deleteNotification(ctx, replyMsg.message_id);
    ctx.session.waitingForTicketReply = false;
    return;
  }
});

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function registerUser(ctx) {
  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;
  const existing = db.get('SELECT * FROM users WHERE id = ?', [id]);
  if (!existing) {
    db.run('INSERT INTO users (id, username, referred_by) VALUES (?, ?, ?)', [id, username, referral]);
    if (referral && referral !== id) {
      db.run('UPDATE users SET stars = stars + 10 WHERE id = ?', [referral]);
      ctx.telegram.sendMessage(referral, `üéâ –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª @${username || '–±–µ–∑ –Ω–∏–∫–∞'} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! +10 –∑–≤—ë–∑–¥`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')).catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err));