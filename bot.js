const { Telegraf, Markup, session } = require('telegraf');
const dayjs = require('dayjs');
require('dotenv').config();

const db = require('./db');
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());

const REQUIRED_CHANNEL = '@magnumtap';
const ADMIN_ID = 6587897295; // üîÅ –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
const SUPPORT_CHANNEL = '@magnumsupported'; // –ö–∞–Ω–∞–ª –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(async (ctx, next) => {
  const id = ctx.from.id;
  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  if (!user && ctx.updateType !== 'message' && ctx.message?.text !== '/start') {
    return ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.');
  }
  return next();
});

async function isUserSubscribed(ctx) {
  try {
    const status = await ctx.telegram.getChatMember(REQUIRED_CHANNEL, ctx.from.id);
    return ['member', 'creator', 'administrator'].includes(status.status);
  } catch {
    return false;
  }
}

function sendMainMenu(ctx) {
  return ctx.reply('üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.inlineKeyboard([
    [Markup.button.callback('‚≠ê –§–∞—Ä–º', 'farm'), Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
    [
      Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile'),
      Markup.button.callback('üèÜ –õ–∏–¥–µ—Ä—ã', 'leaders'),
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')
    ],
    [Markup.button.callback('üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'ref')],
    [Markup.button.callback('üí° –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', 'enter_code')],
    [Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è', 'daily_tasks')],
    ctx.from.id === ADMIN_ID ? [Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin')] : []
  ]));
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
function getRandomDailyTask() {
  const tasks = [
    { type: 'farm_10', description: '–°–æ–±–µ—Ä–∏—Ç–µ 10 –∑–≤—ë–∑–¥ —Ñ–∞—Ä–º–æ–º', goal: 10, reward: 10 },
    { type: 'invite_1', description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 1 –¥—Ä—É–≥–∞', goal: 1, reward: 15 },
    { type: 'promo_use', description: '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥', goal: 1, reward: 20 },
  ];
  return tasks[Math.floor(Math.random() * tasks.length)];
}

bot.start(async (ctx) => {
  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;

  const subscribed = await isUserSubscribed(ctx);
  if (!subscribed) {
    return ctx.reply(`üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: ${REQUIRED_CHANNEL}`, Markup.inlineKeyboard([
      [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${REQUIRED_CHANNEL.replace('@', '')}`)],
      [Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_sub')]
    ]));
  }

  const existing = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  if (!existing) {
    db.prepare('INSERT INTO users (id, username, referred_by) VALUES (?, ?, ?)').run(id, username, referral);
    if (referral && referral !== id) {
      db.prepare('UPDATE users SET stars = stars + 10 WHERE id = ?').run(referral);
      ctx.telegram.sendMessage(referral, `üéâ –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª @${username || '–±–µ–∑ –Ω–∏–∫–∞'} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! +10 –∑–≤—ë–∑–¥`);
    }
  }

  const day = dayjs().format('YYYY-MM-DD');
  let user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);

  if (user.daily_task_date !== day) {
    const task = getRandomDailyTask();
    db.prepare(`
      UPDATE users SET daily_task_date = ?, daily_task_type = ?, daily_task_progress = 0, daily_task_completed = 0 WHERE id = ?
    `).run(day, task.type, id);
    user.daily_task_date = day;
    user.daily_task_type = task.type;
    user.daily_task_progress = 0;
    user.daily_task_completed = 0;
  }

  await ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç, <b>${ctx.from.first_name || '–¥—Ä—É–≥'}</b>!\n\n` +
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>MagnumTap</b> ‚Äî —Ç–≤–æ—ë –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Å–±–æ—Ä—É –∑–≤—ë–∑–¥ –∏ –ø–æ–ª—É—á–µ–Ω–∏—é –±–æ–Ω—É—Å–æ–≤!\n\n` +
    `‚ú® –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n` +
    `‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ ¬´–§–∞—Ä–º¬ª\n` +
    `‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–æ—Å—Ç–∞\n` +
    `‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π\n` +
    `‚Ä¢ –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ —Ç–æ–ø–∞—Ö –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ü–∏—è—Ö\n\n` +
    `üéØ –ù–µ –∑–∞–±—ã–≤–∞–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã —Å —É–º–æ–º –∏ –ø–æ–ª—É—á–∞—Ç—å –º–∞–∫—Å–∏–º—É–º –≤—ã–≥–æ–¥—ã!\n\n` +
    `–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞ –∏ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ—Ä–¥–æ–≤! üöÄ`,
    { parse_mode: 'HTML' }
  );

  await sendMainMenu(ctx);
});

bot.on('callback_query', async (ctx) => {
  const id = ctx.from.id;
  const now = Date.now();
  const action = ctx.callbackQuery.data;
  let user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);

  if (!user && action !== 'check_sub') return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

  if (action === 'check_sub') {
    const subscribed = await isUserSubscribed(ctx);
    if (!subscribed) {
      return ctx.answerCbQuery('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', { show_alert: true });
    }
    registerUser(ctx);
    return sendMainMenu(ctx);
  }

  if (action === 'farm') {
    const cooldown = 60 * 1000;
    if (now - user.last_farm < cooldown) {
      const seconds = Math.ceil((cooldown - (now - user.last_farm)) / 1000);
      return ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${seconds} —Å–µ–∫.`, { show_alert: true });
    }

    db.prepare('UPDATE users SET stars = stars + 1, last_farm = ? WHERE id = ?').run(now, id);

    if (user.daily_task_type === 'farm_10' && !user.daily_task_completed) {
      let progress = user.daily_task_progress + 1;
      let completed = 0;
      if (progress >= 10) {
        completed = 1;
        db.prepare('UPDATE users SET stars = stars + 10 WHERE id = ?').run(id);
        ctx.answerCbQuery('üéâ –ó–∞–¥–∞–Ω–∏–µ "–°–æ–±–µ—Ä–∏—Ç–µ 10 –∑–≤—ë–∑–¥ —Ñ–∞—Ä–º–æ–º" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +10 –∑–≤—ë–∑–¥', { show_alert: true });
      } else {
        ctx.answerCbQuery('‚≠ê –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 1 –∑–≤–µ–∑–¥—É!', { show_alert: false });
      }
      db.prepare('UPDATE users SET daily_task_progress = ?, daily_task_completed = ? WHERE id = ?').run(progress, completed, id);
    } else {
      return ctx.answerCbQuery('‚≠ê –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 1 –∑–≤–µ–∑–¥—É!', { show_alert: false });
    }
    return;
  }

  if (action === 'bonus') {
    const nowDay = dayjs();
    const last = user.last_bonus ? dayjs(user.last_bonus) : null;

    if (last && nowDay.diff(last, 'hour') < 24) {
      const hoursLeft = 24 - nowDay.diff(last, 'hour');
      return ctx.answerCbQuery(`üéÅ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ ${hoursLeft} —á.`, { show_alert: true });
    }

    db.prepare('UPDATE users SET stars = stars + 5, last_bonus = ? WHERE id = ?').run(nowDay.toISOString(), id);
    return ctx.answerCbQuery('üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +5 –∑–≤—ë–∑–¥!', { show_alert: true });
  }

  if (action === 'daily_tasks') {
    const tasks = {
      farm_10: { description: '–°–æ–±–µ—Ä–∏—Ç–µ 10 –∑–≤—ë–∑–¥ —Ñ–∞—Ä–º–æ–º', goal: 10, reward: 10 },
      invite_1: { description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 1 –¥—Ä—É–≥–∞', goal: 1, reward: 15 },
      promo_use: { description: '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥', goal: 1, reward: 20 },
    };
    const task = tasks[user.daily_task_type];
    if (!task) return ctx.answerCbQuery('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', { show_alert: true });

    const progress = user.daily_task_progress || 0;
    const completed = user.daily_task_completed ? true : false;

    let text = `üìã <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ</b> üìã\n\n` +
               `${task.description}\n` +
               `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress} / ${task.goal}\n\n`;

    if (completed) {
      text += `‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É: +${task.reward} –∑–≤—ë–∑–¥.`;
    } else {
      text += `üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É: +${task.reward} –∑–≤—ë–∑–¥.`;
    }

    return ctx.editMessageText(text, { parse_mode: 'HTML', ...Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]) });
  }

  if (['profile', 'leaders', 'stats', 'ref'].includes(action)) {
    await ctx.deleteMessage();
  }

  if (action === 'profile') {
    const invited = db.prepare('SELECT COUNT(*) as count FROM users WHERE referred_by = ?').get(id).count;
    const referredByUser = user.referred_by ? db.prepare('SELECT username FROM users WHERE id = ?').get(user.referred_by) : null;
    const referrerName = referredByUser ? `@${referredByUser.username || '–±–µ–∑ –Ω–∏–∫–∞'}` : '‚Äî';
    const displayName = ctx.from.first_name || '‚Äî';

    const profileText =
      `üåü –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ MagnumTap üåü\n\n` +
      `üë§ –ò–º—è: ${displayName}\n` +
      `üÜî Telegram ID: ${user.id}\n\n` +
      `üí´ –í–∞—à–∏ –∑–≤—ë–∑–¥—ã: ${user.stars}\n` +
      `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${invited}\n` +
      `üì£ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: ${referrerName}\n\n` +
      `üî• –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤—ë–∑–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –∏ —É—á–∞—Å—Ç–∏—è –≤ –∞–∫—Ü–∏—è—Ö!`;

    return ctx.reply(profileText, Markup.inlineKeyboard([
      [Markup.button.callback('–í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã', 'withdraw_stars')],
      [Markup.button.callback('üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', 'support')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'support') {
    ctx.session = ctx.session || {};
    ctx.session.waitingForSupport = true;
    return ctx.reply('üìû –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏—è.', {
      reply_markup: {
        inline_keyboard: [
          [Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_support')]
        ]
      }
    });
  }

  if (action === 'cancel_support') {
    ctx.session.waitingForSupport = false;
    await ctx.deleteMessage();
    return sendMainMenu(ctx);
  }

  if (action === 'withdraw_stars') {
    return ctx.answerCbQuery('‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ!', { show_alert: true });
  }

  if (action === 'leaders') {
    const top = db.prepare(`
      SELECT 
        u.username, 
        u.stars, 
        (SELECT COUNT(*) FROM users WHERE referred_by = u.id) AS referrals 
      FROM users u 
      ORDER BY u.stars DESC 
      LIMIT 10
    `).all();

    const list = top.map((u, i) => 
      `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê ‚Äî –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${u.referrals}`
    ).join('\n');

    return ctx.reply(`üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:\n\n${list}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'stats') {
    const total = db.prepare('SELECT COUNT(*) as count FROM users').get().count;
    const totalStars = db.prepare('SELECT SUM(stars) as stars FROM users').get().stars || 0;
    return ctx.reply(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}
‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'ref') {
    const link = `https://t.me/${ctx.me}?start=${ctx.from.id}`;
    return ctx.reply(`üì© –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n${link}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'enter_code') {
    ctx.session = ctx.session || {};
    ctx.session.waitingForCode = true;
    return ctx.reply('üí¨ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:');
  }

  if (action === 'admin') {
    if (id !== ADMIN_ID) return ctx.answerCbQuery('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
    return ctx.editMessageText(`‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å`, Markup.inlineKeyboard([
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
      [Markup.button.callback('üèÜ –¢–æ–ø', 'admin_top')],
      [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
      [Markup.button.callback('üìû –¢–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏', 'admin_tickets')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'admin_stats') {
    const total = db.prepare('SELECT COUNT(*) as count FROM users').get().count;
    const totalStars = db.prepare('SELECT SUM(stars) as stars FROM users').get().stars || 0;
    const openTickets = db.prepare('SELECT COUNT(*) as count FROM tickets WHERE status = ?').get('open').count;
    const inProgressTickets = db.prepare('SELECT COUNT(*) as count FROM tickets WHERE status = ?').get('in_progress').count;
    const closedTickets = db.prepare('SELECT COUNT(*) as count FROM tickets WHERE status = ?').get('closed').count;
    return ctx.answerCbQuery(
      `üë• –Æ–∑–µ—Ä–æ–≤: ${total}\n‚≠ê –ó–≤—ë–∑–¥: ${totalStars}\nüìû –¢–∏–∫–µ—Ç–æ–≤: –û—Ç–∫—Ä—ã—Ç–æ: ${openTickets}, –í —Ä–∞–±–æ—Ç–µ: ${inProgressTickets}, –ó–∞–∫—Ä—ã—Ç–æ: ${closedTickets}`,
      { show_alert: true }
    );
  }

  if (action === 'admin_top') {
    const top = db.prepare('SELECT username, stars FROM users ORDER BY stars DESC LIMIT 10').all();
    const list = top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê`).join('\n');
    return ctx.reply(`üèÜ –¢–æ–ø 10:\n\n${list}`);
  }

  if (action === 'admin_broadcast') {
    ctx.session = ctx.session || {};
    ctx.session.broadcast = true;
    return ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:');
  }

  if (action === 'admin_addcode') {
    ctx.session = ctx.session || {};
    ctx.session.waitingForPromo = true;
    return ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ù–∞–ø—Ä–∏–º–µ—Ä: `CODE123 10 5`', { parse_mode: 'Markdown' });
  }

  if (action === 'admin_tickets') {
    const tickets = db.prepare('SELECT * FROM tickets WHERE status != ? ORDER BY created_at DESC LIMIT 10').all('closed');
    if (tickets.length === 0) {
      return ctx.reply('üìû –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏–ª–∏ –≤ —Ä–∞–±–æ—Ç–µ —Ç–∏–∫–µ—Ç–æ–≤.', Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
      ]));
    }

    const buttons = tickets.map(ticket => [
      Markup.button.callback(
        `–¢–∏–∫–µ—Ç #${ticket.ticket_id} (@${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}, ${ticket.status === 'open' ? '–û—Ç–∫—Ä—ã—Ç' : '–í —Ä–∞–±–æ—Ç–µ'})`,
        `ticket_${ticket.ticket_id}`
      )
    ]);
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]);

    return ctx.reply('üìû –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤:', Markup.inlineKeyboard(buttons));
  }

  if (action.startsWith('ticket_')) {
    const ticketId = parseInt(action.split('_')[1]);
    const ticket = db.prepare('SELECT * FROM tickets WHERE ticket_id = ?').get(ticketId);
    if (!ticket) return ctx.answerCbQuery('–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });

    const fileIds = ticket.file_id ? JSON.parse(ticket.file_id) : [];
    let fileText = fileIds.length > 0 ? `üìé –§–∞–π–ª—ã: ${fileIds.length} —à—Ç.` : 'üìé –§–∞–π–ª–æ–≤ –Ω–µ—Ç';

    const ticketText =
      `üìû –¢–∏–∫–µ—Ç #${ticket.ticket_id}\n` +
      `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
      `üÜî User ID: ${ticket.user_id}\n` +
      `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description}\n` +
      `${fileText}\n` +
      `üìÖ –°–æ–∑–¥–∞–Ω: ${ticket.created_at}\n` +
      `üìå –°—Ç–∞—Ç—É—Å: ${ticket.status === 'open' ? '–û—Ç–∫—Ä—ã—Ç' : ticket.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}`;

    const buttons = [
      [Markup.button.callback('‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', `reply_ticket_${ticketId}`)],
      [Markup.button.callback('üîÑ –í —Ä–∞–±–æ—Ç–µ', `set_ticket_status_${ticketId}_in_progress`)],
      [Markup.button.callback('‚úÖ –ó–∞–∫—Ä—ã—Ç—å', `set_ticket_status_${ticketId}_closed`)],
    ];
    if (fileIds.length > 0) {
      buttons.unshift([Markup.button.callback('üìé –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã', `view_files_${ticketId}`)]);
    }
    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_tickets')]);

    return ctx.editMessageText(ticketText, { parse_mode: 'HTML', ...Markup.inlineKeyboard(buttons) });
  }

  if (action.startsWith('view_files_')) {
    const ticketId = parseInt(action.split('_')[2]);
    const ticket = db.prepare('SELECT * FROM tickets WHERE ticket_id = ?').get(ticketId);
    if (!ticket || !ticket.file_id) return ctx.answerCbQuery('–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', { show_alert: true });

    const fileIds = JSON.parse(ticket.file_id);
    for (const fileId of fileIds) {
      await ctx.telegram.sendDocument(id, fileId, { caption: `–§–∞–π–ª –∏–∑ —Ç–∏–∫–µ—Ç–∞ #${ticketId}` });
    }
    return ctx.answerCbQuery('–§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', { show_alert: true });
  }

  if (action.startsWith('reply_ticket_')) {
    const ticketId = parseInt(action.split('_')[2]);
    ctx.session = ctx.session || {};
    ctx.session.waitingForTicketReply = ticketId;
    return ctx.reply(`‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #${ticketId}:`);
  }

  if (action.startsWith('set_ticket_status_')) {
    console.log('Processing set_ticket_status action:', action); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
    const parts = action.split('_');
    if (parts.length < 4) {
      console.error('Invalid action format:', action);
      return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è', { show_alert: true });
    }
    const ticketId = parseInt(parts[2]);
    const status = parts[3];
    console.log('Parsed ticketId:', ticketId, 'status:', status); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥

    if (!ticketId || !['in_progress', 'closed'].includes(status)) {
      console.error('Invalid ticketId or status:', ticketId, status);
      return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ç–∏–∫–µ—Ç–∞ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å', { show_alert: true });
    }

    const updateResult = db.prepare('UPDATE tickets SET status = ? WHERE ticket_id = ?').run(status, ticketId);
    if (updateResult.changes === 0) {
      console.error('No ticket found for ticketId:', ticketId);
      return ctx.answerCbQuery('–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });
    }

    const ticket = db.prepare('SELECT * FROM tickets WHERE ticket_id = ?').get(ticketId);
    if (!ticket) {
      console.error('Failed to retrieve ticket after update:', ticketId);
      return ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞', { show_alert: true });
    }

    await ctx.telegram.sendMessage(
      ticket.user_id,
      `üìû –í–∞—à —Ç–∏–∫–µ—Ç #${ticketId} –æ–±–Ω–æ–≤–ª—ë–Ω. –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}`
    );
    await ctx.telegram.sendMessage(
      SUPPORT_CHANNEL,
      `üìû –¢–∏–∫–µ—Ç #${ticketId} (@${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}) –æ–±–Ω–æ–≤–ª—ë–Ω. –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}`
    );
    return ctx.answerCbQuery(`–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ #${ticketId} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "${status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}"`, { show_alert: true });
  }

  if (action === 'back') {
    await ctx.deleteMessage();
    return sendMainMenu(ctx);
  }
});

bot.on('message', async (ctx) => {
  const id = ctx.from.id;
  let user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);

  if (!user) {
    ctx.session.waitingForCode = false;
    ctx.session.broadcast = false;
    ctx.session.waitingForPromo = false;
    ctx.session.waitingForSupport = false;
    return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.');
  }

  if (ctx.session?.waitingForSupport) {
    const description = ctx.message.text || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
    const fileIds = [];

    if (ctx.message.photo) {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      fileIds.push(photo.file_id);
    }
    if (ctx.message.document) {
      fileIds.push(ctx.message.document.file_id);
    }

    const ticketId = db.prepare(`
      INSERT INTO tickets (user_id, username, description, created_at, file_id)
      VALUES (?, ?, ?, ?, ?)
    `).run(id, user.username || '–±–µ–∑ –Ω–∏–∫–∞', description, dayjs().toISOString(), JSON.stringify(fileIds)).lastInsertRowid;

    const ticketText =
      `üìû –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #${ticketId}\n` +
      `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
      `üÜî User ID: ${id}\n` +
      `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${description}\n` +
      `üìé –§–∞–π–ª—ã: ${fileIds.length > 0 ? fileIds.length + ' —à—Ç.' : '–ù–µ—Ç'}\n` +
      `üìÖ –°–æ–∑–¥–∞–Ω: ${dayjs().format('YYYY-MM-DD HH:mm:ss')}\n` +
      `üìå –°—Ç–∞—Ç—É—Å: –û—Ç–∫—Ä—ã—Ç`;

    await ctx.telegram.sendMessage(SUPPORT_CHANNEL, ticketText);
    if (fileIds.length > 0) {
      for (const fileId of fileIds) {
        await ctx.telegram.sendDocument(SUPPORT_CHANNEL, fileId, { caption: `–§–∞–π–ª –∏–∑ —Ç–∏–∫–µ—Ç–∞ #${ticketId}` });
      }
    }

    await ctx.telegram.sendMessage(ADMIN_ID, `üìû –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #${ticketId} –æ—Ç @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}`);
    ctx.session.waitingForSupport = false;
    return ctx.reply(`‚úÖ –¢–∏–∫–µ—Ç #${ticketId} —Å–æ–∑–¥–∞–Ω. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º —Å–∫–æ—Ä–æ!`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (ctx.session?.broadcast && id === ADMIN_ID) {
    const users = db.prepare('SELECT id FROM users').all();
    for (const u of users) {
      try {
        await bot.telegram.sendMessage(u.id, ctx.message.text);
      } catch {}
    }
    ctx.session.broadcast = false;
    return ctx.reply('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
  }

  if (ctx.session?.waitingForCode) {
    const code = ctx.message.text.trim();
    const promo = db.prepare('SELECT * FROM promo_codes WHERE code = ?').get(code);

    if (!promo) {
      ctx.session.waitingForCode = false;
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!');
    }

    if (promo.activations_left === 0) {
      ctx.session.waitingForCode = false;
      return ctx.reply('‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (–ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω).');
    }

    let usedBy = promo.used_by ? JSON.parse(promo.used_by) : [];

    if (usedBy.includes(id)) {
      ctx.session.waitingForCode = false;
      return ctx.reply('‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.');
    }

    db.prepare('UPDATE users SET stars = stars + ? WHERE id = ?').run(promo.reward, id);

    usedBy.push(id);
    const newActivationsLeft = promo.activations_left - 1;

    db.prepare('UPDATE promo_codes SET activations_left = ?, used_by = ? WHERE code = ?')
      .run(newActivationsLeft, JSON.stringify(usedBy), code);

    if (user.daily_task_type === 'promo_use' && !user.daily_task_completed) {
      db.prepare('UPDATE users SET daily_task_progress = 1, daily_task_completed = 1, stars = stars + ? WHERE id = ?').run(20, id);
      ctx.reply(`üéâ –ó–∞–¥–∞–Ω–∏–µ "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +20 –∑–≤—ë–∑–¥`);
    }

    ctx.session.waitingForCode = false;
    return ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! +${promo.reward} –∑–≤—ë–∑–¥`);
  }

  if (ctx.session?.waitingForPromo && id === ADMIN_ID) {
    const parts = ctx.message.text.trim().split(/\s+/);
    if (parts.length !== 3) {
      return ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–ö–û–î 10 5` (–≥–¥–µ 10 ‚Äî –∑–≤—ë–∑–¥—ã, 5 ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π)', { parse_mode: 'Markdown' });
    }
    const [code, rewardStr, activationsStr] = parts;
    const reward = parseInt(rewardStr);
    const activations = parseInt(activationsStr);

    if (!code || isNaN(reward) || isNaN(activations)) {
      return ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–ö–û–î 10 5` (–≥–¥–µ 10 ‚Äî –∑–≤—ë–∑–¥—ã, 5 ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π)', { parse_mode: 'Markdown' });
    }

    db.prepare('INSERT INTO promo_codes (code, reward, activations_left, used_by) VALUES (?, ?, ?, ?)')
      .run(code, reward, activations, JSON.stringify([]));

    ctx.session.waitingForPromo = false;
    return ctx.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ "${code}" –Ω–∞ ${reward} –∑–≤—ë–∑–¥ —Å –ª–∏–º–∏—Ç–æ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π ${activations} –¥–æ–±–∞–≤–ª–µ–Ω.`);
  }

  if (ctx.session?.waitingForTicketReply && id === ADMIN_ID) {
    const ticketId = ctx.session.waitingForTicketReply;
    const ticket = db.prepare('SELECT * FROM tickets WHERE ticket_id = ?').get(ticketId);
    if (!ticket) {
      ctx.session.waitingForTicketReply = false;
      return ctx.reply('‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    const replyText = ctx.message.text || '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞';
    const fileIds = [];
    if (ctx.message.photo) {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      fileIds.push(photo.file_id);
    }
    if (ctx.message.document) {
      fileIds.push(ctx.message.document.file_id);
    }

    await ctx.telegram.sendMessage(
      ticket.user_id,
      `üìû –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId}:\n${replyText}`
    );
    if (fileIds.length > 0) {
      for (const fileId of fileIds) {
        await ctx.telegram.sendDocument(ticket.user_id, fileId, { caption: `–§–∞–π–ª –∫ –æ—Ç–≤–µ—Ç—É –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId}` });
      }
    }

    await ctx.telegram.sendMessage(
      SUPPORT_CHANNEL,
      `üìû –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId} (@${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}):\n${replyText}\nüìé –§–∞–π–ª—ã: ${fileIds.length > 0 ? fileIds.length + ' —à—Ç.' : '–ù–µ—Ç'}`
    );

    ctx.session.waitingForTicketReply = false;
    return ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ö —Ç–∏–∫–µ—Ç–∞–º', 'admin_tickets')]
    ]));
  }
});

function registerUser(ctx) {
  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;

  const existing = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  if (!existing) {
    db.prepare('INSERT INTO users (id, username, referred_by) VALUES (?, ?, ?)').run(id, username, referral);

    if (referral && referral !== id) {
      db.prepare('UPDATE users SET stars = stars + 10 WHERE id = ?').run(referral);
      ctx.telegram.sendMessage(referral, `üéâ –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª @${username || '–±–µ–∑ –Ω–∏–∫–∞'} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! +10 –∑–≤—ë–∑–¥`);
    }
  }
}

if (!process.env.BOT_TOKEN) {
  console.error('–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}

bot.launch().then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')).catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err));