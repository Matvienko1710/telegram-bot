const { Telegraf, Markup } = require('telegraf');
const dayjs = require('dayjs');
require('dotenv').config();

const db = require('./db');

const bot = new Telegraf(process.env.BOT_TOKEN);

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('‚≠ê –§–∞—Ä–º', 'farm')],
    [Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
    [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
    [Markup.button.callback('üèÜ –õ–∏–¥–µ—Ä—ã', 'leaders')],
    [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')],
    [Markup.button.callback('üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'referral')],
  ]);
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function registerUser(ctx) {
  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;

  const existing = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  if (!existing) {
    db.prepare('INSERT INTO users (id, username, referred_by) VALUES (?, ?, ?)').run(id, username, referral);
    if (referral && referral !== id) {
      db.prepare('UPDATE users SET stars = stars + 10 WHERE id = ?').run(referral);
    }
  }
}

bot.start((ctx) => {
  registerUser(ctx);
  ctx.reply('üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–æ—Ç –º–µ–Ω—é:', getMainMenu());
});

bot.action('farm', async (ctx) => {
  const id = ctx.from.id;
  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  const now = Date.now();
  const cooldown = 60 * 1000;

  if (now - user.last_farm < cooldown) {
    const seconds = Math.ceil((cooldown - (now - user.last_farm)) / 1000);
    const msg = await ctx.reply(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${seconds} —Å–µ–∫.`);
    setTimeout(() => ctx.deleteMessage(msg.message_id), 5000);
    return;
  }

  db.prepare('UPDATE users SET stars = stars + 1, last_farm = ? WHERE id = ?').run(now, id);
  const msg = await ctx.reply('‚≠ê –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 1 –∑–≤–µ–∑–¥—É!');
  setTimeout(() => ctx.deleteMessage(msg.message_id), 5000);
});

bot.action('bonus', async (ctx) => {
  const id = ctx.from.id;
  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  const now = dayjs();
  const last = user.last_bonus ? dayjs(user.last_bonus) : null;

  if (last && now.diff(last, 'hour') < 24) {
    const hoursLeft = 24 - now.diff(last, 'hour');
    const msg = await ctx.reply(`üéÅ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ ${hoursLeft} —á.`);
    setTimeout(() => ctx.deleteMessage(msg.message_id), 5000);
    return;
  }

  db.prepare('UPDATE users SET stars = stars + 5, last_bonus = ? WHERE id = ?').run(now.toISOString(), id);
  const msg = await ctx.reply('üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +5 –∑–≤—ë–∑–¥!');
  setTimeout(() => ctx.deleteMessage(msg.message_id), 5000);
});

bot.action('profile', async (ctx) => {
  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(ctx.from.id);
  await ctx.reply(`üë§ –ü—Ä–æ—Ñ–∏–ª—å:
üÜî ID: ${user.id}
üí´ –ó–≤—ë–∑–¥—ã: ${user.stars}
üì£ –†–µ—Ñ: ${user.referred_by || '‚Äî'}`);
});

bot.action('leaders', async (ctx) => {
  const top = db.prepare('SELECT username, stars FROM users ORDER BY stars DESC LIMIT 10').all();
  const list = top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê`).join('\n');
  await ctx.reply(`üèÜ –¢–æ–ø 10:\n\n${list}`);
});

bot.action('stats', async (ctx) => {
  const total = db.prepare('SELECT COUNT(*) as count FROM users').get().count;
  const totalStars = db.prepare('SELECT SUM(stars) as stars FROM users').get().stars || 0;
  await ctx.reply(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}\n‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars}`);
});

bot.action('referral', async (ctx) => {
  const link = `https://t.me/${ctx.me}?start=${ctx.from.id}`;
  await ctx.reply(`üì© –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ +10 –∑–≤—ë–∑–¥ –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\nüîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n${link}`);
});

// –ó–∞–ø—É—Å–∫
bot.launch().then(() => {
  console.log('ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
});