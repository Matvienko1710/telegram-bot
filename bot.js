if (!process.env.BOT_TOKEN) {
  console.error('–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!');
  process.exit(1);
}

const { Telegraf, Markup, session } = require('telegraf');
const dayjs = require('dayjs');
require('dotenv').config();

const db = require('./db');
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());

// –°—Å—ã–ª–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
const REQUIRED_CHANNEL = process.env.REQUIRED_CHANNEL || '@magnumtap';
const TASK_CHANNEL = process.env.TASK_CHANNEL || '@musice46';
const TASK_CHANNEL_KITTY = process.env.TASK_CHANNEL_KITTY || '@kittyyyyywwr';
const TASK_BOT_LINK = process.env.TASK_BOT_LINK || 'https://t.me/firestars_rbot';
const ADMIN_IDS = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id)) : [6587897295];
const SUPPORT_CHANNEL = process.env.SUPPORT_CHANNEL || '@magnumsupported';
const FARM_COOLDOWN_SECONDS = parseInt(process.env.FARM_COOLDOWN_SECONDS) || 60;
const MESSAGE_TTL = 15000;
const BOT_NAME = process.env.BOT_NAME || 'MagnumTapBot';

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
const utils = {
  async sendOrEditMessage(ctx, text, keyboard, userId) {
    const user = db.get('SELECT last_menu_message_id FROM users WHERE id = ?', [userId]);
    try {
      if (user?.last_menu_message_id && ctx.chat?.id) {
        await ctx.telegram.editMessageText(ctx.chat.id, user.last_menu_message_id, undefined, text, { parse_mode: 'HTML', ...keyboard });
        return user.last_menu_message_id;
      } else {
        const message = await ctx.reply(text, { parse_mode: 'HTML', ...keyboard });
        db.run('UPDATE users SET last_menu_message_id = ? WHERE id = ?', [message.message_id, userId]);
        return message.message_id;
      }
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${userId}:`, err);
      const message = await ctx.reply(text, { parse_mode: 'HTML', ...keyboard });
      db.run('UPDATE users SET last_menu_message_id = ? WHERE id = ?', [message.message_id, userId]);
      return message.message_id;
    }
  },
  async sendMainMenu(ctx, userId) {
    const user = db.get('SELECT * FROM users WHERE id = ?', [userId]);
    if (!user) {
      const msg = await ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ ${BOT_NAME}.`);
      utils.deleteNotification(ctx, msg.message_id);
      return;
    }
    const stars = user.stars || 0;
    const invited = db.get('SELECT COUNT(*) as count FROM users WHERE referred_by = ?', [userId]).count || 0;
    const messageText =
      `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ${BOT_NAME}!</b> üåü\n\n` +
      `–¢—ã –≤ –∏–≥—Ä–µ, –≥–¥–µ –º–æ–∂–Ω–æ <i>–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã</i> ‚ú®, –≤—ã–ø–æ–ª–Ω—è—è –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π –∏ —Å–æ–±–∏—Ä–∞—è –±–æ–Ω—É—Å—ã! üöÄ\n\n` +
      `üí´ <b>–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> ${stars} –∑–≤—ë–∑–¥\n` +
      `üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> ${invited}\n\n` +
      `–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Å—Ç–∞–Ω—å –∑–≤–µ–∑–¥–æ–π ${BOT_NAME}! üåü\n` +
      `<i>–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –±–æ—Ç—É!</i>`;
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚≠ê –§–∞—Ä–º –∑–≤—ë–∑–¥', 'farm'),
        Markup.button.callback('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', 'bonus')
      ],
      [
        Markup.button.callback('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'profile'),
        Markup.button.callback('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'leaders')
      ],
      [
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats'),
        Markup.button.callback('üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'ref')
      ],
      [Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è', 'tasks')],
      [Markup.button.callback('üí° –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', 'enter_code')],
      [Markup.button.callback('‚ùì FAQ', 'faq')],
      [Markup.button.callback('üèÖ –¢–∏—Ç—É–ª—ã', 'titles')],
      ADMIN_IDS.includes(userId) ? [Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin')] : []
    ]);
    await utils.sendOrEditMessage(ctx, messageText, keyboard, userId);
  },
  async deleteNotification(ctx, messageId) {
    if (messageId && Number.isInteger(messageId)) {
      setTimeout(async () => {
        try {
          await ctx.telegram.deleteMessage(ctx.chat.id, messageId);
        } catch (err) {
          if (err.response?.error_code !== 400) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err);
          }
        }
      }, MESSAGE_TTL);
    }
  },
  updateUserTitle(ctx, userId) {
    const user = db.get('SELECT * FROM users WHERE id = ?', [userId]);
    if (!user) {
      console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏—Ç—É–ª–∞`);
      return;
    }
    const stars = user.stars || 0;
    const referrals = db.get('SELECT COUNT(*) as count FROM users WHERE referred_by = ?', [userId]).count || 0;
    const completedTasks = db.get('SELECT COUNT(*) as count FROM user_tasks WHERE user_id = ? AND completed = 1', [userId]).count || 0;
    const promoCodesUsed = db.get('SELECT COUNT(*) as count FROM promo_codes WHERE used_by LIKE ?', [`%${userId}%`]).count || 0;
    const dailyStreak = user.daily_streak || 0;

    const titles = db.all('SELECT * FROM titles WHERE is_secret = 0 ORDER BY condition_value DESC', []);
    let newTitle = null;
    for (const title of titles) {
      let achieved = false;
      switch (title.condition_type) {
        case 'stars':
          if (stars >= parseInt(title.condition_value)) achieved = true;
          break;
        case 'referrals':
          if (referrals >= parseInt(title.condition_value)) achieved = true;
          break;
        case 'tasks':
          if (completedTasks >= parseInt(title.condition_value)) achieved = true;
          break;
        case 'daily_streak':
          if (dailyStreak >= parseInt(title.condition_value)) achieved = true;
          break;
        case 'promo_codes':
          if (promoCodesUsed >= parseInt(title.condition_value)) achieved = true;
          break;
      }
      if (achieved && (!user.title_id || parseInt(title.condition_value) > parseInt(db.get('SELECT condition_value FROM titles WHERE id = ?', [user.title_id])?.condition_value || 0))) {
        newTitle = title;
        break;
      }
    }

    if (newTitle && newTitle.id !== user.title_id) {
      db.run('UPDATE users SET title_id = ? WHERE id = ?', [newTitle.id, userId]);
      ctx.telegram.sendMessage(
        userId,
        `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø–æ–ª—É—á–∏–ª —Ç–∏—Ç—É–ª <b>${newTitle.name}</b>! üåü\n\n<i>${newTitle.description}</i>`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]]) }
      ).catch(err => console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–∏—Ç—É–ª–µ –¥–ª—è ${userId}:`, err));
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ª—É—á–∏–ª —Ç–∏—Ç—É–ª "${newTitle.name}" (–æ–ø–∏—Å–∞–Ω–∏–µ: "${newTitle.description}")`);
    }
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async function isUserSubscribed(ctx, channel = REQUIRED_CHANNEL) {
  try {
    const status = await ctx.telegram.getChatMember(channel, ctx.from.id);
    return ['member', 'creator', 'administrator'].includes(status.status);
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${channel}:`, err);
    return false;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function getTopUsers(limit = 10) {
  return db.all(`
    SELECT 
      u.username, 
      u.stars, 
      (SELECT COUNT(*) FROM users WHERE referred_by = u.id) AS referrals,
      t.name AS title_name
    FROM users u
    LEFT JOIN titles t ON u.title_id = t.id
    ORDER BY u.stars DESC 
    LIMIT ?
  `, [limit]);
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(async (ctx, next) => {
  ctx.session = ctx.session || {};
  ctx.session.previousScreen = ctx.session.previousScreen || null;
  const id = ctx.from.id;
  const user = db.get('SELECT * FROM users WHERE id = ?', [id]);
  if (!user && ctx.updateType === 'message' && ctx.message?.text !== '/start') {
    const msg = await ctx.reply(`‚ùå –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ ${BOT_NAME}! üöÄ`, {
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([[Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]])
    });
    utils.deleteNotification(ctx, msg.message_id);
    return;
  }
  return next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  ctx.session = ctx.session || {};
  ctx.session.currentTaskIndex = 0;
  ctx.session.waitingFor = {};
  ctx.session.previousScreen = null;

  const id = ctx.from.id;
  const username = ctx.from.username || ctx.from.first_name || '–±–µ–∑ –Ω–∏–∫–∞';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
  const subscribed = await isUserSubscribed(ctx);
  if (!subscribed) {
    ctx.session.previousScreen = 'start';
    const msg = await ctx.reply(
      `üîí <b>–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n` +
      `üì¢ –≠—Ç–æ —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –∑–≤—ë–∑–¥–∞–º ${BOT_NAME}! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ ${REQUIRED_CHANNEL} –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è! üåü`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${REQUIRED_CHANNEL.replace('@', '')}`)],
          [Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_sub')]
        ])
      }
    );
    utils.deleteNotification(ctx, msg.message_id);
    return;
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const existing = db.get('SELECT * FROM users WHERE id = ?', [id]);
  if (!existing) {
    db.run('INSERT INTO users (id, username, referred_by, stars, daily_streak) VALUES (?, ?, ?, ?, ?)', [id, username, referral, 0, 0]);
    if (referral && referral !== id) {
      const referrerExists = db.get('SELECT * FROM users WHERE id = ?', [referral]);
      if (referrerExists) {
        db.run('UPDATE users SET stars = stars + 10 WHERE id = ?', [referral]);
        ctx.telegram.sendMessage(
          referral,
          `üéâ –¢–≤–æ–π –¥—Ä—É–≥ @${username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ ${BOT_NAME}! +10 –∑–≤—ë–∑–¥! üåü`,
          { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]]) }
        ).catch(err => console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ ${referral}:`, err));
        utils.updateUserTitle(ctx, referral);
      }
    }
  }

  await utils.sendMainMenu(ctx, id);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.command('help', async (ctx) => {
  const id = ctx.from.id;
  const user = db.get('SELECT * FROM users WHERE id = ?', [id]);
  if (!user) {
    const msg = await ctx.reply(`‚ùå –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ ${BOT_NAME}! üöÄ`, {
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([[Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]])
    });
    utils.deleteNotification(ctx, msg.message_id);
    return;
  }
  ctx.session.previousScreen = 'main';
  const helpText =
    `üåü <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ ${BOT_NAME}</b> ‚ú®\n\n` +
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç, –≥–¥–µ —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –∑–≤—ë–∑–¥—ã ‚ú® –∏ —Å–æ—Ä–µ–≤–Ω—É–µ—à—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏! –í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å:\n\n` +
    `‚≠ê <b>–§–∞—Ä–º –∑–≤—ë–∑–¥</b>: –ù–∞–∂–∏–º–∞–π "–§–∞—Ä–º" –∫–∞–∂–¥—ã–µ ${FARM_COOLDOWN_SECONDS} —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ª—É—á–∞–π +1 –∑–≤–µ–∑–¥—É!\n` +
    `üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</b>: –†–∞–∑ –≤ 24 —á–∞—Å–∞ –ø–æ–ª—É—á–∞–π +5 –∑–≤—ë–∑–¥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n` +
    `üìã <b>–ó–∞–¥–∞–Ω–∏—è</b>: –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–π –±–æ—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –ø–æ–ª—É—á–∞–π –¥–æ 10 –∑–≤—ë–∑–¥!\n` +
    `üë• <b>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π</b>: –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ, +10 –∑–≤—ë–∑–¥!\n` +
    `üí° <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã</b>: –í–≤–æ–¥–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–≤—ë–∑–¥.\n` +
    `üèÖ <b>–¢–∏—Ç—É–ª—ã</b>: –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã, –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫—Ä—É—Ç—ã–µ —Ç–∏—Ç—É–ª—ã!\n` +
    `üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>: –ü–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ—è—Å–Ω–æ, ‚Äî –æ—Ç–≤–µ—Ç–∏–º –±—ã—Å—Ç—Ä–æ!\n\n` +
    `üèÜ –°–º–æ—Ç—Ä–∏ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Å—è –∑–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ!\n` +
    `üîç –ò—Å–ø–æ–ª—å–∑—É–π –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.\n\n` +
    `<i>–ü–æ–¥—Å–∫–∞–∑–∫–∞: —á–∞—â–µ –ø—Ä–æ–≤–µ—Ä—è–π –∑–∞–¥–∞–Ω–∏—è ‚Äî –Ω–æ–≤—ã–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ!</i>`;
  const msg = await ctx.reply(helpText, {
    parse_mode: 'HTML',
    ...Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
    ])
  });
  utils.deleteNotification(ctx, msg.message_id);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (ctx) => {
  ctx.session = ctx.session || {};
  const id = ctx.from.id;
  const now = Date.now();
  const action = ctx.callbackQuery.data;
  let user = db.get('SELECT * FROM users WHERE id = ?', [id]);

  if (!user && action !== 'check_sub') {
    await ctx.answerCbQuery(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–∞–ø–∏—à–∏ /start –≤ ${BOT_NAME}.`, { show_alert: true });
    return;
  }

  try {
    if (action === 'check_sub') {
      const subscribed = await isUserSubscribed(ctx);
      if (!subscribed) {
        await ctx.answerCbQuery(`‚ùå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ ${REQUIRED_CHANNEL} –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ ${BOT_NAME}!`, { show_alert: true });
        return;
      }
      const existing = db.get('SELECT * FROM users WHERE id = ?', [id]);
      if (!existing) {
        const username = ctx.from.username || ctx.from.first_name || '–±–µ–∑ –Ω–∏–∫–∞';
        const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;
        db.run('INSERT INTO users (id, username, referred_by, stars, daily_streak) VALUES (?, ?, ?, ?, ?)', [id, username, referral, 0, 0]);
        if (referral && referral !== id) {
          const referrerExists = db.get('SELECT * FROM users WHERE id = ?', [referral]);
          if (referrerExists) {
            db.run('UPDATE users SET stars = stars + 10 WHERE id = ?', [referral]);
            ctx.telegram.sendMessage(
              referral,
              `üéâ –¢–≤–æ–π –¥—Ä—É–≥ @${username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ ${BOT_NAME}! +10 –∑–≤—ë–∑–¥! üåü`,
              { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]]) }
            ).catch(err => console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ ${referral}:`, err));
            utils.updateUserTitle(ctx, referral);
          }
        }
      }
      await utils.sendMainMenu(ctx, id);
      await ctx.answerCbQuery('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', { show_alert: true });
      return;
    }

    if (action === 'farm') {
      const cooldown = FARM_COOLDOWN_SECONDS * 1000;
      if (now - user.last_farm < cooldown) {
        const seconds = Math.ceil((cooldown - (now - user.last_farm)) / 1000);
        await ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏ ${seconds} —Å–µ–∫. –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞!`, { show_alert: true });
        return;
      }
      db.run('UPDATE users SET stars = stars + 1, last_farm = ? WHERE id = ?', [now, id]);
      user = db.get('SELECT * FROM users WHERE id = ?', [id]);
      utils.updateUserTitle(ctx, id);
      await utils.sendMainMenu(ctx, id);
      await ctx.answerCbQuery(`‚≠ê +1 –∑–≤–µ–∑–¥–∞! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.stars} –∑–≤—ë–∑–¥.`, { show_alert: true });
      return;
    }

    if (action === 'bonus') {
      const nowDay = dayjs();
      const last = user.last_bonus ? dayjs(user.last_bonus) : null;
      if (last && nowDay.diff(last, 'hour') < 24) {
        const hoursLeft = 24 - nowDay.diff(last, 'hour');
        const minutesLeft = Math.ceil((24 * 60 - nowDay.diff(last, 'minute')) % 60);
        await ctx.answerCbQuery(`üéÅ –ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${hoursLeft} —á. ${minutesLeft} –º–∏–Ω.`, { show_alert: true });
        return;
      }
      const dailyStreak = last && nowDay.diff(last, 'day') === 1 ? user.daily_streak + 1 : 1;
      db.run('UPDATE users SET stars = stars + 5, last_bonus = ?, daily_streak = ? WHERE id = ?', [nowDay.toISOString(), dailyStreak, id]);
      user = db.get('SELECT * FROM users WHERE id = ?', [id]);
      utils.updateUserTitle(ctx, id);
      await utils.sendMainMenu(ctx, id);
      await ctx.answerCbQuery(`üéâ +5 –∑–≤—ë–∑–¥! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.stars} –∑–≤—ë–∑–¥.`, { show_alert: true });
      return;
    }

    if (action === 'tasks' || action === 'next_task') {
      ctx.session.previousScreen = 'main';
      ctx.session.currentTaskIndex = action === 'next_task' ? (ctx.session.currentTaskIndex || 0) + 1 : ctx.session.currentTaskIndex || 0;
      const tasks = db.all('SELECT * FROM tasks', []);
      if (tasks.length === 0) {
        await utils.sendOrEditMessage(
          ctx,
          `üìã <b>–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç!</b>\n\n<i>–ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è, —Å–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ ${BOT_NAME}!</i>`,
          Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ]),
          id
        );
        await ctx.answerCbQuery();
        return;
      }
      const taskIndex = ctx.session.currentTaskIndex % tasks.length;
      const task = tasks[taskIndex];
      const userTask = db.get('SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ?', [id, task.id]) || { progress: 0, completed: 0 };
      const taskStatus = userTask.completed ? '‚úÖ <i>–í—ã–ø–æ–ª–Ω–µ–Ω–æ</i>' : userTask.progress > 0 ? '‚è≥ <i>–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</i>' : 'üî• <i>–ù–µ –Ω–∞—á–∞—Ç–æ</i>';
      const buttons = [
        [
          task.type === 'subscribe_channel' || task.type === 'subscribe_channel_kittyyyyywwr'
            ? Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${(task.type === 'subscribe_channel' ? TASK_CHANNEL : TASK_CHANNEL_KITTY).replace('@', '')}`)
            : Markup.button.url('ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞', TASK_BOT_LINK),
          Markup.button.callback('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç', `check_task_${task.id}`)
        ],
        [Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', 'next_task')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
      ];
      const messageText =
        `üìã <b>–ó–∞–¥–∞–Ω–∏–µ #${taskIndex + 1}/${tasks.length}</b>\n\n` +
        `üéØ <b>${task.description}</b>\n` +
        `üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> ${task.reward} –∑–≤—ë–∑–¥\n` +
        `üìå <b>–°—Ç–∞—Ç—É—Å:</b> ${taskStatus}\n\n` +
        `<i>–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!</i>`;
      await utils.sendOrEditMessage(ctx, messageText, Markup.inlineKeyboard(buttons), id);
      await ctx.answerCbQuery();
      return;
    }

    if (action.startsWith('check_task_')) {
      const taskId = parseInt(action.split('_')[2]);
      const task = db.get('SELECT * FROM tasks WHERE id = ?', [taskId]);
      if (!task) {
        await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!', { show_alert: true });
        return;
      }
      const userTask = db.get('SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ?', [id, task.id]) || { progress: 0, completed: 0 };
      if (userTask.completed) {
        await ctx.answerCbQuery(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü–µ—Ä–µ–π–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤ ${BOT_NAME}! üåü`, { show_alert: true });
        return;
      }
      if (userTask.progress > 0) {
        await ctx.answerCbQuery('‚è≥ –ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤! üïí', { show_alert: true });
        return;
      }
      ctx.session.waitingFor = { type: 'task_screenshot', taskId };
      ctx.session.previousScreen = 'tasks';
      const msg = await ctx.reply(
        'üì∏ <b>–û—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç</b>\n\n' +
        '–°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å—é–¥–∞! üì∑',
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'faq') {
      ctx.session.previousScreen = 'main';
      const faqText =
        `‚ùì <b>FAQ ${BOT_NAME}</b>\n\n` +
        `üìå <b>–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã?</b>\n` +
        `- –ù–∞–∂–∏–º–∞–π "–§–∞—Ä–º –∑–≤—ë–∑–¥" –∫–∞–∂–¥—ã–µ ${FARM_COOLDOWN_SECONDS} —Å–µ–∫—É–Ω–¥ (+1 –∑–≤–µ–∑–¥–∞).\n` +
        `- –ó–∞–±–∏—Ä–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —Ä–∞–∑ –≤ 24 —á–∞—Å–∞ (+5 –∑–≤—ë–∑–¥).\n` +
        `- –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è (–ø–æ–¥–ø–∏—Å–∫–∏, –∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π —Å–∫—Ä–∏–Ω—à–æ—Ç—ã.\n` +
        `- –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ (+10 –∑–≤—ë–∑–¥ –∑–∞ –¥—Ä—É–≥–∞).\n` +
        `- –ê–∫—Ç–∏–≤–∏—Ä—É–π –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –±–æ–Ω—É—Å–æ–≤.\n\n` +
        `üèÖ <b>–ß—Ç–æ –¥–∞—é—Ç —Ç–∏—Ç—É–ª—ã?</b>\n` +
        `–¢–∏—Ç—É–ª—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç—É—Å –≤ ${BOT_NAME}. –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã, –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–µ!\n\n` +
        `üìû <b>–ü—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?</b>\n` +
        `–ü–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –º—ã –æ—Ç–≤–µ—Ç–∏–º –±—ã—Å—Ç—Ä–æ!\n\n` +
        `<i>–ï—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã? –°–æ–∑–¥–∞–π —Ç–∏–∫–µ—Ç, –∏ –º—ã –ø–æ–º–æ–∂–µ–º!</i>`;
      await utils.sendOrEditMessage(
        ctx,
        faqText,
        Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ]),
        id
      );
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'titles') {
      ctx.session.previousScreen = 'main';
      const titles = db.all('SELECT * FROM titles WHERE is_secret = 0', []);
      const userTitle = user.title_id ? db.get('SELECT * FROM titles WHERE id = ?', [user.title_id]) : null;
      const titleList = titles.length > 0
        ? titles.map(t => `üèÖ <b>${t.name}</b> (${t.description})${user.title_id === t.id ? ' ‚úÖ' : ''}`).join('\n')
        : 'üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤.';
      const messageText =
        `üèÖ <b>–¢–∏—Ç—É–ª—ã ${BOT_NAME}</b>\n\n` +
        `–¢–µ–∫—É—â–∏–π —Ç–∏—Ç—É–ª: ${userTitle ? `<b>${userTitle.name}</b> (${userTitle.description})` : '–ù–µ—Ç —Ç–∏—Ç—É–ª–∞'}\n\n` +
        `–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã:\n${titleList}\n\n` +
        `<i>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã, –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–µ —Ç–∏—Ç—É–ª—ã!</i>`;
      await utils.sendOrEditMessage(
        ctx,
        messageText,
        Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ]),
        id
      );
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'profile') {
      ctx.session.previousScreen = 'main';
      const invited = db.get('SELECT COUNT(*) as count FROM users WHERE referred_by = ?', [id]).count || 0;
      const referredByUser = user.referred_by ? db.get('SELECT username FROM users WHERE id = ?', [user.referred_by]) : null;
      const referrerName = referredByUser ? `@${referredByUser.username || '–±–µ–∑ –Ω–∏–∫–∞'}` : '‚Äî';
      const displayName = ctx.from.first_name || '–ê–Ω–æ–Ω–∏–º';
      const title = user.title_id ? db.get('SELECT name, description FROM titles WHERE id = ?', [user.title_id]) : null;
      const titleText = title ? `${title.name} (${title.description})` : '–ù–µ—Ç —Ç–∏—Ç—É–ª–∞';
      const completedTasks = db.all('SELECT t.description FROM user_tasks ut JOIN tasks t ON ut.task_id = t.id WHERE ut.user_id = ? AND ut.completed = 1', [id]);
      const nowDay = dayjs();
      const lastBonus = user.last_bonus ? dayjs(user.last_bonus) : null;
      const bonusStatus = lastBonus && nowDay.diff(lastBonus, 'hour') < 24
        ? `‚è≥ –î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ ${24 - nowDay.diff(lastBonus, 'hour')} —á. ${Math.ceil((24 * 60 - nowDay.diff(lastBonus, 'minute')) % 60)} –º–∏–Ω.`
        : '‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ!';
      const profileText =
        `üåü <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ ${BOT_NAME}</b> ‚ú®\n\n` +
        `üë§ <b>–ò–º—è:</b> ${displayName}\n` +
        `üèÖ <b>–¢–∏—Ç—É–ª:</b> ${titleText}\n` +
        `üÜî <b>ID:</b> ${user.id}\n` +
        `üí´ <b>–ó–≤—ë–∑–¥—ã:</b> ${user.stars} ‚ú®\n` +
        `üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> ${invited}\n` +
        `üì£ <b>–¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª:</b> ${referrerName}\n` +
        `üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å:</b> ${bonusStatus}\n` +
        `üìã <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b> ${completedTasks.length > 0 ? completedTasks.map(t => t.description).join(', ') : '–ù–µ—Ç'}\n\n` +
        `<i>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥ –∏ —Å—Ç–∞–Ω—å –ª–µ–≥–µ–Ω–¥–æ–π ${BOT_NAME}!</i>`;
      await utils.sendOrEditMessage(
        ctx,
        profileText,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚ùì FAQ', 'faq'), Markup.button.callback('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ]),
        id
      );
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'support') {
      ctx.session.previousScreen = 'profile';
      ctx.session.waitingFor = { type: 'support' };
      const msg = await ctx.reply(
        `üìû <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ${BOT_NAME}</b>\n\n` +
        '–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ! üöÄ',
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'cancel_input') {
      ctx.session.waitingFor = {};
      const previousScreen = ctx.session.previousScreen || 'main';
      ctx.session.previousScreen = null;
      if (previousScreen === 'main') {
        await utils.sendMainMenu(ctx, id);
      } else if (previousScreen === 'tasks') {
        ctx.session.currentTaskIndex = ctx.session.currentTaskIndex || 0;
        const tasks = db.all('SELECT * FROM tasks', []);
        if (tasks.length === 0) {
          await utils.sendOrEditMessage(
            ctx,
            `üìã <b>–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç!</b>\n\n<i>–ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è, —Å–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ ${BOT_NAME}!</i>`,
            Markup.inlineKeyboard([
              [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
            ]),
            id
          );
        } else {
          const taskIndex = ctx.session.currentTaskIndex % tasks.length;
          const task = tasks[taskIndex];
          const userTask = db.get('SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ?', [id, task.id]) || { progress: 0, completed: 0 };
          const taskStatus = userTask.completed ? '‚úÖ <i>–í—ã–ø–æ–ª–Ω–µ–Ω–æ</i>' : userTask.progress > 0 ? '‚è≥ <i>–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</i>' : 'üî• <i>–ù–µ –Ω–∞—á–∞—Ç–æ</i>';
          const buttons = [
            [
              task.type === 'subscribe_channel' || task.type === 'subscribe_channel_kittyyyyywwr'
                ? Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${(task.type === 'subscribe_channel' ? TASK_CHANNEL : TASK_CHANNEL_KITTY).replace('@', '')}`)
                : Markup.button.url('ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞', TASK_BOT_LINK),
              Markup.button.callback('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç', `check_task_${task.id}`)
            ],
            [Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', 'next_task')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ];
          const messageText =
            `üìã <b>–ó–∞–¥–∞–Ω–∏–µ #${taskIndex + 1}/${tasks.length}</b>\n\n` +
            `üéØ <b>${task.description}</b>\n` +
            `üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> ${task.reward} –∑–≤—ë–∑–¥\n` +
            `üìå <b>–°—Ç–∞—Ç—É—Å:</b> ${taskStatus}\n\n` +
            `<i>–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!</i>`;
          await utils.sendOrEditMessage(ctx, messageText, Markup.inlineKeyboard(buttons), id);
        }
      } else if (previousScreen === 'profile') {
        const invited = db.get('SELECT COUNT(*) as count FROM users WHERE referred_by = ?', [id]).count || 0;
        const referredByUser = user.referred_by ? db.get('SELECT username FROM users WHERE id = ?', [user.referred_by]) : null;
        const referrerName = referredByUser ? `@${referredByUser.username || '–±–µ–∑ –Ω–∏–∫–∞'}` : '‚Äî';
        const displayName = ctx.from.first_name || '–ê–Ω–æ–Ω–∏–º';
        const title = user.title_id ? db.get('SELECT name, description FROM titles WHERE id = ?', [user.title_id]) : null;
        const titleText = title ? `${title.name} (${title.description})` : '–ù–µ—Ç —Ç–∏—Ç—É–ª–∞';
        const completedTasks = db.all('SELECT t.description FROM user_tasks ut JOIN tasks t ON ut.task_id = t.id WHERE ut.user_id = ? AND ut.completed = 1', [id]);
        const nowDay = dayjs();
        const lastBonus = user.last_bonus ? dayjs(user.last_bonus) : null;
        const bonusStatus = lastBonus && nowDay.diff(lastBonus, 'hour') < 24
          ? `‚è≥ –î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ ${24 - nowDay.diff(lastBonus, 'hour')} —á. ${Math.ceil((24 * 60 - nowDay.diff(lastBonus, 'minute')) % 60)} –º–∏–Ω.`
          : '‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ!';
        const profileText =
          `üåü <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ ${BOT_NAME}</b> ‚ú®\n\n` +
          `üë§ <b>–ò–º—è:</b> ${displayName}\n` +
          `üèÖ <b>–¢–∏—Ç—É–ª:</b> ${titleText}\n` +
          `üÜî <b>ID:</b> ${user.id}\n` +
          `üí´ <b>–ó–≤—ë–∑–¥—ã:</b> ${user.stars} ‚ú®\n` +
          `üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> ${invited}\n` +
          `üì£ <b>–¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª:</b> ${referrerName}\n` +
          `üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å:</b> ${bonusStatus}\n` +
          `üìã <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b> ${completedTasks.length > 0 ? completedTasks.map(t => t.description).join(', ') : '–ù–µ—Ç'}\n\n` +
          `<i>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥ –∏ —Å—Ç–∞–Ω—å –ª–µ–≥–µ–Ω–¥–æ–π ${BOT_NAME}!</i>`;
        await utils.sendOrEditMessage(
          ctx,
          profileText,
          Markup.inlineKeyboard([
            [Markup.button.callback('‚ùì FAQ', 'faq'), Markup.button.callback('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ]),
          id
        );
      } else if (previousScreen === 'admin') {
        await utils.sendOrEditMessage(
          ctx,
          `‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ${BOT_NAME}</b> üîí\n\n–£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º –∏ —Å–ª–µ–¥–∏ –∑–∞ –∑–≤—ë–∑–¥–∞–º–∏! üåü`,
          Markup.inlineKeyboard([
            [Markup.button.callback('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
            [Markup.button.callback('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'admin_top')],
            [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
            [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
            [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'admin_addtask')],
            [Markup.button.callback('üìû –¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏', 'admin_tickets')],
            [Markup.button.callback('‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥–∞–º–∏', 'admin_stars')],
            [Markup.button.callback('üèÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏', 'admin_titles')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ]),
          id
        );
      } else if (previousScreen === 'admin_tickets') {
        const tickets = db.all('SELECT * FROM tickets WHERE status IN (?, ?) ORDER BY created_at DESC LIMIT 10', ['open', 'in_progress']);
        const buttons = tickets.length > 0
          ? tickets.map(ticket => {
              const type = ticket.task_type
                ? `üìã –ó–∞—è–≤–∫–∞ (${ticket.task_type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL}` : ticket.task_type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL_KITTY}` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'})`
                : 'üìû –¢–∏–∫–µ—Ç';
              return [Markup.button.callback(
                `${type} #${ticket.ticket_id} (@${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}, ${ticket.status === 'open' ? '–û—Ç–∫—Ä—ã—Ç' : '–í —Ä–∞–±–æ—Ç–µ'})`,
                `ticket_${ticket.ticket_id}`
              )];
            }).concat([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]])
          : [[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]];
        await utils.sendOrEditMessage(
          ctx,
          `üìû <b>–¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏</b>\n\n` +
          (tickets.length > 0 ? `–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: üîç` : `üòî –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∏–ª–∏ –∑–∞—è–≤–æ–∫.`),
          Markup.inlineKeyboard(buttons),
          id
        );
      } else {
        await utils.sendMainMenu(ctx, id);
      }
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'leaders') {
      ctx.session.previousScreen = 'main';
      const top = getTopUsers();
      const list = top.length > 0
        ? top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ${u.title_name ? `(${u.title_name})` : ''} ‚Äî ${u.stars} ‚≠ê ‚Äî –¥—Ä—É–∑–µ–π: ${u.referrals}`).join('\n')
        : 'üòî –ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤. –ë—É–¥—å –ø–µ—Ä–≤—ã–º! üöÄ';
      await utils.sendOrEditMessage(
        ctx,
        `üèÜ <b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ ${BOT_NAME}</b> üåü\n\n${list}\n\n<i>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!</i>`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ]),
        id
      );
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'stats') {
      ctx.session.previousScreen = 'main';
      const total = db.get('SELECT COUNT(*) as count FROM users').count || 0;
      const totalStars = db.get('SELECT SUM(stars) as stars FROM users').stars || 0;
      const completedTasks = db.get('SELECT COUNT(*) as count FROM user_tasks WHERE completed = 1').count || 0;
      await utils.sendOrEditMessage(
        ctx,
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${BOT_NAME}</b> ‚ú®\n\n` +
        `üë• <b>–ò–≥—Ä–æ–∫–æ–≤:</b> ${total}\n` +
        `‚≠ê <b>–í—Å–µ–≥–æ –∑–≤—ë–∑–¥:</b> ${totalStars}\n` +
        `üìã <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:</b> ${completedTasks}\n\n` +
        `<i>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–π –∑–≤—ë–∑–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ!</i>`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ]),
        id
      );
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'ref') {
      ctx.session.previousScreen = 'main';
      const link = `https://t.me/${ctx.me}?start=${ctx.from.id}`;
      await utils.sendOrEditMessage(
        ctx,
        `üì© <b>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –≤ ${BOT_NAME}!</b> üë•\n\n` +
        `–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<a href="${link}">${link}</a>\n\n` +
        `–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ, —Ç—ã –ø–æ–ª—É—á–∏—à—å <b>+10 –∑–≤—ë–∑–¥</b>! üåü\n` +
        `<i>–î–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –ª–∏–¥–µ—Ä–æ–º!</i>`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ]),
        id
      );
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'enter_code') {
      ctx.session.previousScreen = 'main';
      ctx.session.waitingFor = { type: 'promo_code' };
      const msg = await ctx.reply(
        `üí° <b>–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n` +
        `–û—Ç–ø—Ä–∞–≤—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –∑–≤—ë–∑–¥—ã –≤ ${BOT_NAME}! ‚ú®`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'admin') {
      if (!ADMIN_IDS.includes(id)) {
        await ctx.answerCbQuery(`‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ${BOT_NAME}!`, { show_alert: true });
        return;
      }
      ctx.session.previousScreen = 'main';
      await utils.sendOrEditMessage(
        ctx,
        `‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ${BOT_NAME}</b> üîí\n\n–£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º –∏ —Å–ª–µ–¥–∏ –∑–∞ –∑–≤—ë–∑–¥–∞–º–∏! üåü`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
          [Markup.button.callback('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'admin_top')],
          [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
          [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
          [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'admin_addtask')],
          [Markup.button.callback('üìû –¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏', 'admin_tickets')],
          [Markup.button.callback('‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥–∞–º–∏', 'admin_stars')],
          [Markup.button.callback('üèÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏', 'admin_titles')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ]),
        id
      );
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'admin_stats') {
      const total = db.get('SELECT COUNT(*) as count FROM users').count || 0;
      const totalStars = db.get('SELECT SUM(stars) as stars FROM users').stars || 0;
      const openTickets = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['open']).count || 0;
      const inProgressTickets = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['in_progress']).count || 0;
      const closedTickets = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['closed']).count || 0;
      const approvedTasks = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['approved']).count || 0;
      const rejectedTasks = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['rejected']).count || 0;
      await ctx.answerCbQuery(
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${BOT_NAME}</b>\n\n` +
        `üë• –ò–≥—Ä–æ–∫–æ–≤: ${total}\n` +
        `‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars}\n` +
        `üìû –¢–∏–∫–µ—Ç—ã: –û—Ç–∫—Ä—ã—Ç–æ: ${openTickets} | –í —Ä–∞–±–æ—Ç–µ: ${inProgressTickets} | –ó–∞–∫—Ä—ã—Ç–æ: ${closedTickets}\n` +
        `üìã –ó–∞—è–≤–∫–∏: –û–¥–æ–±—Ä–µ–Ω–æ: ${approvedTasks} | –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${rejectedTasks}`,
        { show_alert: true }
      );
      return;
    }

    if (action === 'admin_top') {
      ctx.session.previousScreen = 'admin';
      const top = getTopUsers();
      const list = top.length > 0
        ? top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ${u.title_name ? `(${u.title_name})` : ''} ‚Äî ${u.stars} ‚≠ê`).join('\n')
        : 'üòî –ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤.';
      await utils.sendOrEditMessage(
        ctx,
        `üèÜ <b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ ${BOT_NAME}</b> üåü\n\n${list}\n\n<i>–≠—Ç–æ –ª—É—á—à–∏–µ –∑–≤—ë–∑–¥–Ω—ã–µ –æ—Ö–æ—Ç–Ω–∏–∫–∏!</i>`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ]),
        id
      );
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'admin_broadcast') {
      if (!ADMIN_IDS.includes(id)) {
        await ctx.answerCbQuery(`‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ${BOT_NAME}!`, { show_alert: true });
        return;
      }
      ctx.session.previousScreen = 'admin';
      ctx.session.waitingFor = { type: 'broadcast' };
      const msg = await ctx.reply(
        `üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n` +
        `–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ${BOT_NAME}. –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–π–¥—ë—Ç –≤—Å–µ–º! üö®`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'admin_addcode') {
      if (!ADMIN_IDS.includes(id)) {
        await ctx.answerCbQuery(`‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ${BOT_NAME}!`, { show_alert: true });
        return;
      }
      ctx.session.previousScreen = 'admin';
      ctx.session.waitingFor = { type: 'add_promo' };
      const msg = await ctx.reply(
        `‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n` +
        `–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–ö–û–î –ó–í–Å–ó–î–´ –ê–ö–¢–ò–í–ê–¶–ò–ò</code>\n` +
        `–ü—Ä–∏–º–µ—Ä: <code>STAR2025 10 5</code>`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'admin_addtask') {
      if (!ADMIN_IDS.includes(id)) {
        await ctx.answerCbQuery(`‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ${BOT_NAME}!`, { show_alert: true });
        return;
      }
      ctx.session.previousScreen = 'admin';
      ctx.session.waitingFor = { type: 'add_task' };
      const msg = await ctx.reply(
        `‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ</b>\n\n` +
        `–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–¢–ò–ü –û–ü–ò–°–ê–ù–ò–ï –¶–ï–õ–¨ –ù–ê–ì–†–ê–î–ê</code>\n` +
        `–ü—Ä–∏–º–µ—Ä: <code>subscribe_channel –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ ${TASK_CHANNEL} 1 5</code>`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'admin_stars') {
      if (!ADMIN_IDS.includes(id)) {
        await ctx.answerCbQuery(`‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ${BOT_NAME}!`, { show_alert: true });
        return;
      }
      ctx.session.previousScreen = 'admin';
      ctx.session.waitingFor = { type: 'manage_stars' };
      const msg = await ctx.reply(
        `‚≠ê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥–∞–º–∏</b>\n\n` +
        `–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>ID_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ö–û–õ–ò–ß–ï–°–¢–í–û</code>\n` +
        `–ü—Ä–∏–º–µ—Ä: <code>123456789 50</code> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ <code>123456789 -50</code> –¥–ª—è —Å–Ω—è—Ç–∏—è`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'admin_titles') {
      if (!ADMIN_IDS.includes(id)) {
        await ctx.answerCbQuery(`‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ${BOT_NAME}!`, { show_alert: true });
        return;
      }
      ctx.session.previousScreen = 'admin';
      ctx.session.waitingFor = { type: 'manage_titles' };
      const titles = db.all('SELECT * FROM titles', []);
      const titleList = titles.length > 0
        ? titles.map(t => `ID ${t.id}: <b>${t.name}</b> (${t.description})${t.is_secret ? ' üîí –°–µ–∫—Ä–µ—Ç–Ω—ã–π' : ''}`).join('\n')
        : 'üòî –¢–∏—Ç—É–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
      const msg = await ctx.reply(
        `üèÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏</b>\n\n` +
        `–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>ID_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID_–¢–ò–¢–£–õ–ê</code>\n` +
        `–ü—Ä–∏–º–µ—Ä: <code>123456789 10</code> –¥–ª—è –≤—ã–¥–∞—á–∏ –∏–ª–∏ <code>123456789 0</code> –¥–ª—è —Å–Ω—è—Ç–∏—è\n\n` +
        `–°–ø–∏—Å–æ–∫ —Ç–∏—Ç—É–ª–æ–≤:\n${titleList}`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'admin_tickets') {
      ctx.session.previousScreen = 'admin';
      const tickets = db.all('SELECT * FROM tickets WHERE status IN (?, ?) ORDER BY created_at DESC LIMIT 10', ['open', 'in_progress']);
      const buttons = tickets.length > 0
        ? tickets.map(ticket => {
            const type = ticket.task_type
              ? `üìã –ó–∞—è–≤–∫–∞ (${ticket.task_type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL}` : ticket.task_type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL_KITTY}` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'})`
              : 'üìû –¢–∏–∫–µ—Ç';
            return [Markup.button.callback(
              `${type} #${ticket.ticket_id} (@${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}, ${ticket.status === 'open' ? '–û—Ç–∫—Ä—ã—Ç' : '–í —Ä–∞–±–æ—Ç–µ'})`,
              `ticket_${ticket.ticket_id}`
            )];
          }).concat([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]])
        : [[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]];
      await utils.sendOrEditMessage(
        ctx,
        `üìû <b>–¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏</b>\n\n` +
        (tickets.length > 0 ? `–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: üîç` : `üòî –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∏–ª–∏ –∑–∞—è–≤–æ–∫.`),
        Markup.inlineKeyboard(buttons),
        id
      );
      await ctx.answerCbQuery();
      return;
    }

    if (action.startsWith('ticket_')) {
      ctx.session.previousScreen = 'admin_tickets';
      const ticketId = parseInt(action.split('_')[1]);
      const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
      if (!ticket) {
        await ctx.answerCbQuery('‚ùå –¢–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!', { show_alert: true });
        return;
      }
      const fileIds = ticket.file_id ? JSON.parse(ticket.file_id) : [];
      const fileText = fileIds.length > 0 ? `üìé <b>–§–∞–π–ª—ã:</b> ${fileIds.length} —à—Ç.` : 'üìé <b>–§–∞–π–ª–æ–≤ –Ω–µ—Ç</b>';
      const type = ticket.task_type
        ? `üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (${ticket.task_type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL}` : ticket.task_type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL_KITTY}` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'})`
        : 'üìû –¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏';
      const ticketText =
        `${type} #${ticket.ticket_id}\n\n` +
        `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
        `üÜî ID: ${ticket.user_id}\n` +
        `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticket.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
        `${fileText}\n` +
        `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${ticket.created_at}\n` +
        `üìå <b>–°—Ç–∞—Ç—É—Å:</b> ${ticket.status === 'open' ? '–û—Ç–∫—Ä—ã—Ç' : ticket.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : ticket.status === 'approved' ? '–û–¥–æ–±—Ä–µ–Ω–æ' : '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'}\n\n` +
        `<i>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:</i>`;
      const buttons = [];
      if (ticket.task_type) {
        buttons.push([Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_task_${ticket.ticket_id}`)]);
        buttons.push([Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_task_${ticket.ticket_id}`)]);
      } else {
        buttons.push([Markup.button.callback('‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', `reply_ticket_${ticket.ticket_id}`)]);
        buttons.push([Markup.button.callback('üîÑ –í —Ä–∞–±–æ—Ç–µ', `set_ticket_status_${ticket.ticket_id}_in_progress`)]);
        buttons.push([Markup.button.callback('‚úÖ –ó–∞–∫—Ä—ã—Ç—å', `set_ticket_status_${ticket.ticket_id}_closed`)]);
      }
      if (fileIds.length > 0) {
        buttons.unshift([Markup.button.callback('üìé –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã', `view_files_${ticket.ticket_id}`)]);
      }
      buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_tickets'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]);
      await utils.sendOrEditMessage(ctx, ticketText, Markup.inlineKeyboard(buttons), id);
      await ctx.answerCbQuery();
      return;
    }

    if (action.startsWith('view_files_')) {
      const ticketId = parseInt(action.split('_')[2]);
      const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
      if (!ticket || !ticket.file_id) {
        await ctx.answerCbQuery('‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!', { show_alert: true });
        return;
      }
      const fileIds = JSON.parse(ticket.file_id);
      for (const fileId of fileIds) {
        await ctx.telegram.sendPhoto(id, fileId, { caption: `üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ ${ticket.task_type ? '–∑–∞—è–≤–∫–∏' : '—Ç–∏–∫–µ—Ç–∞'} #${ticketId}` });
      }
      await ctx.answerCbQuery('üìé –§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç!', { show_alert: true });
      return;
    }

    if (action.startsWith('approve_task_')) {
      const ticketId = parseInt(action.split('_')[2]);
      const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
      if (!ticket) {
        await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', { show_alert: true });
        return;
      }
      const task = db.get('SELECT id, reward FROM tasks WHERE type = ?', [ticket.task_type]);
      if (!task) {
        await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!', { show_alert: true });
        return;
      }
      db.run('UPDATE tickets SET status = ? WHERE ticket_id = ?', ['approved', ticketId]);
      db.run('INSERT OR REPLACE INTO user_tasks (user_id, task_id, progress, completed) VALUES (?, ?, ?, ?)', [ticket.user_id, task.id, 1, 1]);
      db.run('UPDATE users SET stars = stars + ? WHERE id = ?', [task.reward, ticket.user_id]);
      utils.updateUserTitle(ctx, ticket.user_id);
      if (ticket.channel_message_id) {
        try {
          const updatedText =
            `üìã <b>–ó–∞—è–≤–∫–∞ #${ticket.ticket_id}</b>\n\n` +
            `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
            `üÜî ID: ${ticket.user_id}\n` +
            `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticket.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
            `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${ticket.created_at}\n` +
            `üìå <b>–°—Ç–∞—Ç—É—Å:</b> –û–¥–æ–±—Ä–µ–Ω–æ ‚úÖ\n` +
            `üéâ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> ${task.reward} –∑–≤—ë–∑–¥`;
          await ctx.telegram.editMessageText(
            SUPPORT_CHANNEL,
            ticket.channel_message_id,
            undefined,
            updatedText,
            { parse_mode: 'HTML' }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      }
      const taskName = ticket.task_type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL}` : ticket.task_type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL_KITTY}` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞';
      const userMsg = await ctx.telegram.sendMessage(
        ticket.user_id,
        `üìã <b>–ó–∞—è–≤–∫–∞ #${ticketId}</b> –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ "${taskName}" <b>–æ–¥–æ–±—Ä–µ–Ω–∞</b>! üéâ\n\n` +
        `–¢—ã –ø–æ–ª—É—á–∏–ª <b>${task.reward} –∑–≤—ë–∑–¥</b>! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${db.get('SELECT stars FROM users WHERE id = ?', [ticket.user_id]).stars} ‚≠ê`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]]) }
      );
      utils.deleteNotification(ctx, userMsg.message_id);
      const msg = await ctx.reply(
        `‚úÖ <b>–ó–∞—è–≤–∫–∞ #${ticketId} –æ–¥–æ–±—Ä–µ–Ω–∞!</b>`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_tickets'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      await utils.sendOrEditMessage(
        ctx,
        `üìû <b>–¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: üîç`,
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]]),
        id
      );
      await ctx.answerCbQuery();
      return;
    }

    if (action.startsWith('reject_task_')) {
      const ticketId = parseInt(action.split('_')[2]);
      const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
      if (!ticket) {
        await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', { show_alert: true });
        return;
      }
      const task = db.get('SELECT id FROM tasks WHERE type = ?', [ticket.task_type]);
      if (task) {
        db.run('DELETE FROM user_tasks WHERE user_id = ? AND task_id = ?', [ticket.user_id, task.id]);
      }
      db.run('UPDATE tickets SET status = ? WHERE ticket_id = ?', ['rejected', ticketId]);
      if (ticket.channel_message_id) {
        try {
          const updatedText =
            `üìã <b>–ó–∞—è–≤–∫–∞ #${ticket.ticket_id}</b>\n\n` +
            `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
            `üÜî ID: ${ticket.user_id}\n` +
            `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticket.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
            `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${ticket.created_at}\n` +
            `üìå <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå`;
          await ctx.telegram.editMessageText(
            SUPPORT_CHANNEL,
            ticket.channel_message_id,
            undefined,
            updatedText,
            { parse_mode: 'HTML' }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      }
      const taskName = ticket.task_type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL}` : ticket.task_type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL_KITTY}` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞';
      const userMsg = await ctx.telegram.sendMessage(
        ticket.user_id,
        `üìã <b>–ó–∞—è–≤–∫–∞ #${ticketId}</b> –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ "${taskName}" <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b> ‚ùå\n\n` +
        `–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! –°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. üõ†`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]]) }
      );
      utils.deleteNotification(ctx, userMsg.message_id);
      const msg = await ctx.reply(
        `‚ùå <b>–ó–∞—è–≤–∫–∞ #${ticketId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_tickets'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      await utils.sendOrEditMessage(
        ctx,
        `üìû <b>–¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: üîç`,
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]]),
        id
      );
      await ctx.answerCbQuery();
      return;
    }

    if (action.startsWith('reply_ticket_')) {
      if (!ADMIN_IDS.includes(id)) {
        await ctx.answerCbQuery(`‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ${BOT_NAME}!`, { show_alert: true });
        return;
      }
      const ticketId = parseInt(action.split('_')[2]);
      const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
      if (!ticket) {
        await ctx.answerCbQuery('‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!', { show_alert: true });
        return;
      }
      ctx.session.waitingFor = { type: 'reply_ticket', ticketId };
      ctx.session.previousScreen = 'admin_tickets';
      const msg = await ctx.reply(
        `‚úçÔ∏è <b>–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId}</b>\n\n` +
        `–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}:`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      await ctx.answerCbQuery();
      return;
    }

    if (action.startsWith('set_ticket_status_')) {
      if (!ADMIN_IDS.includes(id)) {
        await ctx.answerCbQuery(`‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ${BOT_NAME}!`, { show_alert: true });
        return;
      }
      const [_, ticketId, status] = action.split('_');
      const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
      if (!ticket) {
        await ctx.answerCbQuery('‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!', { show_alert: true });
        return;
      }
      db.run('UPDATE tickets SET status = ? WHERE ticket_id = ?', [status, ticketId]);
      if (ticket.channel_message_id) {
        try {
          const updatedText =
            `üìû <b>–¢–∏–∫–µ—Ç #${ticket.ticket_id}</b>\n\n` +
            `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
            `üÜî ID: ${ticket.user_id}\n` +
            `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticket.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
            `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${ticket.created_at}\n` +
            `üìå <b>–°—Ç–∞—Ç—É—Å:</b> ${status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç–æ'}`;
          await ctx.telegram.editMessageText(
            SUPPORT_CHANNEL,
            ticket.channel_message_id,
            undefined,
            updatedText,
            { parse_mode: 'HTML' }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      }
      const statusText = status === 'in_progress' ? '–≤ —Ä–∞–±–æ—Ç–µ' : '–∑–∞–∫—Ä—ã—Ç';
      const userMsg = await ctx.telegram.sendMessage(
        ticket.user_id,
        `üìû <b>–¢–∏–∫–µ—Ç #${ticketId}</b> —Ç–µ–ø–µ—Ä—å <b>${statusText}</b>.\n\n` +
        `–û–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ${BOT_NAME}! üöÄ`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]]) }
      );
      utils.deleteNotification(ctx, userMsg.message_id);
      const msg = await ctx.reply(
        `‚úÖ <b>–¢–∏–∫–µ—Ç #${ticketId} ${statusText}!</b>`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_tickets'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      await utils.sendOrEditMessage(
        ctx,
        `üìû <b>–¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: üîç`,
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]]),
        id
      );
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'back_to_main') {
      ctx.session.previousScreen = null;
      await utils.sendMainMenu(ctx, id);
      await ctx.answerCbQuery();
      return;
    }

    if (action === 'back') {
      ctx.session.previousScreen = null;
      await utils.sendMainMenu(ctx, id);
      await ctx.answerCbQuery();
      return;
    }

    await ctx.answerCbQuery('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.', { show_alert: true });
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback ${action}:`, err);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!', { show_alert: true });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤
bot.on(['text', 'photo', 'document'], async (ctx) => {
  ctx.session = ctx.session || {};
  const id = ctx.from.id;
  const user = db.get('SELECT * FROM users WHERE id = ?', [id]);
  if (!user) {
    const msg = await ctx.reply(`‚ùå –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ ${BOT_NAME}! üöÄ`, {
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([[Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]])
    });
    utils.deleteNotification(ctx, msg.message_id);
    return;
  }

  const waitingFor = ctx.session.waitingFor || {};
  const text = ctx.message.text;
  const photos = ctx.message.photo;
  const document = ctx.message.document;

  if (waitingFor.type === 'promo_code' && text) {
    const code = text.trim().toUpperCase();
    const promo = db.get('SELECT * FROM promo_codes WHERE code = ?', [code]);
    if (!promo) {
      const msg = await ctx.reply(
        `‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ <b>${code}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      ctx.session.waitingFor = {};
      await utils.sendMainMenu(ctx, id);
      return;
    }
    if (promo.activations_left <= 0) {
      const msg = await ctx.reply(
        `‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ <b>${code}</b> –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π!`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      ctx.session.waitingFor = {};
      await utils.sendMainMenu(ctx, id);
      return;
    }
    const usedBy = JSON.parse(promo.used_by || '[]');
    if (usedBy.includes(id)) {
      const msg = await ctx.reply(
        `‚ùå –¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ <b>${code}</b>!`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      ctx.session.waitingFor = {};
      await utils.sendMainMenu(ctx, id);
      return;
    }
    usedBy.push(id);
    db.run('UPDATE promo_codes SET activations_left = activations_left - 1, used_by = ? WHERE code = ?', [JSON.stringify(usedBy), code]);
    db.run('UPDATE users SET stars = stars + ? WHERE id = ?', [promo.reward, id]);
    utils.updateUserTitle(ctx, id);
    const msg = await ctx.reply(
      `üéâ –ü—Ä–æ–º–æ–∫–æ–¥ <b>${code}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! +${promo.reward} –∑–≤—ë–∑–¥! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${db.get('SELECT stars FROM users WHERE id = ?', [id]).stars} ‚≠ê`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ])
      }
    );
    utils.deleteNotification(ctx, msg.message_id);
    ctx.session.waitingFor = {};
    await utils.sendMainMenu(ctx, id);
    return;
  }

  if (waitingFor.type === 'support' && (text || photos || document)) {
    const description = text || ctx.message.caption || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
    const fileIds = [];
    if (photos) {
      fileIds.push(photos[photos.length - 1].file_id);
    }
    if (document) {
      fileIds.push(document.file_id);
    }
    const ticketId = db.run(
      'INSERT INTO tickets (user_id, username, description, created_at, file_id, status) VALUES (?, ?, ?, ?, ?, ?)',
      [id, user.username || ctx.from.first_name || '–±–µ–∑ –Ω–∏–∫–∞', description, new Date().toISOString(), JSON.stringify(fileIds), 'open']
    ).lastInsertRowid;
    const channelMsg = await ctx.telegram.sendMessage(
      SUPPORT_CHANNEL,
      `üìû <b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #${ticketId}</b>\n\n` +
      `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
      `ÔøΩID: ${id}\n` +
      `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description}\n` +
      `üìé <b>–§–∞–π–ª—ã:</b> ${fileIds.length > 0 ? `${fileIds.length} —à—Ç.` : '–ù–µ—Ç'}\n` +
      `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${new Date().toISOString()}\n` +
      `üìå <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫—Ä—ã—Ç`,
      { parse_mode: 'HTML' }
    );
    if (fileIds.length > 0) {
      for (const fileId of fileIds) {
        if (photos) {
          await ctx.telegram.sendPhoto(SUPPORT_CHANNEL, fileId, { caption: `üì∑ –§–∞–π–ª –∏–∑ —Ç–∏–∫–µ—Ç–∞ #${ticketId}` });
        } else {
          await ctx.telegram.sendDocument(SUPPORT_CHANNEL, fileId, { caption: `üìé –§–∞–π–ª –∏–∑ —Ç–∏–∫–µ—Ç–∞ #${ticketId}` });
        }
      }
    }
    db.run('UPDATE tickets SET channel_message_id = ? WHERE ticket_id = ?', [channelMsg.message_id, ticketId]);
    const msg = await ctx.reply(
      `üìû <b>–¢–∏–∫–µ—Ç #${ticketId} —Å–æ–∑–¥–∞–Ω!</b>\n\n` +
      `–ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ ${BOT_NAME}! üöÄ`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'profile'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ])
      }
    );
    utils.deleteNotification(ctx, msg.message_id);
    ctx.session.waitingFor = {};
    await utils.sendOrEditMessage(
      ctx,
      `üåü <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ ${BOT_NAME}</b> ‚ú®\n\n` +
      `üë§ <b>–ò–º—è:</b> ${ctx.from.first_name || '–ê–Ω–æ–Ω–∏–º'}\n` +
      `üèÖ <b>–¢–∏—Ç—É–ª:</b> ${user.title_id ? db.get('SELECT name, description FROM titles WHERE id = ?', [user.title_id]).name : '–ù–µ—Ç —Ç–∏—Ç—É–ª–∞'}\n` +
      `üÜî <b>ID:</b> ${user.id}\n` +
      `üí´ <b>–ó–≤—ë–∑–¥—ã:</b> ${user.stars} ‚ú®\n` +
      `üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> ${db.get('SELECT COUNT(*) as count FROM users WHERE referred_by = ?', [id]).count || 0}\n` +
      `üì£ <b>–¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª:</b> ${user.referred_by ? `@${db.get('SELECT username FROM users WHERE id = ?', [user.referred_by]).username || '–±–µ–∑ –Ω–∏–∫–∞'}` : '‚Äî'}\n` +
      `üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å:</b> ${user.last_bonus && dayjs().diff(dayjs(user.last_bonus), 'hour') < 24 ? '‚è≥ –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∑–∂–µ' : '‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ!'}\n` +
      `üìã <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b> ${db.all('SELECT t.description FROM user_tasks ut JOIN tasks t ON ut.task_id = t.id WHERE ut.user_id = ? AND ut.completed = 1', [id]).length > 0 ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}\n\n` +
      `<i>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥ –∏ —Å—Ç–∞–Ω—å –ª–µ–≥–µ–Ω–¥–æ–π ${BOT_NAME}!</i>`,
      Markup.inlineKeyboard([
        [Markup.button.callback('‚ùì FAQ', 'faq'), Markup.button.callback('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
      ]),
      id
    );
    return;
  }

  if (waitingFor.type === 'task_screenshot' && (photos || document)) {
    const taskId = waitingFor.taskId;
    const task = db.get('SELECT * FROM tasks WHERE id = ?', [taskId]);
    if (!task) {
      const msg = await ctx.reply(
        `‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      ctx.session.waitingFor = {};
      await utils.sendMainMenu(ctx, id);
      return;
    }
    const fileIds = [];
    if (photos) {
      fileIds.push(photos[photos.length - 1].file_id);
    }
    if (document) {
      fileIds.push(document.file_id);
    }
    const description = ctx.message.caption || `–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ "${task.description}"`;
    const ticketId = db.run(
      'INSERT INTO tickets (user_id, username, description, created_at, file_id, status, task_type) VALUES (?, ?, ?, ?, ?, ?, ?)',
      [id, user.username || ctx.from.first_name || '–±–µ–∑ –Ω–∏–∫–∞', description, new Date().toISOString(), JSON.stringify(fileIds), 'open', task.type]
    ).lastInsertRowid;
    const channelMsg = await ctx.telegram.sendMessage(
      SUPPORT_CHANNEL,
      `üìã <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${ticketId}</b>\n\n` +
      `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
      `üÜî ID: ${id}\n` +
      `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description}\n` +
      `üìé <b>–§–∞–π–ª—ã:</b> ${fileIds.length} —à—Ç.\n` +
      `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${new Date().toISOString()}\n` +
      `üìå <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫—Ä—ã—Ç\n` +
      `üéØ <b>–ó–∞–¥–∞–Ω–∏–µ:</b> ${task.description}\n` +
      `üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> ${task.reward} –∑–≤—ë–∑–¥`,
      { parse_mode: 'HTML' }
    );
    for (const fileId of fileIds) {
      if (photos) {
        await ctx.telegram.sendPhoto(SUPPORT_CHANNEL, fileId, { caption: `üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –∑–∞—è–≤–∫–∏ #${ticketId}` });
      } else {
        await ctx.telegram.sendDocument(SUPPORT_CHANNEL, fileId, { caption: `üìé –§–∞–π–ª –∏–∑ –∑–∞—è–≤–∫–∏ #${ticketId}` });
      }
    }
    db.run('UPDATE tickets SET channel_message_id = ? WHERE ticket_id = ?', [channelMsg.message_id, ticketId]);
    db.run('INSERT OR REPLACE INTO user_tasks (user_id, task_id, progress, completed) VALUES (?, ?, ?, ?)', [id, taskId, 1, 0]);
    const msg = await ctx.reply(
      `üìã <b>–ó–∞—è–≤–∫–∞ #${ticketId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!</b>\n\n` +
      `–û–∂–∏–¥–∞–π —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ ${BOT_NAME}. –¢—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! üöÄ`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'tasks'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ])
      }
    );
    utils.deleteNotification(ctx, msg.message_id);
    ctx.session.waitingFor = {};
    const tasks = db.all('SELECT * FROM tasks', []);
    const taskIndex = ctx.session.currentTaskIndex || 0;
    if (tasks.length === 0) {
      await utils.sendOrEditMessage(
        ctx,
        `üìã <b>–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç!</b>\n\n<i>–ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è, —Å–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ ${BOT_NAME}!</i>`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ]),
        id
      );
    } else {
      const task = tasks[taskIndex % tasks.length];
      const userTask = db.get('SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ?', [id, task.id]) || { progress: 0, completed: 0 };
      const taskStatus = userTask.completed ? '‚úÖ <i>–í—ã–ø–æ–ª–Ω–µ–Ω–æ</i>' : userTask.progress > 0 ? '‚è≥ <i>–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</i>' : 'üî• <i>–ù–µ –Ω–∞—á–∞—Ç–æ</i>';
      const buttons = [
        [
          task.type === 'subscribe_channel' || task.type === 'subscribe_channel_kittyyyyywwr'
            ? Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${(task.type === 'subscribe_channel' ? TASK_CHANNEL : TASK_CHANNEL_KITTY).replace('@', '')}`)
            : Markup.button.url('ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞', TASK_BOT_LINK),
          Markup.button.callback('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç', `check_task_${task.id}`)
        ],
        [Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', 'next_task')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
      ];
      await utils.sendOrEditMessage(
        ctx,
        `üìã <b>–ó–∞–¥–∞–Ω–∏–µ #${taskIndex + 1}/${tasks.length}</b>\n\n` +
        `üéØ <b>${task.description}</b>\n` +
        `üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> ${task.reward} –∑–≤—ë–∑–¥\n` +
        `üìå <b>–°—Ç–∞—Ç—É—Å:</b> ${taskStatus}\n\n` +
        `<i>–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!</i>`,
        Markup.inlineKeyboard(buttons),
        id
      );
    }
    return;
  }

  if (waitingFor.type === 'broadcast' && text && ADMIN_IDS.includes(id)) {
    const users = db.all('SELECT id FROM users', []);
    let success = 0;
    let failed = 0;
    for (const user of users) {
      try {
        const msg = await ctx.telegram.sendMessage(
          user.id,
          `üì¢ <b>–ù–æ–≤–æ—Å—Ç—å –æ—Ç ${BOT_NAME}</b>\n\n${text}`,
          { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]]) }
        );
        utils.deleteNotification(ctx, msg.message_id);
        success++;
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, err);
        failed++;
      }
    }
    const msg = await ctx.reply(
      `üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n` +
      `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${success}\n` +
      `‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${failed}`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ])
      }
    );
    utils.deleteNotification(ctx, msg.message_id);
    ctx.session.waitingFor = {};
    await utils.sendOrEditMessage(
      ctx,
      `‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ${BOT_NAME}</b> üîí\n\n–£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º –∏ —Å–ª–µ–¥–∏ –∑–∞ –∑–≤—ë–∑–¥–∞–º–∏! üåü`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
        [Markup.button.callback('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'admin_top')],
        [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'admin_addtask')],
        [Markup.button.callback('üìû –¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏', 'admin_tickets')],
        [Markup.button.callback('‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥–∞–º–∏', 'admin_stars')],
        [Markup.button.callback('üèÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏', 'admin_titles')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
      ]),
      id
    );
    return;
  }

  if (waitingFor.type === 'add_promo' && text && ADMIN_IDS.includes(id)) {
    const parts = text.trim().split(' ');
    if (parts.length !== 3) {
      const msg = await ctx.reply(
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π: <code>–ö–û–î –ó–í–Å–ó–î–´ –ê–ö–¢–ò–í–ê–¶–ò–ò</code>\n–ü—Ä–∏–º–µ—Ä: <code>STAR2025 10 5</code>`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      return;
    }
    const [code, reward, activations] = parts;
    const parsedReward = parseInt(reward);
    const parsedActivations = parseInt(activations);
    if (isNaN(parsedReward) || isNaN(parsedActivations) || parsedReward <= 0 || parsedActivations <= 0) {
      const msg = await ctx.reply(
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è! –ó–≤—ë–∑–¥—ã –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ > 0.`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      return;
    }
    db.run('INSERT OR REPLACE INTO promo_codes (code, reward, activations_left, used_by) VALUES (?, ?, ?, ?)', [code.toUpperCase(), parsedReward, parsedActivations, '[]']);
    const msg = await ctx.reply(
      `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>${code.toUpperCase()}</b> —Å–æ–∑–¥–∞–Ω!\n` +
      `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${parsedReward} –∑–≤—ë–∑–¥\n` +
      `üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: ${parsedActivations}`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ])
      }
    );
    utils.deleteNotification(ctx, msg.message_id);
    ctx.session.waitingFor = {};
    await utils.sendOrEditMessage(
      ctx,
      `‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ${BOT_NAME}</b> üîí\n\n–£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º –∏ —Å–ª–µ–¥–∏ –∑–∞ –∑–≤—ë–∑–¥–∞–º–∏! üåü`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
        [Markup.button.callback('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'admin_top')],
        [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'admin_addtask')],
        [Markup.button.callback('üìû –¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏', 'admin_tickets')],
        [Markup.button.callback('‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥–∞–º–∏', 'admin_stars')],
        [Markup.button.callback('üèÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏', 'admin_titles')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
      ]),
      id
    );
    return;
  }

  if (waitingFor.type === 'add_task' && text && ADMIN_IDS.includes(id)) {
    const parts = text.trim().split(' ', 4);
    if (parts.length !== 4) {
      const msg = await ctx.reply(
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π: <code>–¢–ò–ü –û–ü–ò–°–ê–ù–ò–ï –¶–ï–õ–¨ –ù–ê–ì–†–ê–î–ê</code>\n` +
        `–ü—Ä–∏–º–µ—Ä: <code>subscribe_channel –ü–æ–¥–ø–∏—à–∏—Å—å_–Ω–∞_${TASK_CHANNEL} 1 5</code>`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      return;
    }
    const [type, ...rest] = parts;
    const description = rest[0].replace(/_/g, ' ');
    const goal = parseInt(rest[1]);
    const reward = parseInt(rest[2]);
    if (isNaN(goal) || isNaN(reward) || goal <= 0 || reward <= 0) {
      const msg = await ctx.reply(
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è! –¶–µ–ª—å –∏ –Ω–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ > 0.`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      return;
    }
    db.run('INSERT OR REPLACE INTO tasks (type, description, goal, reward) VALUES (?, ?, ?, ?)', [type, description, goal, reward]);
    const msg = await ctx.reply(
      `‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n` +
      `üéØ –¢–∏–ø: ${type}\n` +
      `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${description}\n` +
      `üèÅ –¶–µ–ª—å: ${goal}\n` +
      `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${reward} –∑–≤—ë–∑–¥`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ])
      }
    );
    utils.deleteNotification(ctx, msg.message_id);
    ctx.session.waitingFor = {};
    await utils.sendOrEditMessage(
      ctx,
      `‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ${BOT_NAME}</b> üîí\n\n–£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º –∏ —Å–ª–µ–¥–∏ –∑–∞ –∑–≤—ë–∑–¥–∞–º–∏! üåü`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
        [Markup.button.callback('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'admin_top')],
        [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'admin_addtask')],
        [Markup.button.callback('üìû –¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏', 'admin_tickets')],
        [Markup.button.callback('‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥–∞–º–∏', 'admin_stars')],
        [Markup.button.callback('üèÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏', 'admin_titles')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
      ]),
      id
    );
    return;
  }

  if (waitingFor.type === 'manage_stars' && text && ADMIN_IDS.includes(id)) {
    const parts = text.trim().split(' ');
    if (parts.length !== 2) {
      const msg = await ctx.reply(
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π: <code>ID_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ö–û–õ–ò–ß–ï–°–¢–í–û</code>\n` +
        `–ü—Ä–∏–º–µ—Ä: <code>123456789 50</code> –∏–ª–∏ <code>123456789 -50</code>`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      return;
    }
    const [targetId, amount] = parts.map(Number);
    if (isNaN(targetId) || isNaN(amount)) {
      const msg = await ctx.reply(
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è! ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      return;
    }
    const targetUser = db.get('SELECT * FROM users WHERE id = ?', [targetId]);
    if (!targetUser) {
      const msg = await ctx.reply(
        `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      ctx.session.waitingFor = {};
      await utils.sendOrEditMessage(
        ctx,
        `‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ${BOT_NAME}</b> üîí\n\n–£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º –∏ —Å–ª–µ–¥–∏ –∑–∞ –∑–≤—ë–∑–¥–∞–º–∏! üåü`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
          [Markup.button.callback('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'admin_top')],
          [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
          [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
          [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'admin_addtask')],
          [Markup.button.callback('üìû –¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏', 'admin_tickets')],
          [Markup.button.callback('‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥–∞–º–∏', 'admin_stars')],
          [Markup.button.callback('üèÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏', 'admin_titles')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ]),
        id
      );
      return;
    }
    const newStars = Math.max(0, targetUser.stars + amount);
    db.run('UPDATE users SET stars = ? WHERE id = ?', [newStars, targetId]);
    utils.updateUserTitle(ctx, targetId);
    const actionText = amount > 0 ? `–≤—ã–¥–∞–Ω–æ ${amount} –∑–≤—ë–∑–¥` : `—Å–Ω—è—Ç–æ ${-amount} –∑–≤—ë–∑–¥`;
    const userMsg = await ctx.telegram.sendMessage(
      targetId,
      `‚≠ê <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!</b>\n\n` +
      `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${actionText}. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${newStars} ‚≠ê`,
      { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]]) }
    );
    utils.deleteNotification(ctx, userMsg.message_id);
    const msg = await ctx.reply(
      `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetId} ${actionText}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newStars} ‚≠ê`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ])
      }
    );
    utils.deleteNotification(ctx, msg.message_id);
    ctx.session.waitingFor = {};
    await utils.sendOrEditMessage(
      ctx,
      `‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ${BOT_NAME}</b> üîí\n\n–£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º –∏ —Å–ª–µ–¥–∏ –∑–∞ –∑–≤—ë–∑–¥–∞–º–∏! üåü`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
        [Markup.button.callback('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'admin_top')],
        [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'admin_addtask')],
        [Markup.button.callback('üìû –¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏', 'admin_tickets')],
        [Markup.button.callback('‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥–∞–º–∏', 'admin_stars')],
        [Markup.button.callback('üèÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏', 'admin_titles')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
      ]),
      id
    );
    return;
  }

  if (waitingFor.type === 'manage_titles' && text && ADMIN_IDS.includes(id)) {
    const parts = text.trim().split(' ');
    if (parts.length !== 2) {
      const msg = await ctx.reply(
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π: <code>ID_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID_–¢–ò–¢–£–õ–ê</code>\n` +
        `–ü—Ä–∏–º–µ—Ä: <code>123456789 10</code> –∏–ª–∏ <code>123456789 0</code> –¥–ª—è —Å–Ω—è—Ç–∏—è`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      return;
    }
    const [targetId, titleId] = parts.map(Number);
    if (isNaN(targetId) || (titleId !== 0 && isNaN(titleId))) {
      const msg = await ctx.reply(
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è! ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏—Ç—É–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_input')]])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      return;
    }
    const targetUser = db.get('SELECT * FROM users WHERE id = ?', [targetId]);
    if (!targetUser) {
      const msg = await ctx.reply(
        `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      ctx.session.waitingFor = {};
      await utils.sendOrEditMessage(
        ctx,
        `‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ${BOT_NAME}</b> üîí\n\n–£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º –∏ —Å–ª–µ–¥–∏ –∑–∞ –∑–≤—ë–∑–¥–∞–º–∏! üåü`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
          [Markup.button.callback('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'admin_top')],
          [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
          [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
          [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'admin_addtask')],
          [Markup.button.callback('üìû –¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏', 'admin_tickets')],
          [Markup.button.callback('‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥–∞–º–∏', 'admin_stars')],
          [Markup.button.callback('üèÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏', 'admin_titles')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ]),
        id
      );
      return;
    }
    if (titleId !== 0) {
      const title = db.get('SELECT * FROM titles WHERE id = ?', [titleId]);
      if (!title) {
        const msg = await ctx.reply(
          `‚ùå –¢–∏—Ç—É–ª —Å ID ${titleId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`,
          {
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([
              [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
            ])
          }
        );
        utils.deleteNotification(ctx, msg.message_id);
        ctx.session.waitingFor = {};
        await utils.sendOrEditMessage(
          ctx,
          `‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ${BOT_NAME}</b> üîí\n\n–£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º –∏ —Å–ª–µ–¥–∏ –∑–∞ –∑–≤—ë–∑–¥–∞–º–∏! üåü`,
          Markup.inlineKeyboard([
            [Markup.button.callback('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
            [Markup.button.callback('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'admin_top')],
            [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
            [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
            [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'admin_addtask')],
            [Markup.button.callback('üìû –¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏', 'admin_tickets')],
            [Markup.button.callback('‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥–∞–º–∏', 'admin_stars')],
            [Markup.button.callback('üèÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏', 'admin_titles')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ]),
          id
        );
        return;
      }
      db.run('UPDATE users SET title_id = ? WHERE id = ?', [titleId, targetId]);
      const userMsg = await ctx.telegram.sendMessage(
        targetId,
        `üèÖ <b>–ù–æ–≤—ã–π —Ç–∏—Ç—É–ª!</b>\n\n` +
        `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª —Ç–µ–±–µ —Ç–∏—Ç—É–ª: <b>${title.name}</b> (${title.description})`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]]) }
      );
      utils.deleteNotification(ctx, userMsg.message_id);
      const msg = await ctx.reply(
        `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetId} –≤—ã–¥–∞–Ω —Ç–∏—Ç—É–ª <b>${title.name}</b>!`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
    } else {
      db.run('UPDATE users SET title_id = NULL WHERE id = ?', [targetId]);
      const userMsg = await ctx.telegram.sendMessage(
        targetId,
        `üèÖ <b>–¢–∏—Ç—É–ª —Å–Ω—è—Ç!</b>\n\n` +
        `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–±—Ä–∞–ª —Ç–≤–æ–π —Ç–∏—Ç—É–ª. –ü—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã! üåü`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]]) }
      );
      utils.deleteNotification(ctx, userMsg.message_id);
      const msg = await ctx.reply(
        `‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetId} —Å–Ω—è—Ç —Ç–∏—Ç—É–ª!`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
    }
    ctx.session.waitingFor = {};
    await utils.sendOrEditMessage(
      ctx,
      `‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ${BOT_NAME}</b> üîí\n\n–£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º –∏ —Å–ª–µ–¥–∏ –∑–∞ –∑–≤—ë–∑–¥–∞–º–∏! üåü`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
        [Markup.button.callback('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'admin_top')],
        [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'admin_addtask')],
        [Markup.button.callback('üìû –¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏', 'admin_tickets')],
        [Markup.button.callback('‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥–∞–º–∏', 'admin_stars')],
        [Markup.button.callback('üèÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏', 'admin_titles')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
      ]),
      id
    );
    return;
  }

  if (waitingFor.type === 'reply_ticket' && text && ADMIN_IDS.includes(id)) {
    const ticketId = waitingFor.ticketId;
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
    if (!ticket) {
      const msg = await ctx.reply(
        `‚ùå –¢–∏–∫–µ—Ç #${ticketId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_tickets'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
          ])
        }
      );
      utils.deleteNotification(ctx, msg.message_id);
      ctx.session.waitingFor = {};
      await utils.sendOrEditMessage(
        ctx,
        `üìû <b>–¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: üîç`,
        Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]]),
        id
      );
      return;
    }
    const userMsg = await ctx.telegram.sendMessage(
      ticket.user_id,
      `üìû <b>–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId}</b>\n\n` +
      `${text}\n\n` +
      `–ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å! üöÄ`,
      { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]]) }
    );
    utils.deleteNotification(ctx, userMsg.message_id);
    db.run('UPDATE tickets SET status = ? WHERE ticket_id = ?', ['in_progress', ticketId]);
    if (ticket.channel_message_id) {
      try {
        const updatedText =
          `üìû <b>–¢–∏–∫–µ—Ç #${ticket.ticket_id}</b>\n\n` +
          `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
          `üÜî ID: ${ticket.user_id}\n` +
          `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticket.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
          `üìé <b>–§–∞–π–ª—ã:</b> ${ticket.file_id ? `${JSON.parse(ticket.file_id).length} —à—Ç.` : '–ù–µ—Ç'}\n` +
          `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${ticket.created_at}\n` +
          `üìå <b>–°—Ç–∞—Ç—É—Å:</b> –í —Ä–∞–±–æ—Ç–µ\n` +
          `‚úçÔ∏è <b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞:</b> ${text}`;
        await ctx.telegram.editMessageText(
          SUPPORT_CHANNEL,
          ticket.channel_message_id,
          undefined,
          updatedText,
          { parse_mode: 'HTML' }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }
    const msg = await ctx.reply(
      `‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_tickets'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]
        ])
      }
    );
    utils.deleteNotification(ctx, msg.message_id);
    ctx.session.waitingFor = {};
    await utils.sendOrEditMessage(
      ctx,
      `üìû <b>–¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: üîç`,
      Markup.inlineKeyboard([[Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin'), Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]]),
      id
    );
    return;
  }

  const msg = await ctx.reply(
    `‚ùì –ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å. –ò—Å–ø–æ–ª—å–∑—É–π –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏!`,
    {
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([[Markup.button.callback('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')]])
    }
  );
  utils.deleteNotification(ctx, msg.message_id);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log(`${BOT_NAME} –∑–∞–ø—É—â–µ–Ω! üöÄ`);
}).catch(err => {
  console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));