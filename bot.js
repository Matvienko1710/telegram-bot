const { Telegraf, Markup, session } = require('telegraf');
const dayjs = require('dayjs');
require('dotenv').config();

if (!process.env.BOT_TOKEN) {
  console.error('–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!');
  process.exit(1);
}

const db = require('./db');
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  REQUIRED_CHANNEL: process.env.REQUIRED_CHANNEL || '@magnumtap',
  TASK_CHANNEL: process.env.TASK_CHANNEL || '@musice46',
  TASK_CHANNEL_KITTY: process.env.TASK_CHANNEL_KITTY || '@kittyyyyywwr',
  TASK_BOT_LINK: process.env.TASK_BOT_LINK || 'https://t.me/firestars_rbot',
  ADMIN_IDS: process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id)) : [6587897295],
  SUPPORT_CHANNEL: process.env.SUPPORT_CHANNEL || '@magnumsupported',
  FARM_COOLDOWN_SECONDS: parseInt(process.env.FARM_COOLDOWN_SECONDS) || 60,
  BOT_NAME: process.env.BOT_NAME || 'FireStars'
};

// –£—Ç–∏–ª–∏—Ç—ã
const utils = {
  async isUserSubscribed(ctx, channel = CONFIG.REQUIRED_CHANNEL) {
    try {
      const status = await ctx.telegram.getChatMember(channel, ctx.from.id);
      return ['member', 'creator', 'administrator'].includes(status.status);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${channel}:`, err);
      return false;
    }
  },

  getTopUsers(limit = 10) {
    return db.all(`
      SELECT u.username, u.stars, (SELECT COUNT(*) FROM users WHERE referred_by = u.id) AS referrals, t.name AS title_name
      FROM users u LEFT JOIN titles t ON u.title_id = t.id
      ORDER BY u.stars DESC LIMIT ?
    `, [limit]);
  },

  async sendMainMenu(ctx, edit = false) {
    const user = db.get('SELECT * FROM users WHERE id = ?', [ctx.from.id]);
    if (!user) {
      return ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ ${CONFIG.BOT_NAME}.`, { parse_mode: 'HTML' });
    }
    const invited = db.get('SELECT COUNT(*) as count FROM users WHERE referred_by = ?', [ctx.from.id]).count || 0;
    const messageText =
      `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ${CONFIG.BOT_NAME}!</b> üåü\n\n` +
      `–¢—ã –≤ –∏–≥—Ä–µ, –≥–¥–µ –º–æ–∂–Ω–æ <i>–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã</i> ‚ú®, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π –∏ —Å–æ–±–∏—Ä–∞—è –±–æ–Ω—É—Å—ã! üöÄ\n\n` +
      `üí´ <b>–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> ${user.stars} –∑–≤—ë–∑–¥\n` +
      `üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> ${invited}\n\n` +
      `–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Å—Ç–∞–Ω—å –∑–≤–µ–∑–¥–æ–π ${CONFIG.BOT_NAME}! üåü`;
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚≠ê –§–∞—Ä–º –∑–≤—ë–∑–¥', 'farm'), Markup.button.callback('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', 'bonus')],
      [Markup.button.callback('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'profile'), Markup.button.callback('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'leaders')],
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats'), Markup.button.callback('üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'ref')],
      [Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è', 'tasks')],
      [Markup.button.callback('üí° –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', 'enter_code')],
      CONFIG.ADMIN_IDS.includes(ctx.from.id) ? [Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin')] : []
    ]);
    return edit && ctx.callbackQuery?.message
      ? ctx.editMessageText(messageText, { parse_mode: 'HTML', ...keyboard })
      : ctx.reply(messageText, { parse_mode: 'HTML', ...keyboard });
  },

  updateUserTitle(ctx, userId) {
    const user = db.get('SELECT * FROM users WHERE id = ?', [userId]);
    if (!user) return;
    const stats = {
      stars: user.stars || 0,
      referrals: db.get('SELECT COUNT(*) as count FROM users WHERE referred_by = ?', [userId]).count || 0,
      tasks: db.get('SELECT COUNT(*) as count FROM user_tasks WHERE user_id = ? AND completed = 1', [userId]).count || 0,
      promo_codes: db.get('SELECT COUNT(*) as count FROM promo_codes WHERE used_by LIKE ?', [`%${userId}%`]).count || 0,
      daily_streak: user.daily_streak || 0,
      top_stars: db.all('SELECT id FROM users ORDER BY stars DESC LIMIT 3', []).map(u => u.id).indexOf(userId) + 1
    };

    const titles = db.all('SELECT * FROM titles ORDER BY is_secret ASC, id DESC', []);
    let newTitle = null;
    for (const title of titles) {
      let achieved = false;
      if (title.condition_type === 'combined') {
        const conditions = JSON.parse(title.condition_value);
        if (title.name === '–õ–µ–≥–µ–Ω–¥–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π') {
          achieved = stats.stars >= conditions.stars && stats.referrals >= conditions.referrals;
        } else if (title.name === '–ó–≤—ë–∑–¥–Ω—ã–π –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä') {
          achieved = stats.tasks >= conditions.tasks && stats.daily_streak >= conditions.daily_streak;
        } else if (title.name === '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –í–ª–∞—Å—Ç–µ–ª–∏–Ω') {
          achieved = stats.promo_codes >= conditions.promo_codes && stats.top_stars > 0 && stats.top_stars <= conditions.top_stars;
        }
      } else {
        const value = parseInt(title.condition_value);
        achieved = stats[title.condition_type] >= value;
      }
      if (achieved && (!user.title_id || parseInt(db.get('SELECT id FROM titles WHERE id = ?', [user.title_id])?.id || 0) < title.id)) {
        newTitle = title;
        break;
      }
    }

    if (newTitle && newTitle.id !== user.title_id) {
      db.run('UPDATE users SET title_id = ? WHERE id = ?', [newTitle.id, userId]);
      ctx.telegram.sendMessage(
        userId,
        `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø–æ–ª—É—á–∏–ª —Ç–∏—Ç—É–ª <b>${newTitle.name}</b>! üåü\n\n<i>${newTitle.description}</i>`,
        { parse_mode: 'HTML' }
      ).catch(err => console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∏—Ç—É–ª–µ –¥–ª—è ${userId}:`, err));
    }
  }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
bot.use(async (ctx, next) => {
  ctx.session = ctx.session || {};
  const user = db.get('SELECT * FROM users WHERE id = ?', [ctx.from.id]);
  if (!user && ctx.updateType === 'message' && ctx.message?.text !== '/start') {
    return ctx.reply(`‚ùå –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ ${CONFIG.BOT_NAME}! üöÄ`, { parse_mode: 'HTML' });
  }
  return next();
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  ctx.session = { currentTaskIndex: 0, waitingFor: {} };
  const id = ctx.from.id;
  const username = ctx.from.username || ctx.from.first_name || '–±–µ–∑ –Ω–∏–∫–∞';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;

  if (!(await utils.isUserSubscribed(ctx))) {
    return ctx.reply(
      `üîí <b>–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n` +
      `üì¢ –≠—Ç–æ —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –∑–≤—ë–∑–¥–∞–º ${CONFIG.BOT_NAME}! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ ${CONFIG.REQUIRED_CHANNEL} –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è! üåü`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${CONFIG.REQUIRED_CHANNEL.replace('@', '')}`)],
          [Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_sub')]
        ])
      }
    );
  }

  const existing = db.get('SELECT * FROM users WHERE id = ?', [id]);
  if (!existing) {
    db.run('INSERT INTO users (id, username, referred_by, stars, daily_streak) VALUES (?, ?, ?, ?, ?)', [id, username, referral, 0, 0]);
    if (referral && referral !== id) {
      const referrer = db.get('SELECT * FROM users WHERE id = ?', [referral]);
      if (referrer) {
        db.run('UPDATE users SET stars = stars + 10 WHERE id = ?', [referral]);
        ctx.telegram.sendMessage(
          referral,
          `üéâ –¢–≤–æ–π –¥—Ä—É–≥ @${username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ ${CONFIG.BOT_NAME}! +10 –∑–≤—ë–∑–¥! üåü`,
          { parse_mode: 'HTML' }
        ).catch(err => console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ ${referral}:`, err));
        utils.updateUserTitle(ctx, referral);
      }
    }
  }

  await utils.sendMainMenu(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (ctx) => {
  const id = ctx.from.id;
  const action = ctx.callbackQuery.data;
  const user = db.get('SELECT * FROM users WHERE id = ?', [id]);
  if (!user && action !== 'check_sub') {
    return ctx.answerCbQuery(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–∞–ø–∏—à–∏ /start –≤ ${CONFIG.BOT_NAME}.`, { show_alert: true });
  }

  try {
    if (action === 'check_sub') {
      if (!(await utils.isUserSubscribed(ctx))) {
        return ctx.answerCbQuery(`‚ùå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ ${CONFIG.REQUIRED_CHANNEL} –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ ${CONFIG.BOT_NAME}!`, { show_alert: true });
      }
      const existing = db.get('SELECT * FROM users WHERE id = ?', [id]);
      if (!existing) {
        const username = ctx.from.username || ctx.from.first_name || '–±–µ–∑ –Ω–∏–∫–∞';
        const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;
        db.run('INSERT INTO users (id, username, referred_by, stars, daily_streak) VALUES (?, ?, ?, ?, ?)', [id, username, referral, 0, 0]);
        if (referral && referral !== id) {
          const referrer = db.get('SELECT * FROM users WHERE id = ?', [referral]);
          if (referrer) {
            db.run('UPDATE users SET stars = stars + 10 WHERE id = ?', [referral]);
            ctx.telegram.sendMessage(
              referral,
              `üéâ –¢–≤–æ–π –¥—Ä—É–≥ @${username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ ${CONFIG.BOT_NAME}! +10 –∑–≤—ë–∑–¥! üåü`,
              { parse_mode: 'HTML' }
            ).catch(err => console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ ${referral}:`, err));
            utils.updateUserTitle(ctx, referral);
          }
        }
      }
      await utils.sendMainMenu(ctx);
      return ctx.answerCbQuery('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', { show_alert: true });
    }

    if (action === 'farm') {
      const now = Date.now();
      if (now - user.last_farm < CONFIG.FARM_COOLDOWN_SECONDS * 1000) {
        const seconds = Math.ceil((CONFIG.FARM_COOLDOWN_SECONDS * 1000 - (now - user.last_farm)) / 1000);
        return ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏ ${seconds} —Å–µ–∫. –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞!`, { show_alert: true });
      }
      db.run('UPDATE users SET stars = stars + 1, last_farm = ? WHERE id = ?', [now, id]);
      utils.updateUserTitle(ctx, id);
      await utils.sendMainMenu(ctx, true);
      return ctx.answerCbQuery(`‚≠ê +1 –∑–≤–µ–∑–¥–∞! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${db.get('SELECT stars FROM users WHERE id = ?', [id]).stars} –∑–≤—ë–∑–¥.`, { show_alert: true });
    }

    if (action === 'bonus') {
      const nowDay = dayjs();
      const last = user.last_bonus ? dayjs(user.last_bonus) : null;
      if (last && nowDay.diff(last, 'hour') < 24) {
        const hoursLeft = 24 - nowDay.diff(last, 'hour');
        const minutesLeft = Math.ceil((24 * 60 - nowDay.diff(last, 'minute')) % 60);
        return ctx.answerCbQuery(`üéÅ –ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${hoursLeft} —á. ${minutesLeft} –º–∏–Ω.`, { show_alert: true });
      }
      const dailyStreak = last && nowDay.diff(last, 'day') === 1 ? user.daily_streak + 1 : 1;
      db.run('UPDATE users SET stars = stars + 5, last_bonus = ?, daily_streak = ? WHERE id = ?', [nowDay.toISOString(), dailyStreak, id]);
      utils.updateUserTitle(ctx, id);
      await utils.sendMainMenu(ctx, true);
      return ctx.answerCbQuery(`üéâ +5 –∑–≤—ë–∑–¥! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${db.get('SELECT stars FROM users WHERE id = ?', [id]).stars} –∑–≤—ë–∑–¥.`, { show_alert: true });
    }

    if (action === 'tasks' || action === 'next_task') {
      ctx.session.currentTaskIndex = action === 'next_task' ? (ctx.session.currentTaskIndex || 0) + 1 : ctx.session.currentTaskIndex || 0;
      const tasks = db.all('SELECT * FROM tasks', []);
      if (tasks.length === 0) {
        return ctx.editMessageText(
          `üìã <b>–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç!</b>\n\n<i>–ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è, —Å–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ ${CONFIG.BOT_NAME}!</i>`,
          { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
        );
      }
      const taskIndex = ctx.session.currentTaskIndex % tasks.length;
      const task = tasks[taskIndex];
      const userTask = db.get('SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ?', [id, task.id]) || { progress: 0, completed: 0 };
      const taskStatus = userTask.completed ? '‚úÖ <i>–í—ã–ø–æ–ª–Ω–µ–Ω–æ</i>' : userTask.progress > 0 ? '‚è≥ <i>–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</i>' : 'üî• <i>–ù–µ –Ω–∞—á–∞—Ç–æ</i>';
      const buttons = [
        [
          task.type.includes('subscribe_channel')
            ? Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${(task.type === 'subscribe_channel' ? CONFIG.TASK_CHANNEL : CONFIG.TASK_CHANNEL_KITTY).replace('@', '')}`)
            : Markup.button.url('ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞', CONFIG.TASK_BOT_LINK),
          Markup.button.callback('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç', `check_task_${task.id}`)
        ],
        [Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', 'next_task')],
        [Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]
      ];
      const messageText =
        `üìã <b>–ó–∞–¥–∞–Ω–∏–µ #${taskIndex + 1}/${tasks.length}</b>\n\n` +
        `üéØ <b>${task.description}</b>\n` +
        `üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> ${task.reward} –∑–≤—ë–∑–¥\n` +
        `üìå <b>–°—Ç–∞—Ç—É—Å:</b> ${taskStatus}\n\n` +
        `<i>–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!</i>`;
      return action === 'next_task'
        ? ctx.editMessageText(messageText, { parse_mode: 'HTML', ...Markup.inlineKeyboard(buttons) })
        : ctx.reply(messageText, { parse_mode: 'HTML', ...Markup.inlineKeyboard(buttons) });
    }

    if (action.startsWith('check_task_')) {
      const taskId = parseInt(action.split('_')[2]);
      const task = db.get('SELECT * FROM tasks WHERE id = ?', [taskId]);
      if (!task) return ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!', { show_alert: true });
      const userTask = db.get('SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ?', [id, task.id]) || { progress: 0, completed: 0 };
      if (userTask.completed) return ctx.answerCbQuery(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü–µ—Ä–µ–π–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤ ${CONFIG.BOT_NAME}! üåü`, { show_alert: true });
      if (userTask.progress > 0) return ctx.answerCbQuery('‚è≥ –ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤! üïí', { show_alert: true });
      ctx.session.waitingFor = { type: 'task_screenshot', taskId };
      return ctx.reply(
        'üì∏ <b>–û—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç</b>\n\n–°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å—é–¥–∞! üì∑',
        { parse_mode: 'HTML' }
      );
    }

    if (action === 'profile') {
      const invited = db.get('SELECT COUNT(*) as count FROM users WHERE referred_by = ?', [id]).count || 0;
      const referredByUser = user.referred_by ? db.get('SELECT username FROM users WHERE id = ?', [user.referred_by]) : null;
      const referrerName = referredByUser ? `@${referredByUser.username || '–±–µ–∑ –Ω–∏–∫–∞'}` : '‚Äî';
      const title = user.title_id ? db.get('SELECT name, description FROM titles WHERE id = ?', [user.title_id]) : null;
      const titleText = title ? `${title.name} (${title.description})` : '–ù–µ—Ç —Ç–∏—Ç—É–ª–∞';
      const completedTasks = db.all('SELECT t.description FROM user_tasks ut JOIN tasks t ON ut.task_id = t.id WHERE ut.user_id = ? AND ut.completed = 1', [id]);
      const nowDay = dayjs();
      const lastBonus = user.last_bonus ? dayjs(user.last_bonus) : null;
      const bonusStatus = lastBonus && nowDay.diff(lastBonus, 'hour') < 24
        ? `‚è≥ –î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ ${24 - nowDay.diff(lastBonus, 'hour')} —á. ${Math.ceil((24 * 60 - nowDay.diff(lastBonus, 'minute')) % 60)} –º–∏–Ω.`
        : '‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ!';
      const profileText =
        `üåü <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ ${CONFIG.BOT_NAME}</b> ‚ú®\n\n` +
        `üë§ <b>–ò–º—è:</b> ${ctx.from.first_name || '–ê–Ω–æ–Ω–∏–º'}\n` +
        `üèÖ <b>–¢–∏—Ç—É–ª:</b> ${titleText}\n` +
        `üÜî <b>ID:</b> ${user.id}\n` +
        `üí´ <b>–ó–≤—ë–∑–¥—ã:</b> ${user.stars} ‚ú®\n` +
        `üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> ${invited}\n` +
        `üì£ <b>–¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª:</b> ${referrerName}\n` +
        `üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å:</b> ${bonusStatus}\n` +
        `üìã <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b> ${completedTasks.length > 0 ? completedTasks.map(t => t.description).join(', ') : '–ù–µ—Ç'}\n\n` +
        `<i>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥ –∏ —Å—Ç–∞–Ω—å –ª–µ–≥–µ–Ω–¥–æ–π ${CONFIG.BOT_NAME}!</i>`;
      return ctx.reply(profileText, {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support'), Markup.button.callback('‚ùì FAQ', 'faq')],
          [Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]
        ])
      });
    }

    if (action === 'faq') {
      const faqText =
        `‚ùì <b>FAQ –ø–æ ${CONFIG.BOT_NAME}</b> ‚ú®\n\n` +
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç, –≥–¥–µ —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –∑–≤—ë–∑–¥—ã ‚ú® –∏ —Å–æ—Ä–µ–≤–Ω—É–µ—à—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏! –í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å:\n\n` +
        `‚≠ê <b>–§–∞—Ä–º –∑–≤—ë–∑–¥</b>: –ù–∞–∂–∏–º–∞–π "–§–∞—Ä–º" –∫–∞–∂–¥—ã–µ ${CONFIG.FARM_COOLDOWN_SECONDS} —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ª—É—á–∞–π +1 –∑–≤–µ–∑–¥—É!\n` +
        `üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</b>: –†–∞–∑ –≤ 24 —á–∞—Å–∞ –ø–æ–ª—É—á–∞–π +5 –∑–≤—ë–∑–¥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n` +
        `üìã <b>–ó–∞–¥–∞–Ω–∏—è</b>: –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–π –±–æ—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –ø–æ–ª—É—á–∞–π –¥–æ 10 –∑–≤—ë–∑–¥!\n` +
        `üë• <b>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π</b>: –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ, +10 –∑–≤—ë–∑–¥!\n` +
        `üí° <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã</b>: –í–≤–æ–¥–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–≤—ë–∑–¥.\n` +
        `üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>: –ü–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ—è—Å–Ω–æ, ‚Äî –æ—Ç–≤–µ—Ç–∏–º –±—ã—Å—Ç—Ä–æ!\n\n` +
        `üèÜ –°–º–æ—Ç—Ä–∏ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Å—è –∑–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ!\n` +
        `<i>–ü–æ–¥—Å–∫–∞–∑–∫–∞: —á–∞—â–µ –ø—Ä–æ–≤–µ—Ä—è–π –∑–∞–¥–∞–Ω–∏—è ‚Äî –Ω–æ–≤—ã–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ!</i>`;
      return ctx.reply(faqText, {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üèÖ –¢–∏—Ç—É–ª—ã', 'titles')],
          [Markup.button.callback('üîô –í –ø—Ä–æ—Ñ–∏–ª—å', 'profile'), Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]
        ])
      });
    }

    if (action === 'titles') {
      const titles = db.all('SELECT * FROM titles WHERE is_secret = 0', []);
      const stats = {
        stars: user.stars || 0,
        referrals: db.get('SELECT COUNT(*) as count FROM users WHERE referred_by = ?', [id]).count || 0,
        tasks: db.get('SELECT COUNT(*) as count FROM user_tasks WHERE user_id = ? AND completed = 1', [id]).count || 0,
        promo_codes: db.get('SELECT COUNT(*) as count FROM promo_codes WHERE used_by LIKE ?', [`%${id}%`]).count || 0,
        daily_streak: user.daily_streak || 0
      };
      const titleList = titles.map(title => {
        const value = parseInt(title.condition_value);
        const progress = stats[title.condition_type] || 0;
        const progressText = title.condition_type === 'stars' ? `${progress}/${value} –∑–≤—ë–∑–¥` :
                            title.condition_type === 'referrals' ? `${progress}/${value} –¥—Ä—É–∑–µ–π` :
                            title.condition_type === 'tasks' ? `${progress}/${value} –∑–∞–¥–∞–Ω–∏–π` :
                            title.condition_type === 'daily_streak' ? `${progress}/${value} –¥–Ω–µ–π` :
                            title.condition_type === 'promo_codes' ? `${progress}/${value} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤` : '‚Äî';
        return `üèÖ <b>${title.name}</b>: ${title.description}\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressText}`;
      }).join('\n\n');
      return ctx.reply(
        `üèÖ <b>–¢–∏—Ç—É–ª—ã –≤ ${CONFIG.BOT_NAME}</b> üåü\n\n` +
        `${titleList || '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤.'}\n\n` +
        `<i>–°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏—Ç—É–ª—ã —Å–ø—Ä—è—Ç–∞–Ω—ã, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –∏—Ö –æ—Ç–∫—Ä—ã—Ç—å! üòâ</i>`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ö FAQ', 'faq'), Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]
          ])
        }
      );
    }

    if (action === 'support') {
      ctx.session.waitingFor = { type: 'support' };
      return ctx.reply(
        `üìû <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ${CONFIG.BOT_NAME}</b>\n\n` +
        `–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –±—ã—Å—Ç—Ä–æ! üöÄ`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_support')]]) }
      );
    }

    if (action === 'cancel_support') {
      ctx.session.waitingFor = {};
      return utils.sendMainMenu(ctx);
    }

    if (action === 'leaders') {
      const top = utils.getTopUsers();
      const list = top.length > 0
        ? top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ${u.title_name ? `(${u.title_name})` : ''} ‚Äî ${u.stars} ‚≠ê ‚Äî –¥—Ä—É–∑–µ–π: ${u.referrals}`).join('\n')
        : 'üòî –ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤. –ë—É–¥—å –ø–µ—Ä–≤—ã–º! üöÄ';
      return ctx.reply(
        `üèÜ <b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ ${CONFIG.BOT_NAME}</b> üåü\n\n${list}\n\n<i>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!</i>`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
      );
    }

    if (action === 'stats') {
      const total = db.get('SELECT COUNT(*) as count FROM users').count || 0;
      const totalStars = db.get('SELECT SUM(stars) as stars FROM users').stars || 0;
      const completedTasks = db.get('SELECT COUNT(*) as count FROM user_tasks WHERE completed = 1').count || 0;
      return ctx.reply(
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${CONFIG.BOT_NAME}</b> ‚ú®\n\n` +
        `üë• <b>–ò–≥—Ä–æ–∫–æ–≤:</b> ${total}\n` +
        `‚≠ê <b>–í—Å–µ–≥–æ –∑–≤—ë–∑–¥:</b> ${totalStars}\n` +
        `üìã <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:</b> ${completedTasks}\n\n` +
        `<i>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–π –∑–≤—ë–∑–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ!</i>`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
      );
    }

    if (action === 'ref') {
      const link = `https://t.me/${ctx.me}?start=${id}`;
      return ctx.reply(
        `üì© <b>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –≤ ${CONFIG.BOT_NAME}!</b> üë•\n\n` +
        `–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<a href="${link}">${link}</a>\n\n` +
        `–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ, —Ç—ã –ø–æ–ª—É—á–∏—à—å <b>+10 –∑–≤—ë–∑–¥</b>! üåü\n` +
        `<i>–î–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –ª–∏–¥–µ—Ä–æ–º!</i>`,
        { parse_mode: 'HTML', disable_web_page_preview: true, ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
      );
    }

    if (action === 'enter_code') {
      ctx.session.waitingFor = { type: 'promo_code' };
      return ctx.reply(
        `üí° <b>–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n` +
        `–û—Ç–ø—Ä–∞–≤—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –∑–≤—ë–∑–¥—ã –≤ ${CONFIG.BOT_NAME}! ‚ú®`,
        { parse_mode: 'HTML' }
      );
    }

    if (action === 'admin') {
      if (!CONFIG.ADMIN_IDS.includes(id)) return ctx.answerCbQuery(`‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ${CONFIG.BOT_NAME}!`, { show_alert: true });
      return ctx.reply(
        `‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ${CONFIG.BOT_NAME}</b> üîí\n\n–£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º –∏ —Å–ª–µ–¥–∏ –∑–∞ –∑–≤—ë–∑–¥–∞–º–∏! üåü`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
            [Markup.button.callback('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'admin_top')],
            [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
            [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
            [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'admin_addtask')],
            [Markup.button.callback('üìû –¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏', 'admin_tickets')],
            [Markup.button.callback('‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥–∞–º–∏', 'admin_stars')],
            [Markup.button.callback('üèÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏', 'admin_titles')],
            [Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]
          ])
        }
      );
    }

    if (action === 'admin_stats') {
      const stats = {
        total: db.get('SELECT COUNT(*) as count FROM users').count || 0,
        totalStars: db.get('SELECT SUM(stars) as stars FROM users').stars || 0,
        openTickets: db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['open']).count || 0,
        inProgressTickets: db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['in_progress']).count || 0,
        closedTickets: db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['closed']).count || 0,
        approvedTasks: db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['approved']).count || 0,
        rejectedTasks: db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['rejected']).count || 0
      };
      return ctx.answerCbQuery(
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${CONFIG.BOT_NAME}</b>\n\n` +
        `üë• –ò–≥—Ä–æ–∫–æ–≤: ${stats.total}\n` +
        `‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${stats.totalStars}\n` +
        `üìû –¢–∏–∫–µ—Ç—ã: –û—Ç–∫—Ä—ã—Ç–æ: ${stats.openTickets} | –í —Ä–∞–±–æ—Ç–µ: ${stats.inProgressTickets} | –ó–∞–∫—Ä—ã—Ç–æ: ${stats.closedTickets}\n` +
        `üìã –ó–∞—è–≤–∫–∏: –û–¥–æ–±—Ä–µ–Ω–æ: ${stats.approvedTasks} | –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${stats.rejectedTasks}`,
        { show_alert: true }
      );
    }

    if (action === 'admin_top') {
      const top = utils.getTopUsers();
      const list = top.length > 0
        ? top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ${u.title_name ? `(${u.title_name})` : ''} ‚Äî ${u.stars} ‚≠ê`).join('\n')
        : 'üòî –ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤.';
      return ctx.reply(
        `üèÜ <b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ ${CONFIG.BOT_NAME}</b> üåü\n\n${list}\n\n<i>–≠—Ç–æ –ª—É—á—à–∏–µ –∑–≤—ë–∑–¥–Ω—ã–µ –æ—Ö–æ—Ç–Ω–∏–∫–∏!</i>`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
      );
    }

    if (action === 'admin_broadcast') {
      ctx.session.waitingFor = { type: 'broadcast' };
      return ctx.reply(
        `üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n` +
        `–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ${CONFIG.BOT_NAME}. –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–π–¥—ë—Ç –≤—Å–µ–º! üö®`,
        { parse_mode: 'HTML' }
      );
    }

    if (action === 'admin_addcode') {
      ctx.session.waitingFor = { type: 'add_promo' };
      return ctx.reply(
        `‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n` +
        `–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–ö–û–î –ó–í–Å–ó–î–´ –ê–ö–¢–ò–í–ê–¶–ò–ò</code>\n` +
        `–ü—Ä–∏–º–µ—Ä: <code>STAR2025 10 5</code>`,
        { parse_mode: 'HTML' }
      );
    }

    if (action === 'admin_addtask') {
      ctx.session.waitingFor = { type: 'add_task' };
      return ctx.reply(
        `‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ</b>\n\n` +
        `–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–¢–ò–ü –û–ü–ò–°–ê–ù–ò–ï –¶–ï–õ–¨ –ù–ê–ì–†–ê–î–ê</code>\n` +
        `–ü—Ä–∏–º–µ—Ä: <code>subscribe_channel –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ ${CONFIG.TASK_CHANNEL} 1 5</code>`,
        { parse_mode: 'HTML' }
      );
    }

    if (action === 'admin_stars') {
      ctx.session.waitingFor = { type: 'manage_stars' };
      return ctx.reply(
        `‚≠ê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥–∞–º–∏</b>\n\n` +
        `–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>ID_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ö–û–õ–ò–ß–ï–°–¢–í–û</code>\n` +
        `–ü—Ä–∏–º–µ—Ä: <code>123456789 50</code> –¥–ª—è –≤—ã–¥–∞—á–∏ –∏–ª–∏ <code>123456789 -50</code> –¥–ª—è —Å–Ω—è—Ç–∏—è`,
        { parse_mode: 'HTML' }
      );
    }

    if (action === 'admin_titles') {
      ctx.session.waitingFor = { type: 'manage_titles' };
      const secretTitles = db.all('SELECT id, name FROM titles WHERE is_secret = 1', []);
      const titleList = secretTitles.length > 0
        ? secretTitles.map(t => `${t.id}. ${t.name}`).join('\n')
        : 'üòî –ù–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤.';
      return ctx.reply(
        `üèÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏</b>\n\n` +
        `–°–ø–∏—Å–æ–∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤:\n${titleList}\n\n` +
        `–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>ID_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID_–¢–ò–¢–£–õ–ê</code>\n` +
        `–ü—Ä–∏–º–µ—Ä: <code>123456789 10</code> –∏–ª–∏ <code>123456789 0</code> –¥–ª—è —Å–Ω—è—Ç–∏—è`,
        { parse_mode: 'HTML' }
      );
    }

    if (action.startsWith('ticket_')) {
      const ticketId = parseInt(action.split('_')[1]);
      const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
      if (!ticket) return ctx.answerCbQuery('‚ùå –¢–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!', { show_alert: true });
      const fileIds = ticket.file_id ? JSON.parse(ticket.file_id) : [];
      const fileText = fileIds.length > 0 ? `üìé <b>–§–∞–π–ª—ã:</b> ${fileIds.length} —à—Ç.` : 'üìé <b>–§–∞–π–ª–æ–≤ –Ω–µ—Ç</b>';
      const type = ticket.task_type
        ? `üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (${ticket.task_type.includes('subscribe_channel') ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${ticket.task_type === 'subscribe_channel' ? CONFIG.TASK_CHANNEL : CONFIG.TASK_CHANNEL_KITTY}` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'})`
        : 'üìû –¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏';
      const ticketText =
        `${type} #${ticket.ticket_id}\n\n` +
        `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
        `üÜî ID: ${ticket.user_id}\n` +
        `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticket.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
        `${fileText}\n` +
        `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${ticket.created_at}\n` +
        `üìå <b>–°—Ç–∞—Ç—É—Å:</b> ${ticket.status === 'open' ? '–û—Ç–∫—Ä—ã—Ç' : ticket.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : ticket.status === 'approved' ? '–û–¥–æ–±—Ä–µ–Ω–æ' : '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'}\n\n` +
        `<i>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:</i>`;
      const buttons = [];
      if (ticket.task_type) {
        buttons.push(
          [Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_task_${ticket.ticket_id}`)],
          [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_task_${ticket.ticket_id}`)]
        );
      } else {
        buttons.push(
          [Markup.button.callback('‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', `reply_ticket_${ticket.ticket_id}`)],
          [Markup.button.callback('üîÑ –í —Ä–∞–±–æ—Ç–µ', `set_ticket_status_${ticket.ticket_id}_in_progress`)],
          [Markup.button.callback('‚úÖ –ó–∞–∫—Ä—ã—Ç—å', `set_ticket_status_${ticket.ticket_id}_closed`)]
        );
      }
      if (fileIds.length > 0) {
        buttons.unshift([Markup.button.callback('üìé –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã', `view_files_${ticket.ticket_id}`)]);
      }
      buttons.push([Markup.button.callback('üîô –ö —Ç–∏–∫–µ—Ç–∞–º', 'admin_tickets')]);
      return ctx.editMessageText(ticketText, { parse_mode: 'HTML', ...Markup.inlineKeyboard(buttons) });
    }

    if (action.startsWith('view_files_')) {
      const ticketId = parseInt(action.split('_')[2]);
      const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
      if (!ticket || !ticket.file_id) return ctx.answerCbQuery('‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!', { show_alert: true });
      const fileIds = JSON.parse(ticket.file_id);
      for (const fileId of fileIds) {
        await ctx.telegram.sendPhoto(id, fileId, { caption: `üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ ${ticket.task_type ? '–∑–∞—è–≤–∫–∏' : '—Ç–∏–∫–µ—Ç–∞'} #${ticketId}` });
      }
      return ctx.answerCbQuery('üìé –§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç!', { show_alert: true });
    }

    if (action.startsWith('approve_task_')) {
      const ticketId = parseInt(action.split('_')[2]);
      const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
      if (!ticket) return ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', { show_alert: true });
      const task = db.get('SELECT id, reward FROM tasks WHERE type = ?', [ticket.task_type]);
      if (!task) return ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!', { show_alert: true });
      db.run('UPDATE tickets SET status = ? WHERE ticket_id = ?', ['approved', ticketId]);
      db.run('INSERT OR REPLACE INTO user_tasks (user_id, task_id, progress, completed) VALUES (?, ?, ?, ?)', [ticket.user_id, task.id, 1, 1]);
      db.run('UPDATE users SET stars = stars + ? WHERE id = ?', [task.reward, ticket.user_id]);
      utils.updateUserTitle(ctx, ticket.user_id);
      if (ticket.channel_message_id) {
        try {
          const updatedText =
            `üìã <b>–ó–∞—è–≤–∫–∞ #${ticket.ticket_id}</b>\n\n` +
            `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
            `ÔøΩID: ${ticket.user_id}\n` +
            `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticket.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
            `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${ticket.created_at}\n` +
            `üìå <b>–°—Ç–∞—Ç—É—Å:</b> –û–¥–æ–±—Ä–µ–Ω–æ ‚úÖ\n` +
            `üéâ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> ${task.reward} –∑–≤—ë–∑–¥`;
          await ctx.telegram.editMessageText(CONFIG.SUPPORT_CHANNEL, ticket.channel_message_id, undefined, updatedText, { parse_mode: 'HTML' });
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        }
      }
      const taskName = ticket.task_type.includes('subscribe_channel')
        ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${ticket.task_type === 'subscribe_channel' ? CONFIG.TASK_CHANNEL : CONFIG.TASK_CHANNEL_KITTY}`
        : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞';
      await ctx.telegram.sendMessage(
        ticket.user_id,
        `üìã <b>–ó–∞—è–≤–∫–∞ #${ticketId}</b> –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ "${taskName}" <b>–æ–¥–æ–±—Ä–µ–Ω–∞</b>! üéâ\n\n` +
        `–¢—ã –ø–æ–ª—É—á–∏–ª <b>${task.reward} –∑–≤—ë–∑–¥</b>! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${db.get('SELECT stars FROM users WHERE id = ?', [ticket.user_id]).stars} ‚≠ê`,
        { parse_mode: 'HTML' }
      ).catch(err => console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ticket.user_id}:`, err));
      await ctx.answerCbQuery(`‚úÖ –ó–∞—è–≤–∫–∞ #${ticketId} –æ–¥–æ–±—Ä–µ–Ω–∞!`, { show_alert: true });
      return ctx.reply(
        `üìû <b>–¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: üîç`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –ö —Ç–∏–∫–µ—Ç–∞–º', 'admin_tickets')]]) }
      );
    }

    if (action.startsWith('reject_task_')) {
      const ticketId = parseInt(action.split('_')[2]);
      const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
      if (!ticket) return ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', { show_alert: true });
      db.run('UPDATE tickets SET status = ? WHERE ticket_id = ?', ['rejected', ticketId]);
      const task = db.get('SELECT id FROM tasks WHERE type = ?', [ticket.task_type]);
      if (task) {
        db.run('DELETE FROM user_tasks WHERE user_id = ? AND task_id = ?', [ticket.user_id, task.id]);
      }
      if (ticket.channel_message_id) {
        try {
          const updatedText =
            `üìã <b>–ó–∞—è–≤–∫–∞ #${ticket.ticket_id}</b>\n\n` +
            `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
            `üÜî ID: ${ticket.user_id}\n` +
            `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticket.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
            `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${ticket.created_at}\n` +
            `üìå <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå`;
          await ctx.telegram.editMessageText(CONFIG.SUPPORT_CHANNEL, ticket.channel_message_id, undefined, updatedText, { parse_mode: 'HTML' });
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        }
      }
      const taskName = ticket.task_type.includes('subscribe_channel')
        ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${ticket.task_type === 'subscribe_channel' ? CONFIG.TASK_CHANNEL : CONFIG.TASK_CHANNEL_KITTY}`
        : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞';
      await ctx.telegram.sendMessage(
        ticket.user_id,
        `üìã <b>–ó–∞—è–≤–∫–∞ #${ticketId}</b> –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ "${taskName}" <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b> ‚ùå\n\n` +
        `–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! –°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. üõ†`,
        { parse_mode: 'HTML' }
      ).catch(err => console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ticket.user_id}:`, err));
      await ctx.answerCbQuery(`‚ùå –ó–∞—è–≤–∫–∞ #${ticketId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!`, { show_alert: true });
      return ctx.reply(
        `üìû <b>–¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: üîç`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –ö —Ç–∏–∫–µ—Ç–∞–º', 'admin_tickets')]]) }
      );
    }

    if (action.startsWith('reply_ticket_')) {
      const ticketId = parseInt(action.split('_')[2]);
      ctx.session.waitingFor = { type: 'ticket_reply', ticketId };
      return ctx.reply(`‚úçÔ∏è <b>–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId}</b>\n\n–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, { parse_mode: 'HTML' });
    }

    if (action.startsWith('set_ticket_status_')) {
      const parts = action.split('_');
      const ticketId = parseInt(parts[3]);
      const status = parts.slice(4).join('_');
      if (!['in_progress', 'closed'].includes(status)) return ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å!', { show_alert: true });
      db.run('UPDATE tickets SET status = ? WHERE ticket_id = ?', [status, ticketId]);
      const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
      if (!ticket) return ctx.answerCbQuery('‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!', { show_alert: true });
      if (ticket.channel_message_id) {
        try {
          const updatedText =
            `üìû <b>–¢–∏–∫–µ—Ç #${ticket.ticket_id}</b>\n\n` +
            `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
            `üÜî ID: ${ticket.user_id}\n` +
            `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticket.description}\n` +
            `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${ticket.created_at}\n` +
            `üìå <b>–°—Ç–∞—Ç—É—Å:</b> ${ticket.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}`;
          await ctx.telegram.editMessageText(CONFIG.SUPPORT_CHANNEL, ticket.channel_message_id, undefined, updatedText, { parse_mode: 'HTML' });
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        }
      }
      await ctx.telegram.sendMessage(
        ticket.user_id,
        `üìû <b>–¢–∏–∫–µ—Ç #${ticketId}</b>\n\n–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: <b>${ticket.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}</b>`,
        { parse_mode: 'HTML' }
      ).catch(err => console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ticket.user_id}:`, err));
      await ctx.answerCbQuery(`‚úÖ –°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ #${ticketId} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "${ticket.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}"`, { show_alert: true });
      return ctx.reply(
        `üìû <b>–¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: üîç`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –ö —Ç–∏–∫–µ—Ç–∞–º', 'admin_tickets')]]) }
      );
    }

    if (action === 'back') {
      return utils.sendMainMenu(ctx);
    }

    if (action === 'admin_tickets') {
      const tickets = db.all('SELECT * FROM tickets WHERE status IN (?, ?) ORDER BY created_at DESC LIMIT 10', ['open', 'in_progress']);
      if (tickets.length === 0) {
        return ctx.reply(
          `üìû <b>–¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏</b>\n\nüòî –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∏–ª–∏ –∑–∞—è–≤–æ–∫.\n\n<i>–ü—Ä–æ–≤–µ—Ä—å –ø–æ–∑–∂–µ.</i>`,
          { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
        );
      }
      const buttons = tickets.map(ticket => {
        const type = ticket.task_type
          ? `üìã –ó–∞—è–≤–∫–∞ (${ticket.task_type.includes('subscribe_channel') ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${ticket.task_type === 'subscribe_channel' ? CONFIG.TASK_CHANNEL : CONFIG.TASK_CHANNEL_KITTY}` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'})`
          : 'üìû –¢–∏–∫–µ—Ç';
        return [Markup.button.callback(`${type} #${ticket.ticket_id} (@${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}, ${ticket.status === 'open' ? '–û—Ç–∫—Ä—ã—Ç' : '–í —Ä–∞–±–æ—Ç–µ'})`, `ticket_${ticket.ticket_id}`)];
      });
      buttons.push([Markup.button.callback('üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', 'admin')]);
      return ctx.reply(
        `üìû <b>–¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: üîç`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard(buttons) }
      );
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ callback_query:', err);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!', { show_alert: true });
  } finally {
    if (!['admin', 'admin_stats', 'admin_top', 'admin_broadcast', 'admin_addcode', 'admin_addtask', 'admin_stars', 'admin_titles', 'ticket_', 'view_files_', 'approve_task_', 'reject_task_', 'reply_ticket_', 'set_ticket_status_'].some(prefix => action.startsWith(prefix))) {
      await ctx.answerCbQuery();
    }
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
  const id = ctx.from.id;
  const user = db.get('SELECT * FROM users WHERE id = ?', [id]);
  if (!user) {
    ctx.session.waitingFor = {};
    return ctx.reply(`‚ùå –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ ${CONFIG.BOT_NAME}! üöÄ`, { parse_mode: 'HTML' });
  }

  try {
    if (ctx.session.waitingFor?.type === 'task_screenshot') {
      const taskId = ctx.session.waitingFor.taskId;
      const task = db.get('SELECT * FROM tasks WHERE id = ?', [taskId]);
      if (!task) {
        ctx.session.waitingFor = {};
        return ctx.reply('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!', { parse_mode: 'HTML' });
      }
      if (!ctx.message.photo) {
        return ctx.reply(
          '‚ùå <b>–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ!</b>\n\n–ù—É–∂–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è. üì∑',
          { parse_mode: 'HTML' }
        );
      }
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      const fileId = photo.file_id;
      const description = `–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ: ${task.type.includes('subscribe_channel') ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${task.type === 'subscribe_channel' ? CONFIG.TASK_CHANNEL : CONFIG.TASK_CHANNEL_KITTY}` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'}`;
      let info;
      try {
        info = await ctx.telegram.sendMessage(CONFIG.SUPPORT_CHANNEL, 'üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–∫–∏...');
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ SUPPORT_CHANNEL:', err);
        ctx.session.waitingFor = {};
        return ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üõ†`, { parse_mode: 'HTML' });
      }
      db.run(
        `INSERT INTO tickets (user_id, username, description, created_at, file_id, channel_message_id, task_type)
        VALUES (?, ?, ?, ?, ?, ?, ?)`,
        [id, user.username || '–±–µ–∑ –Ω–∏–∫–∞', description, dayjs().toISOString(), JSON.stringify([fileId]), info.message_id, task.type]
      );
      const ticketId = db.get('SELECT last_insert_rowid() as id').id;
      const ticketText =
        `üìã <b>–ó–∞—è–≤–∫–∞ #${ticketId}</b>\n\n` +
        `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
        `üÜî ID: ${id}\n` +
        `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description}\n` +
        `üìé <b>–§–∞–π–ª:</b> 1 —à—Ç.\n` +
        `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${dayjs().format('YYYY-MM-DD HH:mm:ss')}\n` +
        `üìå <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫—Ä—ã—Ç`;
      try {
        await ctx.telegram.editMessageText(CONFIG.SUPPORT_CHANNEL, info.message_id, undefined, ticketText, { parse_mode: 'HTML' });
        await ctx.telegram.sendPhoto(CONFIG.SUPPORT_CHANNEL, fileId, { caption: `üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ #${ticketId}` });
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ SUPPORT_CHANNEL:', err);
        db.run('DELETE FROM tickets WHERE ticket_id = ?', [ticketId]);
        ctx.session.waitingFor = {};
        return ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üõ†`, { parse_mode: 'HTML' });
      }
      for (const adminId of CONFIG.ADMIN_IDS) {
        await ctx.telegram.sendMessage(
          adminId,
          `üìã <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${ticketId}</b>\n\n` +
          `–ó–∞–¥–∞–Ω–∏–µ: "${task.type.includes('subscribe_channel') ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${task.type === 'subscribe_channel' ? CONFIG.TASK_CHANNEL : CONFIG.TASK_CHANNEL_KITTY}` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'}"\n` +
          `–û—Ç: @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}`,
          { parse_mode: 'HTML' }
        ).catch(err => console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ ${adminId}:`, err));
      }
      ctx.session.waitingFor = {};
      return ctx.reply(
        `‚úÖ <b>–ó–∞—è–≤–∫–∞ #${ticketId}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! ‚è≥\n\n` +
        `–û–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–æ–≤. –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ó–∞–¥–∞–Ω–∏—è". üìã`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
      );
    }

    if (ctx.session.waitingFor?.type === 'support') {
      const description = ctx.message.text || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
      const fileIds = [];
      if (ctx.message.photo) fileIds.push(ctx.message.photo[ctx.message.photo.length - 1].file_id);
      if (ctx.message.document) fileIds.push(ctx.message.document.file_id);
      let info;
      try {
        info = await ctx.telegram.sendMessage(CONFIG.SUPPORT_CHANNEL, 'üìû –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ç–∞...');
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ SUPPORT_CHANNEL:', err);
        ctx.session.waitingFor = {};
        return ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üõ†`, { parse_mode: 'HTML' });
      }
      db.run(
        `INSERT INTO tickets (user_id, username, description, created_at, file_id, channel_message_id)
        VALUES (?, ?, ?, ?, ?, ?)`,
        [id, user.username || '–±–µ–∑ –Ω–∏–∫–∞', description, dayjs().toISOString(), JSON.stringify(fileIds), info.message_id]
      );
      const ticketId = db.get('SELECT last_insert_rowid() as id').id;
      const ticketText =
        `üìû <b>–¢–∏–∫–µ—Ç #${ticketId}</b>\n\n` +
        `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
        `üÜî ID: ${id}\n` +
        `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description}\n` +
        `üìé <b>–§–∞–π–ª—ã:</b> ${fileIds.length > 0 ? fileIds.length + ' —à—Ç.' : '–ù–µ—Ç'}\n` +
        `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${dayjs().format('YYYY-MM-DD HH:mm:ss')}\n` +
        `üìå <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫—Ä—ã—Ç`;
      try {
        await ctx.telegram.editMessageText(CONFIG.SUPPORT_CHANNEL, info.message_id, undefined, ticketText, { parse_mode: 'HTML' });
        if (fileIds.length > 0) {
          for (const fileId of fileIds) {
            await ctx.telegram.sendPhoto(CONFIG.SUPPORT_CHANNEL, fileId, { caption: `üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ —Ç–∏–∫–µ—Ç–∞ #${ticketId}` });
          }
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ SUPPORT_CHANNEL:', err);
        db.run('DELETE FROM tickets WHERE ticket_id = ?', [ticketId]);
        ctx.session.waitingFor = {};
        return ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üõ†`, { parse_mode: 'HTML' });
      }
      for (const adminId of CONFIG.ADMIN_IDS) {
        await ctx.telegram.sendMessage(
          adminId,
          `üìû <b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #${ticketId}</b>\n\n–û—Ç: @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}`,
          { parse_mode: 'HTML' }
        ).catch(err => console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ ${adminId}:`, err));
      }
      ctx.session.waitingFor = {};
      return ctx.reply(
        `‚úÖ <b>–¢–∏–∫–µ—Ç #${ticketId}</b> —Å–æ–∑–¥–∞–Ω! üöÄ\n\n` +
        `–ú—ã –æ—Ç–≤–µ—Ç–∏–º —Ç–µ–±–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ ${CONFIG.BOT_NAME}! üòä`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
      );
    }

    if (ctx.session.waitingFor?.type === 'broadcast' && CONFIG.ADMIN_IDS.includes(id)) {
      const users = db.all('SELECT id FROM users', []);
      let successCount = 0;
      for (const u of users) {
        try {
          await bot.telegram.sendMessage(u.id, ctx.message.text, { parse_mode: 'HTML' });
          successCount++;
        } catch (err) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${u.id}:`, err);
        }
      }
      ctx.session.waitingFor = {};
      return ctx.reply(
        `‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount} –∏–∑ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ${CONFIG.BOT_NAME}. üöÄ`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
      );
    }

    if (ctx.session.waitingFor?.type === 'add_promo' && CONFIG.ADMIN_IDS.includes(id)) {
      const [code, reward, activations] = ctx.message.text.trim().split(' ');
      if (!code || isNaN(reward) || isNaN(activations)) {
        ctx.session.waitingFor = {};
        return ctx.reply(
          `‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π: <code>–ö–û–î –ó–í–Å–ó–î–´ –ê–ö–¢–ò–í–ê–¶–ò–ò</code>\n–ü—Ä–∏–º–µ—Ä: <code>STAR2025 10 5</code>`,
          { parse_mode: 'HTML' }
        );
      }
      db.run('INSERT OR REPLACE INTO promo_codes (code, reward, activations_left, used_by) VALUES (?, ?, ?, ?)', [code, parseInt(reward), parseInt(activations), JSON.stringify([])]);
      ctx.session.waitingFor = {};
      return ctx.reply(
        `‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!</b>\n\n–ö–æ–¥: ${code}\n–ù–∞–≥—Ä–∞–¥–∞: ${reward} –∑–≤—ë–∑–¥\n–ê–∫—Ç–∏–≤–∞—Ü–∏–π: ${activations}`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
      );
    }

    if (ctx.session.waitingFor?.type === 'add_task' && CONFIG.ADMIN_IDS.includes(id)) {
      const [type, ...rest] = ctx.message.text.trim().split(' ');
      const description = rest.slice(0, -2).join(' ');
      const goal = parseInt(rest[rest.length - 2]);
      const reward = parseInt(rest[rest.length - 1]);
      if (!type || !description || isNaN(goal) || isNaN(reward)) {
        ctx.session.waitingFor = {};
        return ctx.reply(
          `‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π: <code>–¢–ò–ü –û–ü–ò–°–ê–ù–ò–ï –¶–ï–õ–¨ –ù–ê–ì–†–ê–î–ê</code>\n–ü—Ä–∏–º–µ—Ä: <code>subscribe_channel –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ ${CONFIG.TASK_CHANNEL} 1 5</code>`,
          { parse_mode: 'HTML' }
        );
      }
      db.run('INSERT OR REPLACE INTO tasks (type, description, goal, reward) VALUES (?, ?, ?, ?)', [type, description, goal, reward]);
      ctx.session.waitingFor = {};
      return ctx.reply(
        `‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n–¢–∏–ø: ${type}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${description}\n–¶–µ–ª—å: ${goal}\n–ù–∞–≥—Ä–∞–¥–∞: ${reward} –∑–≤—ë–∑–¥`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
      );
    }

    if (ctx.session.waitingFor?.type === 'manage_stars' && CONFIG.ADMIN_IDS.includes(id)) {
      const [userId, stars] = ctx.message.text.trim().split(' ').map(s => parseInt(s));
      if (isNaN(userId) || isNaN(stars)) {
        ctx.session.waitingFor = {};
        return ctx.reply(
          `‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π: <code>ID_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ö–û–õ–ò–ß–ï–°–¢–í–û</code>\n–ü—Ä–∏–º–µ—Ä: <code>123456789 50</code> –∏–ª–∏ <code>123456789 -50</code>`,
          { parse_mode: 'HTML' }
        );
      }
      const targetUser = db.get('SELECT * FROM users WHERE id = ?', [userId]);
      if (!targetUser) {
        ctx.session.waitingFor = {};
        return ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`, { parse_mode: 'HTML' });
      }
      const newStars = Math.max(0, targetUser.stars + stars);
      db.run('UPDATE users SET stars = ? WHERE id = ?', [newStars, userId]);
      utils.updateUserTitle(ctx, userId);
      const actionText = stars >= 0 ? `–≤—ã–¥–∞–Ω–æ ${stars} –∑–≤—ë–∑–¥` : `—Å–Ω—è—Ç–æ ${Math.abs(stars)} –∑–≤—ë–∑–¥`;
      await ctx.telegram.sendMessage(
        userId,
        `‚≠ê <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!</b>\n\n–ê–¥–º–∏–Ω ${actionText}. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${newStars} –∑–≤—ë–∑–¥.`,
        { parse_mode: 'HTML' }
      ).catch(err => console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, err));
      ctx.session.waitingFor = {};
      return ctx.reply(
        `‚úÖ <b>–ó–≤—ë–∑–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}\n–î–µ–π—Å—Ç–≤–∏–µ: ${actionText}\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newStars} –∑–≤—ë–∑–¥`,
        { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
      );
    }

    if (ctx.session.waitingFor?.type === 'manage_titles' && CONFIG.ADMIN_IDS.includes(id)) {
      const [userId, titleId] = ctx.message.text.trim().split(' ').map(s => parseInt(s));
      if (isNaN(userId) || isNaN(titleId)) {
        ctx.session.waitingFor = {};
        return ctx.reply(
          `‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π: <code>ID_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ID_–¢–ò–¢–£–õ–ê</code>\n–ü—Ä–∏–º–µ—Ä: <code>123456789 10</code> –∏–ª–∏ <code>123456789 0</code>`,
          { parse_mode: 'HTML' }
        );
      }
      const targetUser = db.get('SELECT * FROM users WHERE id = ?', [userId]);
      if (!targetUser) {
        ctx.session.waitingFor = {};
        return ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`, { parse_mode: 'HTML' });
      }
      if (titleId !== 0) {
        const title = db.get('SELECT * FROM titles WHERE id = ? AND is_secret = 1', [titleId]);
        if (!title) {
          ctx.session.waitingFor = {};
          return ctx.reply(`‚ùå –¢–∏—Ç—É–ª —Å ID ${titleId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–µ–∫—Ä–µ—Ç–Ω—ã–º!`, { parse_mode: 'HTML' });
        }
        db.run('UPDATE users SET title_id = ? WHERE id = ?', [titleId, userId]);
        await ctx.telegram.sendMessage(
          userId,
          `üèÖ <b>–ù–æ–≤—ã–π —Ç–∏—Ç—É–ª!</b>\n\n–ê–¥–º–∏–Ω –ø—Ä–∏—Å–≤–æ–∏–ª —Ç–µ–±–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏—Ç—É–ª: <b>${title.name}</b> (${title.description})`,
          { parse_mode: 'HTML' }
        ).catch(err => console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, err));
        ctx.session.waitingFor = {};
        return ctx.reply(
          `‚úÖ <b>–¢–∏—Ç—É–ª –ø—Ä–∏—Å–≤–æ–µ–Ω!</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}\n–¢–∏—Ç—É–ª: ${title.name}`,
          { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
        );
      } else {
        db.run('UPDATE users SET title_id = NULL WHERE id = ?', [userId]);
        await ctx.telegram.sendMessage(
          userId,
          `üèÖ <b>–¢–∏—Ç—É–ª —Å–Ω—è—Ç!</b>\n\n–ê–¥–º–∏–Ω —É–¥–∞–ª–∏–ª —Ç–≤–æ–π —Ç–∏—Ç—É–ª. –ü—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã! üåü`,
          { parse_mode: 'HTML' }       
          ).catch(err => console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, err));
        ctx.session.waitingFor = {};
        return ctx.reply(
          `‚úÖ <b>–¢–∏—Ç—É–ª —Å–Ω—è—Ç!</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`,
          { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
        );
      }
    }

    if (ctx.session.waitingFor?.type === 'ticket_reply' && CONFIG.ADMIN_IDS.includes(id)) {
      const ticketId = ctx.session.waitingFor.ticketId;
      const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
      if (!ticket) {
        ctx.session.waitingFor = {};
        return ctx.reply(`‚ùå –¢–∏–∫–µ—Ç #${ticketId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`, { parse_mode: 'HTML' });
      }
      const replyText = ctx.message.text;
      await ctx.telegram.sendMessage(
        ticket.user_id,
        `üìû <b>–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId}</b>\n\n` +
        `${replyText}\n\n` +
        `<i>–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" –≤ ${CONFIG.BOT_NAME}!</i>`,
        { parse_mode: 'HTML' }
      ).catch(err => console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ticket.user_id}:`, err));
      db.run('UPDATE tickets SET status = ? WHERE ticket_id = ?', ['closed', ticketId]);
      if (ticket.channel_message_id) {
        try {
          const updatedText =
            `üìû <b>–¢–∏–∫–µ—Ç #${ticket.ticket_id}</b>\n\n` +
            `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
            `üÜî ID: ${ticket.user_id}\n` +
            `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticket.description}\n` +
            `üìé <b>–§–∞–π–ª—ã:</b> ${ticket.file_id && JSON.parse(ticket.file_id).length > 0 ? JSON.parse(ticket.file_id).length + ' —à—Ç.' : '–ù–µ—Ç'}\n` +
            `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${ticket.created_at}\n` +
            `üìå <b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞–∫—Ä—ã—Ç\n` +
            `‚úçÔ∏è <b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞:</b> ${replyText}`;
          await ctx.telegram.editMessageText(
            CONFIG.SUPPORT_CHANNEL,
            ticket.channel_message_id,
            undefined,
            updatedText,
            { parse_mode: 'HTML' }
          );
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ SUPPORT_CHANNEL:', err);
        }
      }
      ctx.session.waitingFor = {};
      return ctx.reply(
        `‚úÖ <b>–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n` +
        `–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üîô –ö —Ç–∏–∫–µ—Ç–∞–º', 'admin_tickets')]])
        }
      );
    }

    if (ctx.session.waitingFor?.type === 'promo_code') {
      const code = ctx.message.text.trim();
      const promo = db.get('SELECT * FROM promo_codes WHERE code = ?', [code]);
      if (!promo) {
        ctx.session.waitingFor = {};
        return ctx.reply(
          `‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n–ò—â–∏ –Ω–æ–≤—ã–µ –∫–æ–¥—ã –≤ –Ω–∞—à–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö ${CONFIG.BOT_NAME}! üì¢`,
          { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
        );
      }
      if (promo.activations_left === 0) {
        ctx.session.waitingFor = {};
        return ctx.reply(
          `‚ö†Ô∏è <b>–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω!</b>\n\n–ò—â–∏ –Ω–æ–≤—ã–µ –∫–æ–¥—ã –≤ –Ω–∞—à–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö ${CONFIG.BOT_NAME}! üì¢`,
          { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
        );
      }
      const usedBy = JSON.parse(promo.used_by || '[]');
      if (usedBy.includes(id)) {
        ctx.session.waitingFor = {};
        return ctx.reply(
          `‚ö†Ô∏è <b>–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!</b>\n\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∫–æ–¥ –≤ ${CONFIG.BOT_NAME}! üí°`,
          { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
        );
      }
      usedBy.push(id);
      db.run('UPDATE promo_codes SET activations_left = activations_left - 1, used_by = ? WHERE code = ?', [JSON.stringify(usedBy), code]);
      db.run('UPDATE users SET stars = stars + ? WHERE id = ?', [promo.reward, id]);
      const updatedUser = db.get('SELECT * FROM users WHERE id = ?', [id]);
      utils.updateUserTitle(ctx, id);
      ctx.session.waitingFor = {};
      return ctx.reply(
        `üéâ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n` +
        `–¢—ã –ø–æ–ª—É—á–∏–ª <b>${promo.reward} –∑–≤—ë–∑–¥</b>! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${updatedUser.stars} ‚≠ê`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]])
        }
      );
    }

    return ctx.reply(
      `ü§î <b>–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É!</b>\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏ "FAQ" –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ ${CONFIG.BOT_NAME}. üåü`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]])
      }
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
    ctx.session.waitingFor = {};
    return ctx.reply(
      `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ${CONFIG.BOT_NAME}. üõ†`,
      { parse_mode: 'HTML', ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]]) }
    );
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log(`${CONFIG.BOT_NAME} –∑–∞–ø—É—â–µ–Ω! üöÄ`);
}).catch(err => {
  console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
  process.exit(1);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));