if (!process.env.BOT_TOKEN) {
  console.error('–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!');
  process.exit(1);
}

const { Telegraf, Markup, session } = require('telegraf');
const dayjs = require('dayjs');
require('dotenv').config();

const db = require('./db');
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());

// –°—Å—ã–ª–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
const REQUIRED_CHANNEL = process.env.REQUIRED_CHANNEL || '@magnumtap';
const TASK_CHANNEL = process.env.TASK_CHANNEL || '@musice46';
const TASK_CHANNEL_KITTY = process.env.TASK_CHANNEL_KITTY || '@kittyyyyywwr';
const TASK_BOT_LINK = process.env.TASK_BOT_LINK || 'https://t.me/firestars_rbot?start=6587897295';
const ADMIN_IDS = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id)) : [6587897295];
const SUPPORT_CHANNEL = process.env.SUPPORT_CHANNEL || '@magnumsupported';
const FARM_COOLDOWN_SECONDS = parseInt(process.env.FARM_COOLDOWN_SECONDS) || 60;
const MESSAGE_TTL = 15_000;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞
function updateUserTitle(ctx, userId) {
  const user = db.get('SELECT * FROM users WHERE id = ?', [userId]);
  const stars = user.stars || 0;
  const referrals = db.get('SELECT COUNT(*) as count FROM users WHERE referred_by = ?', [userId]).count || 0;
  const completedTasks = db.get('SELECT COUNT(*) as count FROM user_tasks WHERE user_id = ? AND completed = 1', [userId]).count || 0;
  const promoCodesUsed = db.get('SELECT COUNT(*) as count FROM promo_codes WHERE used_by LIKE ?', [`%${userId}%`]).count || 0;
  const dailyStreak = user.daily_streak || 0;

  const titles = db.all('SELECT * FROM titles ORDER BY condition_value DESC');
  let newTitle = null;

  for (const title of titles) {
    let achieved = false;
    switch (title.condition_type) {
      case 'stars':
        if (stars >= title.condition_value) achieved = true;
        break;
      case 'referrals':
        if (referrals >= title.condition_value) achieved = true;
        break;
      case 'tasks':
        if (completedTasks >= title.condition_value) achieved = true;
        break;
      case 'daily_streak':
        if (dailyStreak >= title.condition_value) achieved = true;
        break;
      case 'promo_codes':
        if (promoCodesUsed >= title.condition_value) achieved = true;
        break;
    }
    if (achieved && (!user.title_id || title.condition_value > db.get('SELECT condition_value FROM titles WHERE id = ?', [user.title_id])?.condition_value || 0)) {
      newTitle = title;
      break;
    }
  }

  if (newTitle && newTitle.id !== user.title_id) {
    db.run('UPDATE users SET title_id = ? WHERE id = ?', [newTitle.id, userId]);
    ctx.telegram.sendMessage(
      userId,
      `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø–æ–ª—É—á–∏–ª —Ç–∏—Ç—É–ª <b>${newTitle.name}</b>! üåü\n\n<i>${newTitle.description}</i>`,
      { parse_mode: 'HTML' }
    );
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ª—É—á–∏–ª —Ç–∏—Ç—É–ª "${newTitle.name}" (–æ–ø–∏—Å–∞–Ω–∏–µ: "${newTitle.description}")`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function deleteNotification(ctx, messageId) {
  if (messageId && Number.isInteger(messageId)) {
    setTimeout(async () => {
      try {
        await ctx.telegram.deleteMessage(ctx.chat.id, messageId);
      } catch (err) {
        if (err.response?.error_code !== 400) {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err);
        }
      }
    }, MESSAGE_TTL);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async function isUserSubscribed(ctx, channel = REQUIRED_CHANNEL) {
  try {
    const status = await ctx.telegram.getChatMember(channel, ctx.from.id);
    return ['member', 'creator', 'administrator'].includes(status.status);
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${channel}:`, err);
    return false;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function getTopUsers(limit = 10) {
  return db.all(`
    SELECT 
      u.username, 
      u.stars, 
      (SELECT COUNT(*) FROM users WHERE referred_by = u.id) AS referrals,
      t.name AS title_name
    FROM users u
    LEFT JOIN titles t ON u.title_id = t.id
    ORDER BY u.stars DESC 
    LIMIT ?
  `, [limit]);
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
async function sendMainMenu(ctx, edit = false) {
  const id = ctx.from.id;
  const user = db.get('SELECT * FROM users WHERE id = ?', [id]);
  const stars = user ? user.stars : 0;
  const invited = user ? db.get('SELECT COUNT(*) as count FROM users WHERE referred_by = ?', [id]).count : 0;
  const messageText =
    `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!</b> üåü\n\n` +
    `–¢—ã –≤ –∏–≥—Ä–µ, –≥–¥–µ –º–æ–∂–Ω–æ <i>–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã</i> ‚ú®, –≤—ã–ø–æ–ª–Ω—è—è –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π –∏ —Å–æ–±–∏—Ä–∞—è –±–æ–Ω—É—Å—ã! üöÄ\n\n` +
    `üí´ <b>–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> ${stars} –∑–≤—ë–∑–¥\n` +
    `üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> ${invited}\n\n` +
    `–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Å—Ç–∞–Ω—å –∑–≤–µ–∑–¥–æ–π Magnum Stars! üåü\n` +
    `<i>–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –±–æ—Ç—É!</i>`;

  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('‚≠ê –§–∞—Ä–º –∑–≤—ë–∑–¥', 'farm'),
      Markup.button.callback('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', 'bonus')
    ],
    [
      Markup.button.callback('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'profile'),
      Markup.button.callback('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'leaders')
    ],
    [
      Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats'),
      Markup.button.callback('üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'ref')
    ],
    [Markup.button.callback('üìã –ó–∞–¥–∞–Ω–∏—è', 'tasks')],
    [Markup.button.callback('üí° –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', 'enter_code')],
    ADMIN_IDS.includes(ctx.from.id) ? [Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin')] : []
  ]);

  if (edit) {
    await ctx.editMessageText(messageText, { parse_mode: 'HTML', ...keyboard });
  } else {
    await ctx.reply(messageText, { parse_mode: 'HTML', ...keyboard });
  }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(async (ctx, next) => {
  ctx.session = ctx.session || {};
  const id = ctx.from.id;
  const user = db.get('SELECT * FROM users WHERE id = ?', [id]);
  if (!user && ctx.updateType === 'message' && ctx.message?.text !== '/start') {
    const msg = await ctx.reply('‚ùå –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ Magnum Stars! üöÄ');
    deleteNotification(ctx, msg.message_id);
    return;
  }
  return next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  ctx.session = ctx.session || {};
  ctx.session.currentTaskIndex = 0;
  ctx.session.waitingForTaskScreenshot = null;
  ctx.session.waitingForSupport = false;
  ctx.session.waitingForCode = false;
  ctx.session.waitingForPromo = false;
  ctx.session.waitingForTicketReply = false;
  ctx.session.broadcast = false;

  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
  const subscribed = await isUserSubscribed(ctx);
  if (!subscribed) {
    const msg = await ctx.reply(
      `üîí <b>–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n` +
      `üì¢ –≠—Ç–æ —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –∑–≤—ë–∑–¥–∞–º Magnum Stars! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ ${REQUIRED_CHANNEL} –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è! üåü`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${REQUIRED_CHANNEL.replace('@', '')}`)],
          [Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_sub')]
        ])
      }
    );
    return;
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const existing = db.get('SELECT * FROM users WHERE id = ?', [id]);
  if (!existing) {
    db.run('INSERT INTO users (id, username, referred_by, stars, daily_streak) VALUES (?, ?, ?, 0, 0)', [id, username, referral]);
    if (referral && referral !== id) {
      db.run('UPDATE users SET stars = stars + 10 WHERE id = ?', [referral]);
      ctx.telegram.sendMessage(
        referral,
        `üéâ –¢–≤–æ–π –¥—Ä—É–≥ @${username || '–±–µ–∑ –Ω–∏–∫–∞'} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ Magnum Stars! +10 –∑–≤—ë–∑–¥! üåü`,
        { parse_mode: 'HTML' }
      );
      updateUserTitle(ctx, referral); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ç—É–ª–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    }
  }

  await sendMainMenu(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.command('help', async (ctx) => {
  const id = ctx.from.id;
  const user = db.get('SELECT * FROM users WHERE id = ?', [id]);
  if (!user) {
    const msg = await ctx.reply('‚ùå –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ Magnum Stars! üöÄ');
    deleteNotification(ctx, msg.message_id);
    return;
  }
  const helpText =
    `üåü <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Magnum Stars</b> ‚ú®\n\n` +
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç, –≥–¥–µ —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –∑–≤—ë–∑–¥—ã ‚ú® –∏ —Å–æ—Ä–µ–≤–Ω—É–µ—à—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏! –í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å:\n\n` +
    `‚≠ê <b>–§–∞—Ä–º –∑–≤—ë–∑–¥</b>: –ù–∞–∂–∏–º–∞–π "–§–∞—Ä–º" –∫–∞–∂–¥—ã–µ ${FARM_COOLDOWN_SECONDS} —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ª—É—á–∞–π +1 –∑–≤–µ–∑–¥—É!\n` +
    `üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</b>: –†–∞–∑ –≤ 24 —á–∞—Å–∞ –ø–æ–ª—É—á–∞–π +5 –∑–≤—ë–∑–¥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n` +
    `üìã <b>–ó–∞–¥–∞–Ω–∏—è</b>: –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–π –±–æ—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –ø–æ–ª—É—á–∞–π –¥–æ 10 –∑–≤—ë–∑–¥!\n` +
    `üë• <b>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π</b>: –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ, +10 –∑–≤—ë–∑–¥!\n` +
    `üí° <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã</b>: –í–≤–æ–¥–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–≤—ë–∑–¥.\n` +
    `üèÖ <b>–¢–∏—Ç—É–ª—ã</b>: –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã, –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫—Ä—É—Ç—ã–µ —Ç–∏—Ç—É–ª—ã!\n` +
    `üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>: –ü–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ—è—Å–Ω–æ, ‚Äî –æ—Ç–≤–µ—Ç–∏–º –±—ã—Å—Ç—Ä–æ!\n\n` +
    `üèÜ –°–º–æ—Ç—Ä–∏ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Å—è –∑–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ!\n` +
    `üîç –ò—Å–ø–æ–ª—å–∑—É–π –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.\n\n` +
    `<i>–ü–æ–¥—Å–∫–∞–∑–∫–∞: —á–∞—â–µ –ø—Ä–æ–≤–µ—Ä—è–π –∑–∞–¥–∞–Ω–∏—è ‚Äî –Ω–æ–≤—ã–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ!</i>`;
  const msg = await ctx.reply(helpText, {
    parse_mode: 'HTML',
    ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]])
  });
  deleteNotification(ctx, msg.message_id);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (ctx) => {
  ctx.session = ctx.session || {};
  const id = ctx.from.id;
  const now = Date.now();
  const action = ctx.callbackQuery.data;
  let user = db.get('SELECT * FROM users WHERE id = ?', [id]);

  if (!user && action !== 'check_sub') return ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–∞–ø–∏—à–∏ /start.', { show_alert: true });

  if (action === 'check_sub') {
    const subscribed = await isUserSubscribed(ctx);
    if (!subscribed) {
      return ctx.answerCbQuery(`‚ùå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ ${REQUIRED_CHANNEL} –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Magnum Stars!`, { show_alert: true });
    }
    registerUser(ctx);
    await sendMainMenu(ctx);
    return;
  }

  if (action === 'farm') {
    const cooldown = FARM_COOLDOWN_SECONDS * 1000;
    if (now - user.last_farm < cooldown) {
      const seconds = Math.ceil((cooldown - (now - user.last_farm)) / 1000);
      return ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏ ${seconds} —Å–µ–∫. –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞!`, { show_alert: true });
    }
    db.run('UPDATE users SET stars = stars + 1, last_farm = ? WHERE id = ?', [now, id]);
    user = db.get('SELECT * FROM users WHERE id = ?', [id]);
    updateUserTitle(ctx, id); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ç—É–ª–∞
    await sendMainMenu(ctx, true);
    return ctx.answerCbQuery(`‚≠ê +1 –∑–≤–µ–∑–¥–∞! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.stars} –∑–≤—ë–∑–¥.`, { show_alert: true });
  }

  if (action === 'bonus') {
    const nowDay = dayjs();
    const last = user.last_bonus ? dayjs(user.last_bonus) : null;
    if (last && nowDay.diff(last, 'hour') < 24) {
      const hoursLeft = 24 - nowDay.diff(last, 'hour');
      const minutesLeft = Math.ceil((24 * 60 - nowDay.diff(last, 'minute')) % 60);
      return ctx.answerCbQuery(`üéÅ –ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${hoursLeft} —á. ${minutesLeft} –º–∏–Ω.`, { show_alert: true });
    }
    const dailyStreak = last && nowDay.diff(last, 'day') === 1 ? user.daily_streak + 1 : 1;
    db.run('UPDATE users SET stars = stars + 5, last_bonus = ?, daily_streak = ? WHERE id = ?', [nowDay.toISOString(), dailyStreak, id]);
    user = db.get('SELECT * FROM users WHERE id = ?', [id]);
    updateUserTitle(ctx, id); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ç—É–ª–∞
    await sendMainMenu(ctx, true);
    return ctx.answerCbQuery(`üéâ +5 –∑–≤—ë–∑–¥! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.stars} –∑–≤—ë–∑–¥.`, { show_alert: true });
  }

  if (action === 'tasks' || action === 'next_task') {
    ctx.session.currentTaskIndex = action === 'next_task' ? (ctx.session.currentTaskIndex || 0) + 1 : ctx.session.currentTaskIndex || 0;
    const tasks = db.all('SELECT * FROM tasks');
    if (tasks.length === 0) {
      await ctx.editMessageText(
        'üìã <b>–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç!</b>\n\n<i>–ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è, —Å–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ Magnum Stars!</i>',
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]])
        }
      );
      return;
    }
    const taskIndex = ctx.session.currentTaskIndex % tasks.length;
    const task = tasks[taskIndex];
    const userTask = db.get('SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ?', [id, task.id]) || { progress: 0, completed: 0 };
    const taskStatus = userTask.completed ? '‚úÖ <i>–í—ã–ø–æ–ª–Ω–µ–Ω–æ</i>' : userTask.progress > 0 ? '‚è≥ <i>–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</i>' : 'üî• <i>–ù–µ –Ω–∞—á–∞—Ç–æ</i>';
    const buttons = [
      [
        task.type === 'subscribe_channel' || task.type === 'subscribe_channel_kittyyyyywwr'
          ? Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', `https://t.me/${(task.type === 'subscribe_channel' ? TASK_CHANNEL : TASK_CHANNEL_KITTY).replace('@', '')}`)
          : Markup.button.url('ü§ñ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞', TASK_BOT_LINK),
        Markup.button.callback('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç', `check_task_${task.id}`)
      ],
      [Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', 'next_task')],
      [Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]
    ];
    const messageText =
      `üìã <b>–ó–∞–¥–∞–Ω–∏–µ #${taskIndex + 1}/${tasks.length}</b>\n\n` +
      `üéØ <b>${task.description}</b>\n` +
      `üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> ${task.reward} –∑–≤—ë–∑–¥\n` +
      `üìå <b>–°—Ç–∞—Ç—É—Å:</b> ${taskStatus}\n\n` +
      `<i>–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!</i>`;
    if (action === 'next_task') {
      await ctx.editMessageText(messageText, { parse_mode: 'HTML', ...Markup.inlineKeyboard(buttons) });
    } else {
      await ctx.reply(messageText, { parse_mode: 'HTML', ...Markup.inlineKeyboard(buttons) });
    }
    return;
  }

  if (action.startsWith('check_task_')) {
    const taskId = parseInt(action.split('_')[2]);
    const task = db.get('SELECT * FROM tasks WHERE id = ?', [taskId]);
    if (!task) {
      return ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!', { show_alert: true });
    }
    const userTask = db.get('SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ?', [id, task.id]) || { progress: 0, completed: 0 };
    if (userTask.completed) {
      return ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü–µ—Ä–µ–π–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤ Magnum Stars! üåü', { show_alert: true });
    }
    if (userTask.progress > 0) {
      return ctx.answerCbQuery('‚è≥ –ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤! üïí', { show_alert: true });
    }
    ctx.session.waitingForTaskScreenshot = taskId;
    const msg = await ctx.reply(
      'üì∏ <b>–û—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç</b>\n\n' +
      '–°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å—é–¥–∞! üì∑',
      { parse_mode: 'HTML' }
    );
    deleteNotification(ctx, msg.message_id);
    return;
  }

  if (['profile', 'leaders', 'stats', 'ref'].includes(action)) {
    await ctx.deleteMessage().catch(() => {});
  }

  if (action === 'profile') {
    const invited = db.get('SELECT COUNT(*) as count FROM users WHERE referred_by = ?', [id]).count;
    const referredByUser = user.referred_by ? db.get('SELECT username FROM users WHERE id = ?', [user.referred_by]) : null;
    const referrerName = referredByUser ? `@${referredByUser.username || '–±–µ–∑ –Ω–∏–∫–∞'}` : '‚Äî';
    const displayName = ctx.from.first_name || '–ê–Ω–æ–Ω–∏–º';
    const title = user.title_id ? db.get('SELECT name, description FROM titles WHERE id = ?', [user.title_id]) : null;
    const titleText = title ? `${title.name} (${title.description})` : '–ù–µ—Ç —Ç–∏—Ç—É–ª–∞';
    const tasks = db.all('SELECT * FROM tasks');
    const completedTasks = db.all('SELECT t.description FROM user_tasks ut JOIN tasks t ON ut.task_id = t.id WHERE ut.user_id = ? AND ut.completed = 1', [id]);
    const nowDay = dayjs();
    const lastBonus = user.last_bonus ? dayjs(user.last_bonus) : null;
    const bonusStatus = lastBonus && nowDay.diff(lastBonus, 'hour') < 24
      ? `‚è≥ –î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ ${24 - nowDay.diff(lastBonus, 'hour')} —á. ${Math.ceil((24 * 60 - nowDay.diff(lastBonus, 'minute')) % 60)} –º–∏–Ω.`
      : '‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ!';
    const profileText =
      `üåü <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ Magnum Stars</b> ‚ú®\n\n` +
      `üë§ <b>–ò–º—è:</b> ${displayName}\n` +
      `üèÖ <b>–¢–∏—Ç—É–ª:</b> ${titleText}\n` +
      `üÜî <b>ID:</b> ${user.id}\n` +
      `üí´ <b>–ó–≤—ë–∑–¥—ã:</b> ${user.stars} ‚ú®\n` +
      `üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:</b> ${invited}\n` +
      `üì£ <b>–¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª:</b> ${referrerName}\n` +
      `üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å:</b> ${bonusStatus}\n` +
      `üìã <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b> ${completedTasks.length > 0 ? completedTasks.map(t => t.description).join(', ') : '–ù–µ—Ç'}\n\n` +
      `<i>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥ –∏ —Å—Ç–∞–Ω—å –ª–µ–≥–µ–Ω–¥–æ–π Magnum Stars!</i>`;
    await ctx.reply(profileText, {
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')],
        [Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]
      ])
    });
    return;
  }

  if (action === 'support') {
    ctx.session.waitingForSupport = true;
    await ctx.reply(
      'üìû <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Magnum Stars</b>\n\n' +
      '–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ! üöÄ',
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([[Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_support')]])
      }
    );
    return;
  }

  if (action === 'cancel_support') {
    ctx.session.waitingForSupport = false;
    await ctx.deleteMessage().catch(() => {});
    await sendMainMenu(ctx);
    return;
  }

  if (action === 'leaders') {
    const top = getTopUsers();
    const list = top.length > 0
      ? top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ${u.title_name ? `(${u.title_name})` : ''} ‚Äî ${u.stars} ‚≠ê ‚Äî –¥—Ä—É–∑–µ–π: ${u.referrals}`).join('\n')
      : 'üòî –ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤. –ë—É–¥—å –ø–µ—Ä–≤—ã–º! üöÄ';
    await ctx.reply(
      `üèÜ <b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ Magnum Stars</b> üåü\n\n${list}\n\n<i>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!</i>`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]])
      }
    );
    return;
  }

  if (action === 'stats') {
    const total = db.get('SELECT COUNT(*) as count FROM users').count;
    const totalStars = db.get('SELECT SUM(stars) as stars FROM users').stars || 0;
    const completedTasks = db.get('SELECT COUNT(*) as count FROM user_tasks WHERE completed = 1').count;
    await ctx.reply(
      `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Magnum Stars</b> ‚ú®\n\n` +
      `üë• <b>–ò–≥—Ä–æ–∫–æ–≤:</b> ${total}\n` +
      `‚≠ê <b>–í—Å–µ–≥–æ –∑–≤—ë–∑–¥:</b> ${totalStars}\n` +
      `üìã <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:</b> ${completedTasks}\n\n` +
      `<i>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–π –∑–≤—ë–∑–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ!</i>`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]])
      }
    );
    return;
  }

  if (action === 'ref') {
    const link = `https://t.me/${ctx.me}?start=${ctx.from.id}`;
    await ctx.reply(
      `üì© <b>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –≤ Magnum Stars!</b> üë•\n\n` +
      `–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<a href="${link}">${link}</a>\n\n` +
      `–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ, —Ç—ã –ø–æ–ª—É—á–∏—à—å <b>+10 –∑–≤—ë–∑–¥</b>! üåü\n` +
      `<i>–î–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –ª–∏–¥–µ—Ä–æ–º!</i>`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]])
      }
    );
    return;
  }

  if (action === 'enter_code') {
    ctx.session.waitingForCode = true;
    const msg = await ctx.reply(
      'üí° <b>–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n' +
      '–û—Ç–ø—Ä–∞–≤—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –∑–≤—ë–∑–¥—ã –≤ Magnum Stars! ‚ú®',
      { parse_mode: 'HTML' }
    );
    deleteNotification(ctx, msg.message_id);
    return;
  }

  if (action === 'admin') {
    if (!ADMIN_IDS.includes(id)) return ctx.answerCbQuery('‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ Magnum Stars!', { show_alert: true });
    await ctx.editMessageText(
      `‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Magnum Stars</b> üîí\n\n` +
      `–£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º –∏ —Å–ª–µ–¥–∏ –∑–∞ –∑–≤—ë–∑–¥–∞–º–∏! üåü`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
          [Markup.button.callback('üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'admin_top')],
          [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')],
          [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'admin_addcode')],
          [Markup.button.callback('üìû –¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏', 'admin_tickets')],
          [Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]
        ])
      }
    );
    return;
  }

  if (action === 'admin_stats') {
    const total = db.get('SELECT COUNT(*) as count FROM users').count;
    const totalStars = db.get('SELECT SUM(stars) as stars FROM users').stars || 0;
    const openTickets = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['open']).count;
    const inProgressTickets = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['in_progress']).count;
    const closedTickets = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['closed']).count;
    const approvedTasks = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['approved']).count;
    const rejectedTasks = db.get('SELECT COUNT(*) as count FROM tickets WHERE status = ?', ['rejected']).count;
    return ctx.answerCbQuery(
      `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Magnum Stars</b>\n\n` +
      `üë• –ò–≥—Ä–æ–∫–æ–≤: ${total}\n` +
      `‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars}\n` +
      `üìû –¢–∏–∫–µ—Ç—ã: –û—Ç–∫—Ä—ã—Ç–æ: ${openTickets} | –í —Ä–∞–±–æ—Ç–µ: ${inProgressTickets} | –ó–∞–∫—Ä—ã—Ç–æ: ${closedTickets}\n` +
      `üìã –ó–∞—è–≤–∫–∏: –û–¥–æ–±—Ä–µ–Ω–æ: ${approvedTasks} | –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${rejectedTasks}`,
      { show_alert: true }
    );
  }

  if (action === 'admin_top') {
    const top = getTopUsers();
    const list = top.length > 0
      ? top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ${u.title_name ? `(${u.title_name})` : ''} ‚Äî ${u.stars} ‚≠ê`).join('\n')
      : 'üòî –ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤.';
    await ctx.reply(
      `üèÜ <b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ Magnum Stars</b> üåü\n\n${list}\n\n<i>–≠—Ç–æ –ª—É—á—à–∏–µ –∑–≤—ë–∑–¥–Ω—ã–µ –æ—Ö–æ—Ç–Ω–∏–∫–∏!</i>`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]])
      }
    );
    return;
  }

  if (action === 'admin_broadcast') {
    ctx.session.broadcast = true;
    await ctx.reply(
      'üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n' +
      '–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Magnum Stars. –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–π–¥—ë—Ç –≤—Å–µ–º! üö®',
      { parse_mode: 'HTML' }
    );
    return;
  }

  if (action === 'admin_addcode') {
    ctx.session.waitingForPromo = true;
    const msg = await ctx.reply(
      '‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n' +
      '–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–ö–û–î –ó–í–Å–ó–î–´ –ê–ö–¢–ò–í–ê–¶–ò–ò</code>\n' +
      '–ü—Ä–∏–º–µ—Ä: <code>STAR2023 10 5</code>',
      { parse_mode: 'HTML' }
    );
    deleteNotification(ctx, msg.message_id);
    return;
  }

  if (action === 'admin_tickets') {
    const tickets = db.all('SELECT * FROM tickets WHERE status IN (?, ?) ORDER BY created_at DESC LIMIT 10', ['open', 'in_progress']);
    if (tickets.length === 0) {
      await ctx.reply(
        'üìû <b>–¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏</b>\n\n' +
        'üòî –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∏–ª–∏ –∑–∞—è–≤–æ–∫.\n\n<i>–ü—Ä–æ–≤–µ—Ä—å –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.</i>',
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]])
        }
      );
      return;
    }
    const buttons = tickets.map(ticket => {
      const type = ticket.task_type
        ? `üìã –ó–∞—è–≤–∫–∞ (${ticket.task_type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL}` : ticket.task_type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL_KITTY}` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'})`
        : 'üìû –¢–∏–∫–µ—Ç';
      return [
        Markup.button.callback(
          `${type} #${ticket.ticket_id} (@${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}, ${ticket.status === 'open' ? '–û—Ç–∫—Ä—ã—Ç' : '–í —Ä–∞–±–æ—Ç–µ'})`,
          `ticket_${ticket.ticket_id}`
        )
      ];
    });
    buttons.push([Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]);
    await ctx.reply(
      'üìû <b>–¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏</b>\n\n' +
      '–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: üîç',
      { parse_mode: 'HTML', ...Markup.inlineKeyboard(buttons) }
    );
    return;
  }

  if (action.startsWith('ticket_')) {
    const ticketId = parseInt(action.split('_')[1]);
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
    if (!ticket) return ctx.answerCbQuery('‚ùå –¢–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!', { show_alert: true });
    const fileIds = ticket.file_id ? JSON.parse(ticket.file_id) : [];
    const fileText = fileIds.length > 0 ? `üìé <b>–§–∞–π–ª—ã:</b> ${fileIds.length} —à—Ç.` : 'üìé <b>–§–∞–π–ª–æ–≤ –Ω–µ—Ç</b>';
    const type = ticket.task_type
      ? `üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (${ticket.task_type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL}` : ticket.task_type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL_KITTY}` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'})`
      : 'üìû –¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏';
    const ticketText =
      `${type} #${ticket.ticket_id}\n\n` +
      `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
      `üÜî ID: ${ticket.user_id}\n` +
      `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticket.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
      `${fileText}\n` +
      `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${ticket.created_at}\n` +
      `üìå <b>–°—Ç–∞—Ç—É—Å:</b> ${ticket.status === 'open' ? '–û—Ç–∫—Ä—ã—Ç' : ticket.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : ticket.status === 'approved' ? '–û–¥–æ–±—Ä–µ–Ω–æ' : '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'}\n\n` +
      `<i>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:</i>`;
    const buttons = [];
    if (ticket.task_type) {
      buttons.push([Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_task_${ticket.ticket_id}`)]);
      buttons.push([Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_task_${ticket.ticket_id}`)]);
    } else {
      buttons.push([Markup.button.callback('‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', `reply_ticket_${ticket.ticket_id}`)]);
      buttons.push([Markup.button.callback('üîÑ –í —Ä–∞–±–æ—Ç–µ', `set_ticket_status_${ticket.ticket_id}_in_progress`)]);
      buttons.push([Markup.button.callback('‚úÖ –ó–∞–∫—Ä—ã—Ç—å', `set_ticket_status_${ticket.ticket_id}_closed`)]);
    }
    if (fileIds.length > 0) {
      buttons.unshift([Markup.button.callback('üìé –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã', `view_files_${ticket.ticket_id}`)]);
    }
    buttons.push([Markup.button.callback('üîô –ö —Ç–∏–∫–µ—Ç–∞–º', 'admin_tickets')]);
    await ctx.editMessageText(ticketText, { parse_mode: 'HTML', ...Markup.inlineKeyboard(buttons) });
    return;
  }

  if (action.startsWith('view_files_')) {
    const ticketId = parseInt(action.split('_')[2]);
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
    if (!ticket || !ticket.file_id) return ctx.answerCbQuery('‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!', { show_alert: true });
    const fileIds = JSON.parse(ticket.file_id);
    for (const fileId of fileIds) {
      await ctx.telegram.sendPhoto(id, fileId, { caption: `üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ ${ticket.task_type ? '–∑–∞—è–≤–∫–∏' : '—Ç–∏–∫–µ—Ç–∞'} #${ticketId}` });
    }
    return ctx.answerCbQuery('üìé –§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç!', { show_alert: true });
  }

  if (action.startsWith('approve_task_')) {
    const ticketId = parseInt(action.split('_')[2]);
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
    if (!ticket) return ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', { show_alert: true });
    const task = db.get('SELECT id, reward FROM tasks WHERE type = ?', [ticket.task_type]);
    if (!task) return ctx.answerCbQuery('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!', { show_alert: true });
    db.run('UPDATE tickets SET status = ? WHERE ticket_id = ?', ['approved', ticketId]);
    db.run('INSERT OR REPLACE INTO user_tasks (user_id, task_id, progress, completed) VALUES (?, ?, ?, ?)', [ticket.user_id, task.id, 1, 1]);
    db.run('UPDATE users SET stars = stars + ? WHERE id = ?', [task.reward, ticket.user_id]);
    updateUserTitle(ctx, ticket.user_id); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ç—É–ª–∞
    if (ticket.channel_message_id) {
      try {
        const updatedText =
          `üìã <b>–ó–∞—è–≤–∫–∞ #${ticket.ticket_id}</b>\n\n` +
          `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
          `üÜî ID: ${ticket.user_id}\n` +
          `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticket.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
          `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${ticket.created_at}\n` +
          `üìå <b>–°—Ç–∞—Ç—É—Å:</b> –û–¥–æ–±—Ä–µ–Ω–æ ‚úÖ\n` +
          `üéâ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> ${task.reward} –∑–≤—ë–∑–¥`;
        await ctx.telegram.editMessageText(
          SUPPORT_CHANNEL,
          ticket.channel_message_id,
          undefined,
          updatedText,
          { parse_mode: 'HTML' }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }
    const taskName = ticket.task_type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL}` : ticket.task_type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL_KITTY}` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞';
    await ctx.telegram.sendMessage(
      ticket.user_id,
      `üìã <b>–ó–∞—è–≤–∫–∞ #${ticketId}</b> –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ "${taskName}" <b>–æ–¥–æ–±—Ä–µ–Ω–∞</b>! üéâ\n\n` +
      `–¢—ã –ø–æ–ª—É—á–∏–ª <b>${task.reward} –∑–≤—ë–∑–¥</b>! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${db.get('SELECT stars FROM users WHERE id = ?', [ticket.user_id]).stars} ‚≠ê`,
      { parse_mode: 'HTML' }
    );
    await ctx.answerCbQuery(`‚úÖ –ó–∞—è–≤–∫–∞ #${ticketId} –æ–¥–æ–±—Ä–µ–Ω–∞!`, { show_alert: true });
    await ctx.deleteMessage().catch(() => {});
    await ctx.reply(
      'üìû <b>–¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏</b>\n\n' +
      '–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: üîç',
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([[Markup.button.callback('üîô –ö —Ç–∏–∫–µ—Ç–∞–º', 'admin_tickets')]])
      }
    );
    return;
  }

  if (action.startsWith('reject_task_')) {
    const ticketId = parseInt(action.split('_')[2]);
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
    if (!ticket) return ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', { show_alert: true });
    db.run('UPDATE tickets SET status = ? WHERE ticket_id = ?', ['rejected', ticketId]);
    const task = db.get('SELECT id FROM tasks WHERE type = ?', [ticket.task_type]);
    if (task) {
      db.run('DELETE FROM user_tasks WHERE user_id = ? AND task_id = ?', [ticket.user_id, task.id]);
    }
    if (ticket.channel_message_id) {
      try {
        const updatedText =
          `üìã <b>–ó–∞—è–≤–∫–∞ #${ticket.ticket_id}</b>\n\n` +
          `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
          `üÜî ID: ${ticket.user_id}\n` +
          `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticket.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
          `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${ticket.created_at}\n` +
          `üìå <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå`;
        await ctx.telegram.editMessageText(
          SUPPORT_CHANNEL,
          ticket.channel_message_id,
          undefined,
          updatedText,
          { parse_mode: 'HTML' }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }
    const taskName = ticket.task_type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL}` : ticket.task_type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL_KITTY}` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞';
    await ctx.telegram.sendMessage(
      ticket.user_id,
      `üìã <b>–ó–∞—è–≤–∫–∞ #${ticketId}</b> –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ "${taskName}" <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b> ‚ùå\n\n` +
      `–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! –°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. üõ†`,
      { parse_mode: 'HTML' }
    );
    await ctx.answerCbQuery(`‚ùå –ó–∞—è–≤–∫–∞ #${ticketId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!`, { show_alert: true });
    await ctx.deleteMessage().catch(() => {});
    await ctx.reply(
      'üìû <b>–¢–∏–∫–µ—Ç—ã –∏ –∑–∞—è–≤–∫–∏</b>\n\n' +
      '–í—ã–±–µ—Ä–∏ —Ç–∏–∫–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: üîç',
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([[Markup.button.callback('üîô –ö —Ç–∏–∫–µ—Ç–∞–º', 'admin_tickets')]])
      }
    );
    return;
  }

  if (action.startsWith('reply_ticket_')) {
    const ticketId = parseInt(action.split('_')[2]);
    ctx.session.waitingForTicketReply = ticketId;
    await ctx.reply(
      `‚úçÔ∏è <b>–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId}</b>\n\n` +
      `–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`,
      { parse_mode: 'HTML' }
    );
    return;
  }

  if (action.startsWith('set_ticket_status_')) {
    const parts = action.split('_');
    if (parts.length < 4) {
      return ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è!', { show_alert: true });
    }
    const ticketId = parseInt(parts[3], 10);
    const status = parts.slice(4).join('_');
    if (isNaN(ticketId) || !['in_progress', 'closed'].includes(status)) {
      return ctx.answerCbQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ —Å—Ç–∞—Ç—É—Å!', { show_alert: true });
    }
    db.run('UPDATE tickets SET status = ? WHERE ticket_id = ?', [status, ticketId]);
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
    if (!ticket) return ctx.answerCbQuery('‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!', { show_alert: true });
    if (ticket.channel_message_id) {
      try {
        const updatedText =
          `üìû <b>–¢–∏–∫–µ—Ç #${ticket.ticket_id}</b>\n\n` +
          `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
          `üÜî ID: ${ticket.user_id}\n` +
          `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticket.description}\n` +
          `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${ticket.created_at}\n` +
          `üìå <b>–°—Ç–∞—Ç—É—Å:</b> ${ticket.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}`;
        await ctx.telegram.editMessageText(
          SUPPORT_CHANNEL,
          ticket.channel_message_id,
          undefined,
          updatedText,
          { parse_mode: 'HTML' }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }
    const userMsg = await ctx.telegram.sendMessage(
      ticket.user_id,
      `üìû <b>–¢–∏–∫–µ—Ç #${ticketId}</b>\n\n` +
      `–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: <b>${ticket.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}</b>`,
      { parse_mode: 'HTML' }
    );
    deleteNotification(ctx, userMsg.message_id);
    await ctx.answerCbQuery(`‚úÖ –°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ #${ticketId} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "${ticket.status === 'in_progress' ? '–í —Ä–∞–±–æ—Ç–µ' : '–ó–∞–∫—Ä—ã—Ç'}"`, { show_alert: true });
    return;
  }

  if (action === 'back') {
    await ctx.deleteMessage().catch(() => {});
    await sendMainMenu(ctx);
    return;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
  ctx.session = ctx.session || {};
  const id = ctx.from.id;
  let user = db.get('SELECT * FROM users WHERE id = ?', [id]);

  if (!user) {
    ctx.session.waitingForCode = false;
    ctx.session.broadcast = false;
    ctx.session.waitingForPromo = false;
    ctx.session.waitingForSupport = false;
    ctx.session.waitingForTaskScreenshot = null;
    const msg = await ctx.reply('‚ùå –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ Magnum Stars! üöÄ');
    deleteNotification(ctx, msg.message_id);
    return;
  }

  if (ctx.session?.waitingForTaskScreenshot) {
    const taskId = ctx.session.waitingForTaskScreenshot;
    const task = db.get('SELECT * FROM tasks WHERE id = ?', [taskId]);
    if (!task) {
      ctx.session.waitingForTaskScreenshot = null;
      const msg = await ctx.reply('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!', { parse_mode: 'HTML' });
      deleteNotification(ctx, msg.message_id);
      return;
    }
    if (!ctx.message.photo) {
      const msg = await ctx.reply(
        '‚ùå <b>–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ!</b>\n\n' +
        '–ù—É–∂–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è. üì∑',
        { parse_mode: 'HTML' }
      );
      deleteNotification(ctx, msg.message_id);
      return;
    }
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    const fileId = photo.file_id;
    const description = `–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ: ${task.type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL}` : task.type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL_KITTY}` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'}`;
    let info;
    try {
      info = await ctx.telegram.sendMessage(SUPPORT_CHANNEL, 'üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–∫–∏...');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ SUPPORT_CHANNEL:', error);
      const msg = await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üõ†', { parse_mode: 'HTML' });
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForTaskScreenshot = null;
      return;
    }
    db.run(`
      INSERT INTO tickets (user_id, username, description, created_at, file_id, channel_message_id, task_type)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `, [id, user.username || '–±–µ–∑ –Ω–∏–∫–∞', description, dayjs().toISOString(), JSON.stringify([fileId]), info.message_id, task.type]);
    const ticketId = db.get('SELECT last_insert_rowid() as id').id;
    const ticketText =
      `üìã <b>–ó–∞—è–≤–∫–∞ #${ticketId}</b>\n\n` +
      `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
      `üÜî ID: ${id}\n` +
      `üìù <b>–ó–∞–¥–∞–Ω–∏–µ:</b> ${description}\n` +
      `üìé <b>–§–∞–π–ª:</b> 1 —à—Ç.\n` +
      `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${dayjs().format('YYYY-MM-DD HH:mm:ss')}\n` +
      `üìå <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫—Ä—ã—Ç`;
    try {
      await ctx.telegram.editMessageText(
        SUPPORT_CHANNEL,
        info.message_id,
        undefined,
        ticketText,
        { parse_mode: 'HTML' }
      );
      await ctx.telegram.sendPhoto(SUPPORT_CHANNEL, fileId, { caption: `üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ #${ticketId}` });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ SUPPORT_CHANNEL:', error);
      db.run('DELETE FROM tickets WHERE ticket_id = ?', [ticketId]);
      const msg = await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üõ†', { parse_mode: 'HTML' });
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForTaskScreenshot = null;
      return;
    }
    for (const adminId of ADMIN_IDS) {
      await ctx.telegram.sendMessage(
        adminId,
        `üìã <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${ticketId}</b>\n\n` +
        `–ó–∞–¥–∞–Ω–∏–µ: "${task.type === 'subscribe_channel' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL}` : task.type === 'subscribe_channel_kittyyyyywwr' ? `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${TASK_CHANNEL_KITTY}` : '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'}"\n` +
        `–û—Ç: @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}`,
        { parse_mode: 'HTML' }
      );
    }
    const msg = await ctx.reply(
      `‚úÖ <b>–ó–∞—è–≤–∫–∞ #${ticketId}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! ‚è≥\n\n` +
      `–û–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–æ–≤. –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ó–∞–¥–∞–Ω–∏—è". üìã`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]])
      }
    );
    deleteNotification(ctx, msg.message_id);
    ctx.session.waitingForTaskScreenshot = null;
    return;
  }

  if (ctx.session?.waitingForSupport) {
    const description = ctx.message.text || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
    const fileIds = [];
    if (ctx.message.photo) {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      fileIds.push(photo.file_id);
    }
    if (ctx.message.document) {
      fileIds.push(ctx.message.document.file_id);
    }
    let info;
    try {
      info = await ctx.telegram.sendMessage(SUPPORT_CHANNEL, 'üìû –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–∫–µ—Ç–∞...');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ SUPPORT_CHANNEL:', error);
      const msg = await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üõ†', { parse_mode: 'HTML' });
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForSupport = false;
      return;
    }
    db.run(`
      INSERT INTO tickets (user_id, username, description, created_at, file_id, channel_message_id)
      VALUES (?, ?, ?, ?, ?, ?)
    `, [id, user.username || '–±–µ–∑ –Ω–∏–∫–∞', description, dayjs().toISOString(), JSON.stringify(fileIds), info.message_id]);
    const ticketId = db.get('SELECT last_insert_rowid() as id').id;
    const ticketText =
      `üìû <b>–¢–∏–∫–µ—Ç #${ticketId}</b>\n\n` +
      `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
      `üÜî ID: ${id}\n` +
      `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description}\n` +
      `üìé <b>–§–∞–π–ª—ã:</b> ${fileIds.length > 0 ? fileIds.length + ' —à—Ç.' : '–ù–µ—Ç'}\n` +
      `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${dayjs().format('YYYY-MM-DD HH:mm:ss')}\n` +
      `üìå <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫—Ä—ã—Ç`;
    try {
      await ctx.telegram.editMessageText(
        SUPPORT_CHANNEL,
        info.message_id,
        undefined,
        ticketText,
        { parse_mode: 'HTML' }
      );
      if (fileIds.length > 0) {
        for (const fileId of fileIds) {
          await ctx.telegram.sendPhoto(SUPPORT_CHANNEL, fileId, { caption: `üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ —Ç–∏–∫–µ—Ç–∞ #${ticketId}` });
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ SUPPORT_CHANNEL:', error);
      db.run('DELETE FROM tickets WHERE ticket_id = ?', [ticketId]);
      const msg = await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üõ†', { parse_mode: 'HTML' });
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForSupport = false;
      return;
    }
    for (const adminId of ADMIN_IDS) {
      await ctx.telegram.sendMessage(
        adminId,
        `üìû <b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #${ticketId}</b>\n\n` +
        `–û—Ç: @${user.username || '–±–µ–∑ –Ω–∏–∫–∞'}`,
        { parse_mode: 'HTML' }
      );
    }
    const msg = await ctx.reply(
      `‚úÖ <b>–¢–∏–∫–µ—Ç #${ticketId}</b> —Å–æ–∑–¥–∞–Ω! üöÄ\n\n` +
      `–ú—ã –æ—Ç–≤–µ—Ç–∏–º —Ç–µ–±–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ Magnum Stars! üòä`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]])
      }
    );
    deleteNotification(ctx, msg.message_id);
    ctx.session.waitingForSupport = false;
    return;
  }

  if (ctx.session?.broadcast && ADMIN_IDS.includes(id)) {
    const users = db.all('SELECT id FROM users');
    let successCount = 0;
    for (const u of users) {
      try {
        await bot.telegram.sendMessage(u.id, ctx.message.text, { parse_mode: 'HTML' });
        successCount++;
      } catch {}
    }
    const msg = await ctx.reply(
      `‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n` +
      `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount} –∏–∑ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Magnum Stars. üöÄ`,
      { parse_mode: 'HTML' }
    );
    deleteNotification(ctx, msg.message_id);
    ctx.session.broadcast = false;
    return;
  }

  if (ctx.session?.waitingForCode) {
    const code = ctx.message.text.trim();
    const promo = db.get('SELECT * FROM promo_codes WHERE code = ?', [code]);
    if (!promo) {
      const msg = await ctx.reply('‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!</b>\n\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∫–æ–¥. üí°', { parse_mode: 'HTML' });
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForCode = false;
      return;
    }
    if (promo.activations_left === 0) {
      const msg = await ctx.reply('‚ö†Ô∏è <b>–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω!</b>\n\n–ò—â–∏ –Ω–æ–≤—ã–µ –∫–æ–¥—ã –≤ –Ω–∞—à–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö! üì¢', { parse_mode: 'HTML' });
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForCode = false;
      return;
    }
    let usedBy = promo.used_by ? JSON.parse(promo.used_by) : [];
    if (usedBy.includes(id)) {
      const msg = await ctx.reply('‚ö†Ô∏è <b>–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!</b>\n\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π. üí°', { parse_mode: 'HTML' });
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForCode = false;
      return;
    }
    db.run('UPDATE users SET stars = stars + ? WHERE id = ?', [promo.reward, id]);
    usedBy.push(id);
    db.run('UPDATE promo_codes SET activations_left = ?, used_by = ? WHERE code = ?', [
      promo.activations_left - 1,
      JSON.stringify(usedBy),
      code
    ]);
    user = db.get('SELECT * FROM users WHERE id = ?', [id]);
    updateUserTitle(ctx, id); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ç—É–ª–∞
    const msg = await ctx.reply(
      `‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b> üéâ\n\n` +
      `–¢—ã –ø–æ–ª—É—á–∏–ª <b>${promo.reward} –∑–≤—ë–∑–¥</b>! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.stars} ‚≠ê`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([[Markup.button.callback('üîô –í –º–µ–Ω—é', 'back')]])
      }
    );
    deleteNotification(ctx, msg.message_id);
    ctx.session.waitingForCode = false;
    return;
  }

  if (ctx.session?.waitingForPromo && ADMIN_IDS.includes(id)) {
    const parts = ctx.message.text.trim().split(/\s+/);
    if (parts.length !== 3) {
      const msg = await ctx.reply(
        '‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π: <code>–ö–û–î –ó–í–Å–ó–î–´ –ê–ö–¢–ò–í–ê–¶–ò–ò</code>\n' +
        '–ü—Ä–∏–º–µ—Ä: <code>STAR2023 10 5</code>',
        { parse_mode: 'HTML' }
      );
      deleteNotification(ctx, msg.message_id);
      return;
    }
    const [code, rewardStr, activationsStr] = parts;
    const reward = parseInt(rewardStr);
    const activations = parseInt(activationsStr);
    if (!code || isNaN(reward) || isNaN(activations)) {
      const msg = await ctx.reply(
        '‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π: <code>–ö–û–î –ó–í–Å–ó–î–´ –ê–ö–¢–ò–í–ê–¶–ò–ò</code>\n' +
        '–ü—Ä–∏–º–µ—Ä: <code>STAR2023 10 5</code>',
        { parse_mode: 'HTML' }
      );
      deleteNotification(ctx, msg.message_id);
      return;
    }
    db.run('INSERT INTO promo_codes (code, reward, activations_left, used_by) VALUES (?, ?, ?, ?)', [
      code,
      reward,
      activations,
      JSON.stringify([])
    ]);
    const msg = await ctx.reply(
      `‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ "${code}"</b> –¥–æ–±–∞–≤–ª–µ–Ω! üéâ\n\n` +
      `–ù–∞–≥—Ä–∞–¥–∞: ${reward} –∑–≤—ë–∑–¥, –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${activations}.`,
      { parse_mode: 'HTML' }
    );
    deleteNotification(ctx, msg.message_id);
    ctx.session.waitingForPromo = false;
    return;
  }

  if (ctx.session?.waitingForTicketReply && ADMIN_IDS.includes(id)) {
    const ticketId = ctx.session.waitingForTicketReply;
    const ticket = db.get('SELECT * FROM tickets WHERE ticket_id = ?', [ticketId]);
    if (!ticket) {
      const msg = await ctx.reply('‚ùå <b>–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>', { parse_mode: 'HTML' });
      deleteNotification(ctx, msg.message_id);
      ctx.session.waitingForTicketReply = false;
      return;
    }
    const replyText = ctx.message.text || '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞';
    const fileIds = [];
    if (ctx.message.photo) {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      fileIds.push(photo.file_id);
    }
    if (ctx.message.document) {
      fileIds.push(ctx.message.document.file_id);
    }
    if (ticket.channel_message_id) {
      try {
        const updatedText =
          `üìû <b>–¢–∏–∫–µ—Ç #${ticket.ticket_id}</b>\n\n` +
          `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ticket.username || '–±–µ–∑ –Ω–∏–∫–∞'}\n` +
          `üÜî ID: ${ticket.user_id}\n` +
          `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${ticket.description}\n` +
          `üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> ${ticket.created_at}\n` +
          `üìå <b>–°—Ç–∞—Ç—É—Å:</b> ${ticket.status}\n` +
          `\n‚úçÔ∏è <b>–û—Ç–≤–µ—Ç:</b> ${replyText}`;
        await ctx.telegram.editMessageText(
          SUPPORT_CHANNEL,
          ticket.channel_message_id,
          undefined,
          updatedText,
          { parse_mode: 'HTML' }
        );
        if (fileIds.length > 0) {
          for (const fileId of fileIds) {
            await ctx.telegram.sendPhoto(SUPPORT_CHANNEL, fileId, { caption: `üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –∫ –æ—Ç–≤–µ—Ç—É #${ticketId}` });
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }
    const userMsg = await ctx.telegram.sendMessage(
      ticket.user_id,
      `üìû <b>–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId}</b>\n\n${replyText}`,
      { parse_mode: 'HTML' }
    );
    deleteNotification(ctx, userMsg.message_id);
    if (fileIds.length > 0) {
      for (const fileId of fileIds) {
        await ctx.telegram.sendPhoto(ticket.user_id, fileId, { caption: `üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –∫ –æ—Ç–≤–µ—Ç—É #${ticketId}` });
      }
    }
    const replyMsg = await ctx.reply(
      `‚úÖ <b>–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üöÄ`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([[Markup.button.callback('üîô –ö —Ç–∏–∫–µ—Ç–∞–º', 'admin_tickets')]])
      }
    );
    deleteNotification(ctx, replyMsg.message_id);
    ctx.session.waitingForTicketReply = false;
    return;
  }
});

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function registerUser(ctx) {
  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;
  const existing = db.get('SELECT * FROM users WHERE id = ?', [id]);
  if (!existing) {
    db.run('INSERT INTO users (id, username, referred_by, stars, daily_streak) VALUES (?, ?, ?, 0, 0)', [id, username, referral]);
    if (referral && referral !== id) {
      db.run('UPDATE users SET stars = stars + 10 WHERE id = ?', [referral]);
      ctx.telegram.sendMessage(
        referral,
        `üéâ –¢–≤–æ–π –¥—Ä—É–≥ @${username || '–±–µ–∑ –Ω–∏–∫–∞'} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ Magnum Stars! +10 –∑–≤—ë–∑–¥! üåü`,
        { parse_mode: 'HTML' }
      );
      updateUserTitle(ctx, referral);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => console.log('ü§ñ –ë–æ—Ç Magnum Stars –∑–∞–ø—É—â–µ–Ω!')).catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err));