const { Telegraf, Markup, session } = require('telegraf');
const Database = require('better-sqlite3');
const axios = require('axios');

const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session()); // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

const db = new Database('users.db');
const REQUIRED_CHANNEL = '@magnumtap'; // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª
const ADMIN_ID = 6587897295; // –≤–∞—à Telegram ID

// –¢–∞–±–ª–∏—Ü—ã
db.prepare(`CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY,
  username TEXT,
  stars INTEGER DEFAULT 0,
  referred_by INTEGER,
  bonus_time INTEGER DEFAULT 0
)`).run();

db.prepare(`CREATE TABLE IF NOT EXISTS promocodes (
  code TEXT PRIMARY KEY,
  reward INTEGER
)`).run();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async function isSubscribed(userId) {
  try {
    const res = await axios.get(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/getChatMember?chat_id=${REQUIRED_CHANNEL}&user_id=${userId}`);
    const status = res.data.result.status;
    return ['member', 'administrator', 'creator'].includes(status);
  } catch {
    return false;
  }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
  return Markup.inlineKeyboard([
    [Markup.button.callback('üí´ –§–∞—Ä–º', 'farm')],
    [Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
    [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
    [Markup.button.callback('üèÜ –¢–æ–ø', 'leaders')],
    [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')],
    [Markup.button.callback('üì® –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', 'promo')],
    [Markup.button.callback('üì£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å', 'ref')]
  ]);
}

// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function registerUser(ctx) {
  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const ref_by = ctx.session?.ref || null;

  const exists = db.prepare('SELECT 1 FROM users WHERE id = ?').get(id);
  if (!exists) {
    db.prepare('INSERT INTO users (id, username, referred_by) VALUES (?, ?, ?)').run(id, username, ref_by);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
bot.start(async (ctx) => {
  if (ctx.startPayload) ctx.session.ref = parseInt(ctx.startPayload);
  registerUser(ctx);

  const subscribed = await isSubscribed(ctx.from.id);
  if (!subscribed) {
    return ctx.reply('üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:', Markup.inlineKeyboard([
      [Markup.button.url('üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', `https://t.me/${REQUIRED_CHANNEL.replace('@', '')}`)],
      [Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_sub')]
    ]));
  }

  return ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MagnumTap!', getMainMenu());
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
bot.action('check_sub', async (ctx) => {
  const subscribed = await isSubscribed(ctx.from.id);
  if (subscribed) {
    registerUser(ctx);
    return ctx.editMessageText('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!', getMainMenu());
  } else {
    return ctx.answerCbQuery('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', { show_alert: true });
  }
});

// Callback –¥–µ–π—Å—Ç–≤–∏—è
bot.on('callback_query', async (ctx) => {
  const id = ctx.from.id;
  const action = ctx.callbackQuery.data;

  if (!await isSubscribed(id)) {
    return ctx.editMessageText('üîí –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:', Markup.inlineKeyboard([
      [Markup.button.url('üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', `https://t.me/${REQUIRED_CHANNEL.replace('@', '')}`)],
      [Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'check_sub')]
    ]));
  }

  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);

  if (action === 'farm') {
    db.prepare('UPDATE users SET stars = stars + 1 WHERE id = ?').run(id);
    return ctx.answerCbQuery('üí´ +1 –∑–≤–µ–∑–¥–∞!');
  }

  if (action === 'bonus') {
    const now = Math.floor(Date.now() / 1000);
    if (now - user.bonus_time < 3600) {
      const remaining = 3600 - (now - user.bonus_time);
      const minutes = Math.ceil(remaining / 60);
      return ctx.answerCbQuery(`‚åõ –ë–æ–Ω—É—Å —á–µ—Ä–µ–∑ ${minutes} –º–∏–Ω.`, { show_alert: true });
    } else {
      db.prepare('UPDATE users SET stars = stars + 10, bonus_time = ? WHERE id = ?').run(now, id);
      return ctx.answerCbQuery('üéÅ +10 –±–æ–Ω—É—Å–Ω—ã—Ö –∑–≤—ë–∑–¥!');
    }
  }

  if (action === 'profile') {
    const invited = db.prepare('SELECT COUNT(*) as c FROM users WHERE referred_by = ?').get(id).c;
    return ctx.editMessageText(`üë§ –ü—Ä–æ—Ñ–∏–ª—å:
üÜî ID: ${user.id}
üí´ –ó–≤—ë–∑–¥—ã: ${user.stars}
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${invited}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'leaders') {
    const top = db.prepare('SELECT username, stars FROM users ORDER BY stars DESC LIMIT 10').all();
    const text = top.map((u, i) => `${i + 1}. @${u.username || 'anon'} ‚Äî ${u.stars}‚≠ê`).join('\n');
    return ctx.editMessageText(`üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n${text}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'stats') {
    const total = db.prepare('SELECT COUNT(*) as c FROM users').get().c;
    const sum = db.prepare('SELECT SUM(stars) as s FROM users').get().s || 0;
    return ctx.editMessageText(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}
‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${sum}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'ref') {
    const link = `https://t.me/${ctx.me}?start=${ctx.from.id}`;
    return ctx.editMessageText(`üì£ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –∑–≤—ë–∑–¥—ã!
–¢–≤–æ—è —Å—Å—ã–ª–∫–∞: ${link}`, Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (action === 'promo') {
    ctx.session.waitingPromo = true;
    return ctx.editMessageText('üéü –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:');
  }

  if (action === 'back') {
    try { await ctx.deleteMessage(); } catch {}
    return ctx.reply('üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', getMainMenu());
  }

  // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
  if (id === ADMIN_ID && action === 'admin') {
    return ctx.editMessageText('üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', Markup.inlineKeyboard([
      [Markup.button.callback('üì® –†–∞—Å—Å—ã–ª–∫–∞', 'broadcast')],
      [Markup.button.callback('üìã –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'leaders')],
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')],
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', 'addpromo')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
    ]));
  }

  if (id === ADMIN_ID && action === 'broadcast') {
    ctx.session.waitingBroadcast = true;
    return ctx.editMessageText('üì® –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
  }

  if (id === ADMIN_ID && action === 'addpromo') {
    ctx.session.waitingPromocode = true;
    return ctx.editMessageText('üÜï –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –Ω–∞–≥—Ä–∞–¥—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: TAP2025 25)');
  }
});

// –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
bot.on('text', async (ctx) => {
  const id = ctx.from.id;

  if (ctx.session.waitingBroadcast && id === ADMIN_ID) {
    const users = db.prepare('SELECT id FROM users').all();
    for (const u of users) {
      try {
        await bot.telegram.sendMessage(u.id, ctx.message.text);
      } catch {}
    }
    ctx.session.waitingBroadcast = false;
    return ctx.reply('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  if (ctx.session.waitingPromocode && id === ADMIN_ID) {
    const [code, reward] = ctx.message.text.trim().split(' ');
    if (!code || isNaN(reward)) {
      return ctx.reply('‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: `TAP2025 25`');
    }
    try {
      db.prepare('INSERT INTO promocodes (code, reward) VALUES (?, ?)').run(code, parseInt(reward));
      ctx.reply('‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!');
    } catch {
      ctx.reply('‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
    }
    ctx.session.waitingPromocode = false;
    return;
  }

  if (ctx.session.waitingPromo) {
    const code = ctx.message.text.trim();
    const promo = db.prepare('SELECT * FROM promocodes WHERE code = ?').get(code);
    if (!promo) return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥');

    db.prepare('UPDATE users SET stars = stars + ? WHERE id = ?').run(promo.reward, id);
    db.prepare('DELETE FROM promocodes WHERE code = ?').run(code);
    ctx.session.waitingPromo = false;
    return ctx.reply(`üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${promo.reward} –∑–≤—ë–∑–¥!`);
  }
});

bot.launch();
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');