const { Telegraf, Markup } = require('telegraf');
const Database = require('better-sqlite3');
const dayjs = require('dayjs');
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const db = new Database('users.db');

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
db.prepare(`
  CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    stars INTEGER DEFAULT 0,
    referred_by INTEGER,
    last_farm INTEGER DEFAULT 0,
    last_bonus TEXT
  )
`).run();

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
function registerUser(ctx) {
  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;

  const existing = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  if (!existing) {
    db.prepare('INSERT INTO users (id, username, referred_by) VALUES (?, ?, ?)').run(id, username, referral);
    if (referral && referral !== id) {
      db.prepare('UPDATE users SET stars = stars + 10 WHERE id = ?').run(referral);
      ctx.reply('üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 –∑–≤—ë–∑–¥ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!');
    }
  }
}

// –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
const mainMenu = Markup.inlineKeyboard([
  [Markup.button.callback('‚≠ê –§–∞—Ä–º', 'farm')],
  [Markup.button.callback('üéÅ –ë–æ–Ω—É—Å', 'bonus')],
  [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
  [Markup.button.callback('üèÜ –õ–∏–¥–µ—Ä—ã', 'leaders')],
  [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')],
]);

// –°—Ç–∞—Ä—Ç
bot.start((ctx) => {
  registerUser(ctx);

  ctx.reply(
    'üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã!',
    mainMenu
  );
});

// üëÜ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.action('farm', (ctx) => {
  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(ctx.from.id);
  const now = Date.now();

  if (!user) return ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start');

  const cooldown = 60 * 1000;
  if (now - user.last_farm < cooldown) {
    const seconds = Math.ceil((cooldown - (now - user.last_farm)) / 1000);
    return ctx.answerCbQuery(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${seconds} —Å–µ–∫.`);
  }

  db.prepare('UPDATE users SET stars = stars + 1, last_farm = ? WHERE id = ?').run(now, ctx.from.id);
  ctx.answerCbQuery('‚≠ê +1 –∑–≤–µ–∑–¥–∞!');
});

bot.action('bonus', (ctx) => {
  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(ctx.from.id);
  const now = dayjs();
  const last = user.last_bonus ? dayjs(user.last_bonus) : null;

  if (last && now.diff(last, 'hour') < 24) {
    const hoursLeft = 24 - now.diff(last, 'hour');
    return ctx.answerCbQuery(`‚è≥ –ß–µ—Ä–µ–∑ ${hoursLeft} —á.`);
  }

  db.prepare('UPDATE users SET stars = stars + 5, last_bonus = ? WHERE id = ?').run(now.toISOString(), ctx.from.id);
  ctx.answerCbQuery('üéâ +5 –∑–≤—ë–∑–¥ (–±–æ–Ω—É—Å)!');
});

bot.action('profile', (ctx) => {
  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(ctx.from.id);
  if (!user) return ctx.answerCbQuery('–ù–∞–∂–º–∏—Ç–µ /start');

  ctx.reply(`üë§ –ü—Ä–æ—Ñ–∏–ª—å:
üÜî ID: ${user.id}
üí´ –ó–≤—ë–∑–¥—ã: ${user.stars}
üì£ –†–µ—Ñ: ${user.referred_by || '‚Äî'}
`, mainMenu);
  ctx.answerCbQuery();
});

bot.action('leaders', (ctx) => {
  const top = db.prepare('SELECT username, stars FROM users ORDER BY stars DESC LIMIT 10').all();
  const list = top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê`).join('\n');

  ctx.reply(`üèÜ –¢–æ–ø 10 –ª–∏–¥–µ—Ä–æ–≤:\n\n${list}`, mainMenu);
  ctx.answerCbQuery();
});

bot.action('stats', (ctx) => {
  const total = db.prepare('SELECT COUNT(*) as count FROM users').get().count;
  const totalStars = db.prepare('SELECT SUM(stars) as stars FROM users').get().stars || 0;

  ctx.reply(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}
‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars}`, mainMenu);
  ctx.answerCbQuery();
});

bot.launch();