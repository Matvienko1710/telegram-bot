const { Telegraf, Markup } = require('telegraf');
const Database = require('better-sqlite3');
const dayjs = require('dayjs');
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const db = new Database('users.db');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
db.prepare(`
  CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    stars INTEGER DEFAULT 0,
    referred_by INTEGER,
    last_farm INTEGER DEFAULT 0,
    last_bonus TEXT
  )
`).run();

// ‚ûï –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function registerUser(ctx) {
  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;

  const existing = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  if (!existing) {
    db.prepare('INSERT INTO users (id, username, referred_by) VALUES (?, ?, ?)').run(id, username, referral);
    if (referral && referral !== id) {
      db.prepare('UPDATE users SET stars = stars + 10 WHERE id = ?').run(referral);
      ctx.reply('üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 –∑–≤—ë–∑–¥ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!');
    }
  }
}

// ü™ô –§–∞—Ä–º
bot.command('farm', (ctx) => {
  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(ctx.from.id);
  const now = Date.now();

  if (!user) return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start');

  const cooldown = 60 * 1000;
  if (now - user.last_farm < cooldown) {
    const seconds = Math.ceil((cooldown - (now - user.last_farm)) / 1000);
    return ctx.reply(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${seconds} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞.`);
  }

  db.prepare('UPDATE users SET stars = stars + 1, last_farm = ? WHERE id = ?').run(now, ctx.from.id);
  ctx.reply('‚≠ê –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 1 –∑–≤–µ–∑–¥—É!');
});

// üéÅ –ë–æ–Ω—É—Å
bot.command('bonus', (ctx) => {
  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(ctx.from.id);
  const now = dayjs();
  const last = user.last_bonus ? dayjs(user.last_bonus) : null;

  if (last && now.diff(last, 'hour') < 24) {
    const hoursLeft = 24 - now.diff(last, 'hour');
    return ctx.reply(`üéÅ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ ${hoursLeft} —á.`);
  }

  db.prepare('UPDATE users SET stars = stars + 5, last_bonus = ? WHERE id = ?').run(now.toISOString(), ctx.from.id);
  ctx.reply('üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +5 –∑–≤—ë–∑–¥!');
});

// üë§ –ü—Ä–æ—Ñ–∏–ª—å
bot.command('profile', (ctx) => {
  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(ctx.from.id);
  if (!user) return ctx.reply('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start');

  ctx.reply(`üë§ –ü—Ä–æ—Ñ–∏–ª—å:
üÜî ID: ${user.id}
üí´ –ó–≤—ë–∑–¥—ã: ${user.stars}
üì£ –†–µ—Ñ: ${user.referred_by || '‚Äî'}
`);
});

// üèÜ –õ–∏–¥–µ—Ä—ã
bot.command('leaders', (ctx) => {
  const top = db.prepare('SELECT username, stars FROM users ORDER BY stars DESC LIMIT 10').all();

  const list = top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê`).join('\n');

  ctx.reply(`üèÜ –¢–æ–ø 10 –ª–∏–¥–µ—Ä–æ–≤:\n\n${list}`);
});

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.command('stats', (ctx) => {
  const total = db.prepare('SELECT COUNT(*) as count FROM users').get().count;
  const totalStars = db.prepare('SELECT SUM(stars) as stars FROM users').get().stars || 0;

  ctx.reply(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}\n‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars}`);
});

// üì≤ /start + —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
bot.start((ctx) => {
  registerUser(ctx);

  ctx.reply(
    'üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã:\n\n' +
      '/farm ‚Äì —Ñ–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã (1/–º–∏–Ω)\n' +
      '/bonus ‚Äì –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n' +
      '/profile ‚Äì –ø—Ä–æ—Ñ–∏–ª—å\n' +
      '/leaders ‚Äì —Ç–æ–ø 10\n' +
      '/stats ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n' +
      'üîó –¢–≤–æ—è —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞:\n' +
      `https://t.me/${ctx.me}?start=${ctx.from.id}`
  );
});

bot.launch();