const { Telegraf, Markup } = require('telegraf');
const dayjs = require('dayjs');
require('dotenv').config();

const db = require('./db');

const bot = new Telegraf(process.env.BOT_TOKEN);

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function registerUser(ctx) {
  const id = ctx.from.id;
  const username = ctx.from.username || '';
  const referral = ctx.startPayload ? parseInt(ctx.startPayload) : null;

  const existing = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  if (!existing) {
    db.prepare('INSERT INTO users (id, username, referred_by) VALUES (?, ?, ?)').run(id, username, referral);
    if (referral && referral !== id) {
      db.prepare('UPDATE users SET stars = stars + 10 WHERE id = ?').run(referral);
      ctx.reply('üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 –∑–≤—ë–∑–¥ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!');
    }
  }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function sendMainMenu(ctx) {
  ctx.reply('üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', Markup.keyboard([
    ['‚≠ê –§–∞—Ä–º', 'üéÅ –ë–æ–Ω—É—Å'],
    ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üèÜ –õ–∏–¥–µ—Ä—ã'],
    ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π']
  ]).resize());
}

bot.on('text', async (ctx) => {
  const id = ctx.from.id;
  let user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);

  if (!user) {
    registerUser(ctx);
    user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
    sendMainMenu(ctx);
    return;
  }

  const now = Date.now();
  const text = ctx.message.text;

  if (text === '‚≠ê –§–∞—Ä–º') {
    const cooldown = 60 * 1000;
    if (now - user.last_farm < cooldown) {
      const seconds = Math.ceil((cooldown - (now - user.last_farm)) / 1000);
      const sent = await ctx.reply(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${seconds} —Å–µ–∫.`);
      setTimeout(() => ctx.deleteMessage(sent.message_id), 5000);
      return;
    }

    db.prepare('UPDATE users SET stars = stars + 1, last_farm = ? WHERE id = ?').run(now, user.id);
    const sent = await ctx.reply('‚≠ê –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 1 –∑–≤–µ–∑–¥—É!');
    setTimeout(() => ctx.deleteMessage(sent.message_id), 5000);
    return;
  }

  if (text === 'üéÅ –ë–æ–Ω—É—Å') {
    const nowDay = dayjs();
    const last = user.last_bonus ? dayjs(user.last_bonus) : null;

    if (last && nowDay.diff(last, 'hour') < 24) {
      const hoursLeft = 24 - nowDay.diff(last, 'hour');
      const sent = await ctx.reply(`üéÅ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ ${hoursLeft} —á.`);
      setTimeout(() => ctx.deleteMessage(sent.message_id), 5000);
      return;
    }

    db.prepare('UPDATE users SET stars = stars + 5, last_bonus = ? WHERE id = ?').run(nowDay.toISOString(), user.id);
    const sent = await ctx.reply('üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +5 –∑–≤—ë–∑–¥!');
    setTimeout(() => ctx.deleteMessage(sent.message_id), 5000);
    return;
  }

  if (text === 'üë§ –ü—Ä–æ—Ñ–∏–ª—å') {
    return ctx.reply(`üë§ –ü—Ä–æ—Ñ–∏–ª—å:
üÜî ID: ${user.id}
üí´ –ó–≤—ë–∑–¥—ã: ${user.stars}
üì£ –†–µ—Ñ: ${user.referred_by || '‚Äî'}`);
  }

  if (text === 'üèÜ –õ–∏–¥–µ—Ä—ã') {
    const top = db.prepare('SELECT username, stars FROM users ORDER BY stars DESC LIMIT 10').all();
    const list = top.map((u, i) => `${i + 1}. @${u.username || '–±–µ–∑ –Ω–∏–∫–∞'} ‚Äî ${u.stars}‚≠ê`).join('\n');
    return ctx.reply(`üèÜ –¢–æ–ø 10:\n\n${list}`);
  }

  if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
    const total = db.prepare('SELECT COUNT(*) as count FROM users').get().count;
    const totalStars = db.prepare('SELECT SUM(stars) as stars FROM users').get().stars || 0;
    return ctx.reply(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total}\n‚≠ê –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: ${totalStars}`);
  }

  if (text === 'üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π') {
    const link = `https://t.me/${ctx.me}?start=${ctx.from.id}`;
    return ctx.reply(`üîó –¢–≤–æ—è —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞:\n${link}`, Markup.keyboard([
      ['üîô –ù–∞–∑–∞–¥']
    ]).resize());
  }

  if (text === 'üîô –ù–∞–∑–∞–¥') {
    return sendMainMenu(ctx);
  }
});

bot.start((ctx) => {
  registerUser(ctx);
  sendMainMenu(ctx);
});

bot.launch().then(() => {
  console.log('ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
});